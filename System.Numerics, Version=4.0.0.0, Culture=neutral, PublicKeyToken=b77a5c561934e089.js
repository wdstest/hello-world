/* Generated by JSIL v0.8.2 build 30533. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm08 = JSIL.DeclareAssembly("System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

/* class FXAssembly */ 

(function FXAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("FXAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Version", $.String, "4.0.0.0");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ThisAssembly */ 

(function ThisAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("ThisAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Title", $.String, "System.Numerics.dll");

    $.Constant({Static:true , Public:false}, "Description", $.String, "System.Numerics.dll");

    $.Constant({Static:true , Public:false}, "DefaultAlias", $.String, "System.Numerics.dll");

    $.Constant({Static:true , Public:false}, "Copyright", $.String, "\xa9 Microsoft Corporation.  All rights reserved.");

    $.Constant({Static:true , Public:false}, "Version", $.String, "4.0.0.0");

    $.Constant({Static:true , Public:false}, "InformationalVersion", $.String, "4.6.1590.0");

    $.Constant({Static:true , Public:false}, "DailyBuildNumberStr", $.String, "30319");

    $.Constant({Static:true , Public:false}, "BuildRevisionStr", $.String, "0");

    $.Constant({Static:true , Public:false}, "DailyBuildNumber", $.Int32, 30319);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class AssemblyRef */ 

(function AssemblyRef$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("AssemblyRef", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "EcmaPublicKey", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "EcmaPublicKeyToken", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "EcmaPublicKeyFull", $.String, "00000000000000000400000000000000");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKey", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyToken", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyFull", $.String, "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKey", $.String, "7cec85d7bea7798e");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyToken", $.String, "7cec85d7bea7798e");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyFull", $.String, "00240000048000009400000006020000002400005253413100040000010001008D56C76F9E8649383049F383C44BE0EC204181822A6C31CF5EB7EF486944D032188EA1D3920763712CCB12D75FB77E9811149E6148E5D32FBAAB37611C1878DDC19E20EF135D0CB2CFF2BFEC3D115810C3D9069638FE4BE215DBF795861920E5AB6F7DB2E2CEEF136AC23D5DD2BF031700AEC232F6C6B1C785B4305C123B37AB");

    $.Constant({Static:true , Public:false}, "PlatformPublicKey", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "PlatformPublicKeyToken", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "PlatformPublicKeyFull", $.String, "00000000000000000400000000000000");

    $.Constant({Static:true , Public:false}, "Mscorlib", $.String, "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemData", $.String, "System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemDataOracleClient", $.String, "System.Data.OracleClient, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "System", $.String, "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemCore", $.String, "System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemNumerics", $.String, "System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemRuntimeRemoting", $.String, "System.Runtime.Remoting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemThreadingTasksDataflow", $.String, "System.Threading.Tasks.Dataflow, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemWindowsForms", $.String, "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemXml", $.String, "System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKey", $.String, "b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyToken", $.String, "b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyFull", $.String, "002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKey", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyToken", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyFull", $.String, "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9");

    $.Constant({Static:true , Public:false}, "SystemComponentModelDataAnnotations", $.String, "System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemConfiguration", $.String, "System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemConfigurationInstall", $.String, "System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDeployment", $.String, "System.Deployment, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDesign", $.String, "System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDirectoryServices", $.String, "System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDrawingDesign", $.String, "System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDrawing", $.String, "System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemEnterpriseServices", $.String, "System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemManagement", $.String, "System.Management, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemMessaging", $.String, "System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemNetHttp", $.String, "System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemNetHttpWebRequest", $.String, "System.Net.Http.WebRequest, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemRuntimeSerializationFormattersSoap", $.String, "System.Runtime.Serialization.Formatters.Soap, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemRuntimeWindowsRuntime", $.String, "System.Runtime.WindowsRuntime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemRuntimeWindowsRuntimeUIXaml", $.String, "System.Runtime.WindowsRuntimeUIXaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemSecurity", $.String, "System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemServiceModelWeb", $.String, "System.ServiceModel.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemServiceProcess", $.String, "System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWeb", $.String, "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebAbstractions", $.String, "System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebDynamicData", $.String, "System.Web.DynamicData, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebDynamicDataDesign", $.String, "System.Web.DynamicData.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebEntityDesign", $.String, "System.Web.Entity.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemWebExtensions", $.String, "System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebExtensionsDesign", $.String, "System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebMobile", $.String, "System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebRegularExpressions", $.String, "System.Web.RegularExpressions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebRouting", $.String, "System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebServices", $.String, "System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "WindowsBase", $.String, "WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudio", $.String, "Microsoft.VisualStudio, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWindowsForms", $.String, "Microsoft.VisualStudio.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "VJSharpCodeProvider", $.String, "VJSharpCodeProvider, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "ASPBrowserCapsPublicKey", $.String, "b7bd7678b977bd8f");

    $.Constant({Static:true , Public:false}, "ASPBrowserCapsFactory", $.String, "ASP.BrowserCapsFactory, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b7bd7678b977bd8f");

    $.Constant({Static:true , Public:false}, "MicrosoftVSDesigner", $.String, "Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWeb", $.String, "Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftWebDesign", $.String, "Microsoft.Web.Design.Client, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVSDesignerMobile", $.String, "Microsoft.VSDesigner.Mobile, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftJScript", $.String, "Microsoft.JScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System");
/* class System.SR */ 

(function SR$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Constant({Static:true , Public:false}, "Argument_InvalidNumberStyles", $.String, "Argument_InvalidNumberStyles");

    $.Constant({Static:true , Public:false}, "Argument_InvalidHexStyle", $.String, "Argument_InvalidHexStyle");

    $.Constant({Static:true , Public:false}, "Argument_MustBeBigInt", $.String, "Argument_MustBeBigInt");

    $.Constant({Static:true , Public:false}, "Format_InvalidFormatSpecifier", $.String, "Format_InvalidFormatSpecifier");

    $.Constant({Static:true , Public:false}, "Format_TooLarge", $.String, "Format_TooLarge");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_MustBeNonNeg", $.String, "ArgumentOutOfRange_MustBeNonNeg");

    $.Constant({Static:true , Public:false}, "Overflow_BigIntInfinity", $.String, "Overflow_BigIntInfinity");

    $.Constant({Static:true , Public:false}, "Overflow_NotANumber", $.String, "Overflow_NotANumber");

    $.Constant({Static:true , Public:false}, "Overflow_ParseBigInteger", $.String, "Overflow_ParseBigInteger");

    $.Constant({Static:true , Public:false}, "Overflow_Int32", $.String, "Overflow_Int32");

    $.Constant({Static:true , Public:false}, "Overflow_Int64", $.String, "Overflow_Int64");

    $.Constant({Static:true , Public:false}, "Overflow_UInt32", $.String, "Overflow_UInt32");

    $.Constant({Static:true , Public:false}, "Overflow_UInt64", $.String, "Overflow_UInt64");

    $.Constant({Static:true , Public:false}, "Overflow_Decimal", $.String, "Overflow_Decimal");

    $.Constant({Static:true , Public:false}, "Arg_ArgumentOutOfRangeException", $.String, "Arg_ArgumentOutOfRangeException");

    $.Constant({Static:true , Public:false}, "Arg_ElementsInSourceIsGreaterThanDestination", $.String, "Arg_ElementsInSourceIsGreaterThanDestination");

    $.Constant({Static:true , Public:false}, "Arg_MultiDimArrayNotSupported", $.String, "Arg_MultiDimArrayNotSupported");

    $.Constant({Static:true , Public:false}, "Arg_RegisterLengthOfRangeException", $.String, "Arg_RegisterLengthOfRangeException");

    $.Constant({Static:true , Public:false}, "Arg_NullArgumentNullRef", $.String, "Arg_NullArgumentNullRef");

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm02.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm02.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm02.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Numerics");
/* struct System.Numerics.BigInteger */ 

(function BigInteger$Members () {
  var $, $thisType;











































































































































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Numerics.BigInteger", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.UInt32)
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int64)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.UInt64)
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Double)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Decimal"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.UInt32])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.UInt32]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.UInt32]))
    );

    $.ExternalMethod({Static:true , Public:true }, "Abs", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "AssertValid", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "BitLengthOfUInt", 
      new JSIL.MethodSignature($.Int32, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Int64])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.UInt64])
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DivRem", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Int64])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.UInt64])
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get__Bits", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.UInt32]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get__Sign", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEven", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsOne", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsPowerOfTwo", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsZero", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_MinusOne", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_One", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Sign", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetDiffLength", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("System.Array", [$.UInt32]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetPartsForBitManipulation", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.UInt32])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreatestCommonDivisor", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Length", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.UInt32])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Log", 
      new JSIL.MethodSignature($.Double, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Log", 
      new JSIL.MethodSignature($.Double, [$.Type, $.Double])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Log10", 
      new JSIL.MethodSignature($.Double, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ModPow", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ModPowInner", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.BigIntegerBuilder")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.BigIntegerBuilder")]), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.BigIntegerBuilder")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.BigIntegerBuilder")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModPowInner32", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.BigIntegerBuilder")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.BigIntegerBuilder")]), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.BigIntegerBuilder")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.BigIntegerBuilder")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModPowSquareModValue", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.BigIntegerBuilder")]), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.BigIntegerBuilder")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.BigIntegerBuilder")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModPowUpdateResult", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.BigIntegerBuilder")]), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.BigIntegerBuilder")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.BigIntegerBuilder")]), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.BigIntegerBuilder")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MulLower", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.UInt32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "MulUpper", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.UInt32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_BitwiseAnd", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_BitwiseOr", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Decrement", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Int64])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Int64, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.UInt64])
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.UInt64, $.Type])
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_ExclusiveOr", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$.Double])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("System.Decimal")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Byte, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.SByte, [$.Type])
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Int16, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.UInt16, [$.Type])
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.UInt32, [$.Type])
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Int64, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.UInt64, [$.Type])
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Single, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Double, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Int64])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($.Boolean, [$.Int64, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.UInt64])
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($.Boolean, [$.UInt64, $.Type])
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Int64])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Int64, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.UInt64])
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.UInt64, $.Type])
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Byte])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.SByte])
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Int16])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.UInt16])
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.UInt32])
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Int64])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.UInt64])
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Increment", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Int64])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Int64, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.UInt64])
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.UInt64, $.Type])
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_LeftShift", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Int32])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Int64])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($.Boolean, [$.Int64, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.UInt64])
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($.Boolean, [$.UInt64, $.Type])
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Int64])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Int64, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.UInt64])
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.UInt64, $.Type])
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Modulus", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_OnesComplement", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_RightShift", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Int32])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryPlus", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String, $asm02.TypeRef("System.Globalization.NumberStyles")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String, $asm02.TypeRef("System.IFormatProvider")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm02.TypeRef("System.Globalization.NumberStyles"), 
          $asm02.TypeRef("System.IFormatProvider")
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Pow", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Int32])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Remainder", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetBitsFromDouble", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ToByteArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.IFormatProvider")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm02.TypeRef("System.IFormatProvider")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ToUInt32Array", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.UInt32]))
    );

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm02.TypeRef("System.Globalization.NumberStyles"), 
          $asm02.TypeRef("System.IFormatProvider"), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Constant({Static:true , Public:false}, "knMaskHighBit", $.Int32, -2147483648);

    $.Constant({Static:true , Public:false}, "kuMaskHighBit", $.UInt32, 2147483648);

    $.Constant({Static:true , Public:false}, "kcbitUint", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "kcbitUlong", $.Int32, 64);

    $.Constant({Static:true , Public:false}, "DecimalScaleFactorMask", $.Int32, 16711680);

    $.Constant({Static:true , Public:false}, "DecimalSignMask", $.Int32, -2147483648);

    $.Field({Static:false, Public:false}, "_sign", $.Int32);

    $.Field({Static:false, Public:false}, "_bits", $jsilcore.TypeRef("System.Array", [$.UInt32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_bnMinInt", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_bnOneInt", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_bnZeroInt", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_bnMinusOneInt", $.Type);


    function BigInteger__cctor () {
      $thisType.s_bnMinInt = new $thisType();
      $thisType.s_bnOneInt = new $thisType();
      $thisType.s_bnZeroInt = new $thisType();
      $thisType.s_bnMinusOneInt = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      BigInteger__cctor
    );

    $.Property({Static:true , Public:true }, "Zero", $.Type)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "One", $.Type)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "MinusOne", $.Type)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsPowerOfTwo", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsZero", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsOne", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsEven", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Sign", $.Int32)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false}, "_Sign", $.Int32);

    $.Property({Static:false, Public:false}, "_Bits", $jsilcore.TypeRef("System.Array", [$.UInt32]));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IFormattable"), 
      /* 1 */ $asm02.TypeRef("System.IComparable"), 
      /* 2 */ $asm02.TypeRef("System.IComparable`1", [$.Type]), 
      /* 3 */ $asm02.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* struct System.Numerics.BigIntegerBuilder */ 

(function BigIntegerBuilder$Members () {
  var $, $thisType;





















































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Numerics.BigIntegerBuilder", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Numerics.BigInteger"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Numerics.BigInteger"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Type]))
    );

    $.ExternalMethod({Static:true , Public:false}, "AddCarry", 
      new JSIL.MethodSignature($.UInt32, [
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.UInt32, 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddMulCarry", 
      new JSIL.MethodSignature($.UInt32, [
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.UInt32, 
          $.UInt32, $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ApplyBorrow", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ApplyCarry", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertValid", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:true }, "CbitLowZero", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Div", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:true }, "DivMod", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnsureWritable", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnsureWritable", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "EnsureWritable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "GCD", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CuNonZero", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_High", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetApproxParts", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt64])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHigh2", 
      new JSIL.MethodSignature($.UInt64, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInteger", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Numerics.BigInteger"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIntegerParts", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.UInt32])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "LehmerGcd", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "MakeOdd", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "Mod", 
      new JSIL.MethodSignature($.UInt32, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.UInt32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Mod", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:true }, "ModDiv", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModDivCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Mul", 
      JSIL.MethodSignature.Action($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Mul", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Mul", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:false}, "MulCarry", 
      new JSIL.MethodSignature($.UInt32, [
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.UInt32, 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      JSIL.MethodSignature.Action($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      JSIL.MethodSignature.Action($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSizeClear", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSizeKeep", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSizeLazy", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "ShiftLeft", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "ShiftLeft", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "ShiftRight", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "ShiftRight", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Sub", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.UInt32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Sub", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:false}, "SubBorrow", 
      new JSIL.MethodSignature($.UInt32, [
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.UInt32, 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SubRev", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Type]))
    );

    $.ExternalMethod({Static:true , Public:false}, "SubRevBorrow", 
      new JSIL.MethodSignature($.UInt32, [
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.UInt32, 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Trim", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "kcbitUint", $.Int32, 32);

    $.Field({Static:false, Public:false}, "_iuLast", $.Int32);

    $.Field({Static:false, Public:false}, "_uSmall", $.UInt32);

    $.Field({Static:false, Public:false}, "_rgu", $jsilcore.TypeRef("System.Array", [$.UInt32]));

    $.Field({Static:false, Public:false}, "_fWritable", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "kdblLn2To32", $.Double, (32 * (Math.log(2))));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_rgbInv", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "Size", $.Int32);

    $.Property({Static:false, Public:true }, "High", $.UInt32);

    $.Property({Static:false, Public:false}, "CuNonZero", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Numerics.BigNumber */ 

(function BigNumber$Members () {
  var $, $thisType;









  JSIL.MakeStaticClass("System.Numerics.BigNumber", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "FormatBigInteger", 
      new JSIL.MethodSignature($.String, [
          $asm08.TypeRef("System.Numerics.BigInteger"), $.String, 
          $asm02.TypeRef("System.Globalization.NumberFormatInfo")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "FormatBigIntegerToHexString", 
      new JSIL.MethodSignature($.String, [
          $asm08.TypeRef("System.Numerics.BigInteger"), $.Char, 
          $.Int32, $asm02.TypeRef("System.Globalization.NumberFormatInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "HexNumberToBigInteger", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.BigNumber+BigNumberBuffer")]), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.BigInteger")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "NumberToBigInteger", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.BigNumber+BigNumberBuffer")]), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.BigInteger")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseBigInteger", 
      new JSIL.MethodSignature($asm08.TypeRef("System.Numerics.BigInteger"), [
          $.String, $asm02.TypeRef("System.Globalization.NumberStyles"), 
          $asm02.TypeRef("System.Globalization.NumberFormatInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseFormatSpecifier", 
      new JSIL.MethodSignature($.Char, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParseBigInteger", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm02.TypeRef("System.Globalization.NumberStyles"), 
          $asm02.TypeRef("System.Globalization.NumberFormatInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.BigInteger")])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TryValidateParseStyleInteger", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Globalization.NumberStyles"), $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.ArgumentException")])])
    );

    $.Constant({Static:true , Public:false}, "InvalidNumberStyles", $asm02.TypeRef("System.Globalization.NumberStyles"), -1024);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Numerics.BigNumber+BigNumberBuffer */ 

(function BigNumberBuffer$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Numerics.BigNumber+BigNumberBuffer", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Field({Static:false, Public:true }, "digits", $asm02.TypeRef("System.Text.StringBuilder"));

    $.Field({Static:false, Public:true }, "precision", $.Int32);

    $.Field({Static:false, Public:true }, "scale", $.Int32);

    $.Field({Static:false, Public:true }, "sign", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Numerics.DoubleUlong */ 

(function DoubleUlong$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Numerics.DoubleUlong", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true , Offset: 0}, "dbl", $.Double);

    $.Field({Static:false, Public:true , Offset: 0}, "uu", $.UInt64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Numerics.NumericsHelpers */ 

(function NumericsHelpers$Members () {
  var $, $thisType;

















  JSIL.MakeStaticClass("System.Numerics.NumericsHelpers", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Abs", 
      new JSIL.MethodSignature($.UInt32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "CbitHighZero", 
      new JSIL.MethodSignature($.Int32, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "CbitHighZero", 
      new JSIL.MethodSignature($.Int32, [$.UInt64])
    );

    $.ExternalMethod({Static:true , Public:true }, "CbitLowZero", 
      new JSIL.MethodSignature($.Int32, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "CombineHash", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32, $.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "CombineHash", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "DangerousMakeTwosComplement", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.UInt32]), [$jsilcore.TypeRef("System.Array", [$.UInt32])])
    );

    $.ExternalMethod({Static:true , Public:true }, "GCD", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32, $.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "GCD", 
      new JSIL.MethodSignature($.UInt64, [$.UInt64, $.UInt64])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDoubleFromParts", 
      new JSIL.MethodSignature($.Double, [
          $.Int32, $.Int32, 
          $.UInt64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDoubleParts", 
      new JSIL.MethodSignature(null, [
          $.Double, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt64]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetHi", 
      new JSIL.MethodSignature($.UInt32, [$.UInt64])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetLo", 
      new JSIL.MethodSignature($.UInt32, [$.UInt64])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeUlong", 
      new JSIL.MethodSignature($.UInt64, [$.UInt32, $.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "resize", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.UInt32]), [$jsilcore.TypeRef("System.Array", [$.UInt32]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Swap", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", ["!!0"]), $jsilcore.TypeRef("JSIL.Reference", ["!!0"])], ["T"])
    );

    $.Constant({Static:true , Public:false}, "kcbitUint", $.Int32, 32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Numerics.Complex */ 

(function Complex$Members () {
  var $, $thisType;


























































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Numerics.Complex", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Double, $.Double])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Abs", 
      new JSIL.MethodSignature($.Double, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Acos", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Asin", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Atan", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Conjugate", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Cos", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Cosh", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Exp", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FromPolarCoordinates", 
      new JSIL.MethodSignature($.Type, [$.Double, $.Double])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Imaginary", 
      JSIL.MethodSignature.Return($.Double)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Magnitude", 
      JSIL.MethodSignature.Return($.Double)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Phase", 
      JSIL.MethodSignature.Return($.Double)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Real", 
      JSIL.MethodSignature.Return($.Double)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Log", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Log", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Double])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Log10", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm08.TypeRef("System.Numerics.BigInteger")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("System.Decimal")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Int16])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Int64])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.UInt16])
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.UInt32])
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.UInt64])
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.SByte])
    )
      .Attribute($asm02.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Byte])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Double])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Pow", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Pow", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Double])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Reciprocal", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Scale", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "Sin", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sinh", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sqrt", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Tan", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Tanh", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.IFormatProvider")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm02.TypeRef("System.IFormatProvider")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "m_real", $.Double);

    $.Field({Static:false, Public:false}, "m_imaginary", $.Double);

    $.Constant({Static:true , Public:false}, "LOG_10_INV", $.Double, 0.43429448190325);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Zero", $.Type)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "One", $.Type)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "ImaginaryOne", $.Type)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));


    function Complex__cctor () {
      $thisType.Zero = new $thisType();
      $thisType.One = new $thisType();
      $thisType.ImaginaryOne = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Complex__cctor
    );

    $.Property({Static:false, Public:true }, "Real", $.Double)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Imaginary", $.Double)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Magnitude", $.Double)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Phase", $.Double)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 1 */ $asm02.TypeRef("System.IFormattable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Numerics.HashCodeHelper */ 

(function HashCodeHelper$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Numerics.HashCodeHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CombineHashCodes", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Numerics.JitIntrinsicAttribute */ 

(function JitIntrinsicAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Attribute"), 
      Name: "System.Numerics.JitIntrinsicAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.$Flags("Constructor", "Method", "Property")]; });

})();

/* struct System.Numerics.Matrix3x2 */ 

(function Matrix3x2$Members () {
  var $, $thisType;





































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Numerics.Matrix3x2", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 6, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateRotation", 
      new JSIL.MethodSignature($.Type, [$.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateRotation", 
      new JSIL.MethodSignature($.Type, [$.Single, $asm08.TypeRef("System.Numerics.Vector2")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature($.Type, [$.Single, $.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $asm08.TypeRef("System.Numerics.Vector2")
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature($.Type, [$asm08.TypeRef("System.Numerics.Vector2")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature($.Type, [$asm08.TypeRef("System.Numerics.Vector2"), $asm08.TypeRef("System.Numerics.Vector2")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature($.Type, [$.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature($.Type, [$.Single, $asm08.TypeRef("System.Numerics.Vector2")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateSkew", 
      new JSIL.MethodSignature($.Type, [$.Single, $.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateSkew", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $asm08.TypeRef("System.Numerics.Vector2")
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateTranslation", 
      new JSIL.MethodSignature($.Type, [$asm08.TypeRef("System.Numerics.Vector2")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateTranslation", 
      new JSIL.MethodSignature($.Type, [$.Single, $.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_Identity", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsIdentity", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Translation", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Numerics.Vector2"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetDeterminant", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Invert", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Translation", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Numerics.Vector2"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "M11", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "M12", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "M21", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "M22", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "M31", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "M32", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_identity", $.Type);


    function Matrix3x2__cctor () {
      $thisType._identity = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Matrix3x2__cctor
    );

    $.Property({Static:true , Public:true }, "Identity", $.Type)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsIdentity", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Translation", $asm08.TypeRef("System.Numerics.Vector2"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* struct System.Numerics.Matrix4x4 */ 

(function Matrix4x4$Members () {
  var $, $thisType;

























































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Numerics.Matrix4x4", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 16, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Numerics.Matrix3x2"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateBillboard", 
      new JSIL.MethodSignature($.Type, [
          $asm08.TypeRef("System.Numerics.Vector3"), $asm08.TypeRef("System.Numerics.Vector3"), 
          $asm08.TypeRef("System.Numerics.Vector3"), $asm08.TypeRef("System.Numerics.Vector3")
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateConstrainedBillboard", 
      new JSIL.MethodSignature($.Type, [
          $asm08.TypeRef("System.Numerics.Vector3"), $asm08.TypeRef("System.Numerics.Vector3"), 
          $asm08.TypeRef("System.Numerics.Vector3"), $asm08.TypeRef("System.Numerics.Vector3"), 
          $asm08.TypeRef("System.Numerics.Vector3")
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateFromAxisAngle", 
      new JSIL.MethodSignature($.Type, [$asm08.TypeRef("System.Numerics.Vector3"), $.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateFromQuaternion", 
      new JSIL.MethodSignature($.Type, [$asm08.TypeRef("System.Numerics.Quaternion")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateFromYawPitchRoll", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateLookAt", 
      new JSIL.MethodSignature($.Type, [
          $asm08.TypeRef("System.Numerics.Vector3"), $asm08.TypeRef("System.Numerics.Vector3"), 
          $asm08.TypeRef("System.Numerics.Vector3")
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateOrthographic", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateOrthographicOffCenter", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreatePerspective", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreatePerspectiveFieldOfView", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreatePerspectiveOffCenter", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateReflection", 
      new JSIL.MethodSignature($.Type, [$asm08.TypeRef("System.Numerics.Plane")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateRotationX", 
      new JSIL.MethodSignature($.Type, [$.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateRotationX", 
      new JSIL.MethodSignature($.Type, [$.Single, $asm08.TypeRef("System.Numerics.Vector3")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateRotationY", 
      new JSIL.MethodSignature($.Type, [$.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateRotationY", 
      new JSIL.MethodSignature($.Type, [$.Single, $asm08.TypeRef("System.Numerics.Vector3")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateRotationZ", 
      new JSIL.MethodSignature($.Type, [$.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateRotationZ", 
      new JSIL.MethodSignature($.Type, [$.Single, $asm08.TypeRef("System.Numerics.Vector3")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single, $asm08.TypeRef("System.Numerics.Vector3")
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature($.Type, [$asm08.TypeRef("System.Numerics.Vector3")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature($.Type, [$asm08.TypeRef("System.Numerics.Vector3"), $asm08.TypeRef("System.Numerics.Vector3")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature($.Type, [$.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature($.Type, [$.Single, $asm08.TypeRef("System.Numerics.Vector3")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateShadow", 
      new JSIL.MethodSignature($.Type, [$asm08.TypeRef("System.Numerics.Vector3"), $asm08.TypeRef("System.Numerics.Plane")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateTranslation", 
      new JSIL.MethodSignature($.Type, [$asm08.TypeRef("System.Numerics.Vector3")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateTranslation", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateWorld", 
      new JSIL.MethodSignature($.Type, [
          $asm08.TypeRef("System.Numerics.Vector3"), $asm08.TypeRef("System.Numerics.Vector3"), 
          $asm08.TypeRef("System.Numerics.Vector3")
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Decompose", 
      new JSIL.MethodSignature($.Boolean, [
          $.Type, $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.Vector3")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.Quaternion")]), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.Vector3")])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_Identity", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsIdentity", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Translation", 
      JSIL.MethodSignature.Return($asm08.TypeRef("System.Numerics.Vector3"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetDeterminant", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Invert", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Translation", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Numerics.Vector3"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm08.TypeRef("System.Numerics.Quaternion")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Transpose", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "M11", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "M12", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "M13", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "M14", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "M21", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "M22", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "M23", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "M24", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "M31", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "M32", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "M33", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "M34", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "M41", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "M42", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "M43", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "M44", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_identity", $.Type);


    function Matrix4x4__cctor () {
      $thisType._identity = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Matrix4x4__cctor
    );

    $.Property({Static:true , Public:true }, "Identity", $.Type)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsIdentity", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Translation", $asm08.TypeRef("System.Numerics.Vector3"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* struct System.Numerics.Matrix4x4+CanonicalBasis */ 

(function CanonicalBasis$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Numerics.Matrix4x4+CanonicalBasis", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Row0", $asm08.TypeRef("System.Numerics.Vector3"));

    $.Field({Static:false, Public:true }, "Row1", $asm08.TypeRef("System.Numerics.Vector3"));

    $.Field({Static:false, Public:true }, "Row2", $asm08.TypeRef("System.Numerics.Vector3"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Numerics.Matrix4x4+VectorBasis */ 

(function VectorBasis$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Numerics.Matrix4x4+VectorBasis", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Element0", $jsilcore.TypeRef("JSIL.Pointer", [$asm08.TypeRef("System.Numerics.Vector3")]));

    $.Field({Static:false, Public:true }, "Element1", $jsilcore.TypeRef("JSIL.Pointer", [$asm08.TypeRef("System.Numerics.Vector3")]));

    $.Field({Static:false, Public:true }, "Element2", $jsilcore.TypeRef("JSIL.Pointer", [$asm08.TypeRef("System.Numerics.Vector3")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

})();

/* struct System.Numerics.Plane */ 

(function Plane$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Numerics.Plane", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Numerics.Vector3"), $.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("System.Numerics.Vector4"))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateFromVertices", 
      new JSIL.MethodSignature($.Type, [
          $asm08.TypeRef("System.Numerics.Vector3"), $asm08.TypeRef("System.Numerics.Vector3"), 
          $asm08.TypeRef("System.Numerics.Vector3")
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Dot", 
      new JSIL.MethodSignature($.Single, [$.Type, $asm08.TypeRef("System.Numerics.Vector4")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DotCoordinate", 
      new JSIL.MethodSignature($.Single, [$.Type, $asm08.TypeRef("System.Numerics.Vector3")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DotNormal", 
      new JSIL.MethodSignature($.Single, [$.Type, $asm08.TypeRef("System.Numerics.Vector3")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm08.TypeRef("System.Numerics.Matrix4x4")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm08.TypeRef("System.Numerics.Quaternion")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "Normal", $asm08.TypeRef("System.Numerics.Vector3"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "D", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* struct System.Numerics.Quaternion */ 

(function Quaternion$Members () {
  var $, $thisType;



































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Numerics.Quaternion", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Numerics.Vector3"), $.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Concatenate", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Conjugate", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateFromAxisAngle", 
      new JSIL.MethodSignature($.Type, [$asm08.TypeRef("System.Numerics.Vector3"), $.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateFromRotationMatrix", 
      new JSIL.MethodSignature($.Type, [$asm08.TypeRef("System.Numerics.Matrix4x4")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateFromYawPitchRoll", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Dot", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_Identity", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsIdentity", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Inverse", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Length", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "LengthSquared", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Slerp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "X", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "Y", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "Z", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "W", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "Identity", $.Type)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsIdentity", $.Boolean)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* struct System.Numerics.Vector2 */ 

(function Vector2$Members () {
  var $, $thisType;



















































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Numerics.Vector2", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single, $.Single])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Abs", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Clamp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Single]))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Single]), $.Int32])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Distance", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DistanceSquared", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Dot", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_One", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_UnitX", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_UnitY", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Length", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "LengthSquared", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Single, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Single, $.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Reflect", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SquareRoot", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm02.TypeRef("System.IFormatProvider")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm08.TypeRef("System.Numerics.Matrix3x2")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm08.TypeRef("System.Numerics.Matrix4x4")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm08.TypeRef("System.Numerics.Quaternion")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TransformNormal", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm08.TypeRef("System.Numerics.Matrix3x2")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TransformNormal", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm08.TypeRef("System.Numerics.Matrix4x4")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "X", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "Y", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "Zero", $.Type)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "One", $.Type)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "UnitX", $.Type)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "UnitY", $.Type)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 1 */ $asm02.TypeRef("System.IFormattable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* struct System.Numerics.Vector3 */ 

(function Vector3$Members () {
  var $, $thisType;




















































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Numerics.Vector3", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Numerics.Vector2"), $.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single
        ])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Abs", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Clamp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Single]))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Single]), $.Int32])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Cross", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Distance", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DistanceSquared", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Dot", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_One", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_UnitX", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_UnitY", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_UnitZ", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Length", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "LengthSquared", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Single, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Single, $.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Reflect", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SquareRoot", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm02.TypeRef("System.IFormatProvider")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm08.TypeRef("System.Numerics.Matrix4x4")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm08.TypeRef("System.Numerics.Quaternion")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TransformNormal", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm08.TypeRef("System.Numerics.Matrix4x4")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "X", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "Y", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "Z", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "Zero", $.Type)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "One", $.Type)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "UnitX", $.Type)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "UnitY", $.Type)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "UnitZ", $.Type)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 1 */ $asm02.TypeRef("System.IFormattable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* struct System.Numerics.Vector4 */ 

(function Vector4$Members () {
  var $, $thisType;























































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Numerics.Vector4", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("System.Numerics.Vector2"), $.Single, 
          $.Single
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("System.Numerics.Vector3"), $.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Abs", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Clamp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Single]))
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Single]), $.Int32])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Distance", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DistanceSquared", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Dot", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_One", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_UnitW", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_UnitX", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_UnitY", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_UnitZ", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Length", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "LengthSquared", 
      JSIL.MethodSignature.Return($.Single)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Single, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Single, $.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SquareRoot", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"))
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm02.TypeRef("System.IFormatProvider")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$asm08.TypeRef("System.Numerics.Vector2"), $asm08.TypeRef("System.Numerics.Matrix4x4")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$asm08.TypeRef("System.Numerics.Vector3"), $asm08.TypeRef("System.Numerics.Matrix4x4")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm08.TypeRef("System.Numerics.Matrix4x4")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$asm08.TypeRef("System.Numerics.Vector2"), $asm08.TypeRef("System.Numerics.Quaternion")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$asm08.TypeRef("System.Numerics.Vector3"), $asm08.TypeRef("System.Numerics.Quaternion")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm08.TypeRef("System.Numerics.Quaternion")])
    )
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "X", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "Y", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "Z", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "W", $.Single)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "Zero", $.Type)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "One", $.Type)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "UnitX", $.Type)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "UnitY", $.Type)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "UnitZ", $.Type)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "UnitW", $.Type)
      .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 1 */ $asm02.TypeRef("System.IFormattable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Numerics.Vector */ 

(function Vector$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Numerics.Vector", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_IsHardwareAccelerated", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:true , Public:true }, "IsHardwareAccelerated", $.Boolean)
      .Attribute($asm08.TypeRef("System.Numerics.JitIntrinsicAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class <PrivateImplementationDetails> */ 

(function $lPrivateImplementationDetails$g$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "<PrivateImplementationDetails>", 
      IsPublic: false, 
      IsReferenceType: true, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class __DynamicallyInvokableAttribute */ 

(function __DynamicallyInvokableAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Attribute"), 
      Name: "__DynamicallyInvokableAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.All]; });

})();

