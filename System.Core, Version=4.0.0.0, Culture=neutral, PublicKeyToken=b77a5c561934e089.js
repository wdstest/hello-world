/* Generated by JSIL v0.8.2 build 30533. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm07 = JSIL.DeclareAssembly("System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

/* class Interop */ 

(function Interop$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("Interop", false, [], function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Interop+Libraries */ 

(function Libraries$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("Interop+Libraries", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "NCrypt", $.String, "ncrypt.dll");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Interop+NCrypt */ 

(function NCrypt$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Interop+NCrypt", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "NCryptDecrypt", 
      new JSIL.MethodSignature($asm07.TypeRef("Interop+NCrypt+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Void")]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm07.TypeRef("Interop+NCrypt+AsymmetricPaddingMode")
        ]), 
      {
        Module: "ncrypt.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "NCryptEncrypt", 
      new JSIL.MethodSignature($asm07.TypeRef("Interop+NCrypt+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Void")]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm07.TypeRef("Interop+NCrypt+AsymmetricPaddingMode")
        ]), 
      {
        Module: "ncrypt.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Constant({Static:true , Public:false}, "NCRYPT_3DES_ALGORITHM", $.String, "3DES");

    $.Constant({Static:true , Public:false}, "NCRYPT_AES_ALGORITHM", $.String, "AES");

    $.Constant({Static:true , Public:false}, "NCRYPT_CIPHER_KEY_BLOB", $.String, "CipherKeyBlob");

    $.Constant({Static:true , Public:false}, "NCRYPT_CIPHER_KEY_BLOB_MAGIC", $.Int32, 1380470851);

    $.Constant({Static:true , Public:false}, "NCRYPT_CHAINING_MODE_PROPERTY", $.String, "Chaining Mode");

    $.Constant({Static:true , Public:false}, "NCRYPT_INITIALIZATION_VECTOR", $.String, "IV");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Interop+NCrypt+ErrorCode */ 

JSIL.MakeEnum(
  {
    FullName: "Interop+NCrypt+ErrorCode", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    E_FAIL: -2147467259, 
    NTE_BAD_SIGNATURE: -2146893818, 
    NTE_NOT_FOUND: -2146893807, 
    NTE_BAD_KEYSET: -2146893802, 
    NTE_INVALID_PARAMETER: -2146893785, 
    NTE_BUFFER_TOO_SMALL: -2146893784, 
    NTE_NO_MORE_ITEMS: -2146893782, 
    ERROR_SUCCESS: 0, 
  }
);

/* enum Interop+NCrypt+AsymmetricPaddingMode */ 

JSIL.MakeEnum(
  {
    FullName: "Interop+NCrypt+AsymmetricPaddingMode", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    NCRYPT_NO_PADDING_FLAG: 1, 
    NCRYPT_PAD_PKCS1_FLAG: 2, 
    NCRYPT_PAD_OAEP_FLAG: 4, 
    NCRYPT_PAD_PSS_FLAG: 8, 
  }
);

/* class Interop+BCrypt */ 

(function BCrypt$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "Interop+BCrypt", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "BCRYPT_CHAIN_MODE_CBC", $.String, "ChainingModeCBC");

    $.Constant({Static:true , Public:false}, "BCRYPT_CHAIN_MODE_ECB", $.String, "ChainingModeECB");

    $.Constant({Static:true , Public:false}, "BCRYPT_KEY_DATA_BLOB_MAGIC", $.Int32, 1296188491);

    $.Constant({Static:true , Public:false}, "BCRYPT_KEY_DATA_BLOB_VERSION1", $.Int32, 1);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class FXAssembly */ 

(function FXAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("FXAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Version", $.String, "4.0.0.0");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ThisAssembly */ 

(function ThisAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("ThisAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Title", $.String, "System.Core.dll");

    $.Constant({Static:true , Public:false}, "Description", $.String, "System.Core.dll");

    $.Constant({Static:true , Public:false}, "DefaultAlias", $.String, "System.Core.dll");

    $.Constant({Static:true , Public:false}, "Copyright", $.String, "\xa9 Microsoft Corporation.  All rights reserved.");

    $.Constant({Static:true , Public:false}, "Version", $.String, "4.0.0.0");

    $.Constant({Static:true , Public:false}, "InformationalVersion", $.String, "4.6.1590.0");

    $.Constant({Static:true , Public:false}, "DailyBuildNumberStr", $.String, "30319");

    $.Constant({Static:true , Public:false}, "BuildRevisionStr", $.String, "0");

    $.Constant({Static:true , Public:false}, "DailyBuildNumber", $.Int32, 30319);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class AssemblyRef */ 

(function AssemblyRef$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("AssemblyRef", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "EcmaPublicKey", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "EcmaPublicKeyToken", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "EcmaPublicKeyFull", $.String, "00000000000000000400000000000000");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKey", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyToken", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyFull", $.String, "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKey", $.String, "7cec85d7bea7798e");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyToken", $.String, "7cec85d7bea7798e");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyFull", $.String, "00240000048000009400000006020000002400005253413100040000010001008D56C76F9E8649383049F383C44BE0EC204181822A6C31CF5EB7EF486944D032188EA1D3920763712CCB12D75FB77E9811149E6148E5D32FBAAB37611C1878DDC19E20EF135D0CB2CFF2BFEC3D115810C3D9069638FE4BE215DBF795861920E5AB6F7DB2E2CEEF136AC23D5DD2BF031700AEC232F6C6B1C785B4305C123B37AB");

    $.Constant({Static:true , Public:false}, "PlatformPublicKey", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "PlatformPublicKeyToken", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "PlatformPublicKeyFull", $.String, "00000000000000000400000000000000");

    $.Constant({Static:true , Public:false}, "Mscorlib", $.String, "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemData", $.String, "System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemDataOracleClient", $.String, "System.Data.OracleClient, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "System", $.String, "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemCore", $.String, "System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemNumerics", $.String, "System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemRuntimeRemoting", $.String, "System.Runtime.Remoting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemThreadingTasksDataflow", $.String, "System.Threading.Tasks.Dataflow, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemWindowsForms", $.String, "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemXml", $.String, "System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKey", $.String, "b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyToken", $.String, "b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyFull", $.String, "002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKey", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyToken", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyFull", $.String, "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9");

    $.Constant({Static:true , Public:false}, "SystemComponentModelDataAnnotations", $.String, "System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemConfiguration", $.String, "System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemConfigurationInstall", $.String, "System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDeployment", $.String, "System.Deployment, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDesign", $.String, "System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDirectoryServices", $.String, "System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDrawingDesign", $.String, "System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDrawing", $.String, "System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemEnterpriseServices", $.String, "System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemManagement", $.String, "System.Management, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemMessaging", $.String, "System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemNetHttp", $.String, "System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemNetHttpWebRequest", $.String, "System.Net.Http.WebRequest, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemRuntimeSerializationFormattersSoap", $.String, "System.Runtime.Serialization.Formatters.Soap, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemRuntimeWindowsRuntime", $.String, "System.Runtime.WindowsRuntime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemRuntimeWindowsRuntimeUIXaml", $.String, "System.Runtime.WindowsRuntimeUIXaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemSecurity", $.String, "System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemServiceModelWeb", $.String, "System.ServiceModel.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemServiceProcess", $.String, "System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWeb", $.String, "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebAbstractions", $.String, "System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebDynamicData", $.String, "System.Web.DynamicData, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebDynamicDataDesign", $.String, "System.Web.DynamicData.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebEntityDesign", $.String, "System.Web.Entity.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemWebExtensions", $.String, "System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebExtensionsDesign", $.String, "System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebMobile", $.String, "System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebRegularExpressions", $.String, "System.Web.RegularExpressions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebRouting", $.String, "System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebServices", $.String, "System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "WindowsBase", $.String, "WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudio", $.String, "Microsoft.VisualStudio, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWindowsForms", $.String, "Microsoft.VisualStudio.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "VJSharpCodeProvider", $.String, "VJSharpCodeProvider, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "ASPBrowserCapsPublicKey", $.String, "b7bd7678b977bd8f");

    $.Constant({Static:true , Public:false}, "ASPBrowserCapsFactory", $.String, "ASP.BrowserCapsFactory, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b7bd7678b977bd8f");

    $.Constant({Static:true , Public:false}, "MicrosoftVSDesigner", $.String, "Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWeb", $.String, "Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftWebDesign", $.String, "Microsoft.Web.Design.Client, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVSDesignerMobile", $.String, "Microsoft.VSDesigner.Mobile, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftJScript", $.String, "Microsoft.JScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Internal");
JSIL.DeclareNamespace("Internal.Cryptography");
/* class Internal.Cryptography.Helpers */ 

(function Helpers$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("Internal.Cryptography.Helpers", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "BitSizeToByteSize", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CloneByteArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GenerateRandom", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsLegalSize", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Security.Cryptography.KeySizes")])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToCryptographicException", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.CryptographicException"), [$asm07.TypeRef("Interop+NCrypt+ErrorCode")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* interface Internal.Cryptography.ICngSymmetricAlgorithm */ 

JSIL.MakeInterface(
  "Internal.Cryptography.ICngSymmetricAlgorithm", false, [], function ($) {
    $.Method({}, "get_BlockSize", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_Mode", JSIL.MethodSignature.Return($asm02.TypeRef("System.Security.Cryptography.CipherMode")));
    $.Method({}, "get_Padding", JSIL.MethodSignature.Return($asm02.TypeRef("System.Security.Cryptography.PaddingMode")));
    $.Method({}, "get_IV", JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte])));
    $.Method({}, "set_IV", JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte])));
    $.Method({}, "get_LegalKeySizes", JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Security.Cryptography.KeySizes")])));
    $.Method({}, "get_BaseKey", JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte])));
    $.Method({}, "set_BaseKey", JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte])));
    $.Method({}, "get_BaseKeySize", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "set_BaseKeySize", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "IsWeakKey", new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte])]));
    $.Property({}, "BlockSize");
    $.Property({}, "Mode");
    $.Property({}, "Padding");
    $.Property({}, "IV");
    $.Property({}, "LegalKeySizes");
    $.Property({}, "BaseKey");
    $.Property({}, "BaseKeySize");
  }, []);

/* class Internal.Cryptography.SymmetricImportExportExtensions */ 

(function SymmetricImportExportExtensions$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Internal.Cryptography.SymmetricImportExportExtensions", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "GetSymmetricKeyDataIfExportable", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.CngKey"), $.String])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToCngKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.CngKey"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.String])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Constant({Static:true , Public:false}, "SizeOf_NCRYPT_KEY_BLOB_HEADER_SIZE", $.Int32, 16);

    $.Constant({Static:true , Public:false}, "SizeOf_BCRYPT_KEY_DATA_BLOB_HEADER", $.Int32, 12);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_cipherKeyBlobFormat", $asm07.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class Internal.Cryptography.KeyPropertyName */ 

(function KeyPropertyName$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("Internal.Cryptography.KeyPropertyName", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Algorithm", $.String, "Algorithm Name");

    $.Constant({Static:true , Public:false}, "AlgorithmGroup", $.String, "Algorithm Group");

    $.Constant({Static:true , Public:false}, "ExportPolicy", $.String, "Export Policy");

    $.Constant({Static:true , Public:false}, "KeyType", $.String, "Key Type");

    $.Constant({Static:true , Public:false}, "KeyUsage", $.String, "Key Usage");

    $.Constant({Static:true , Public:false}, "Length", $.String, "Length");

    $.Constant({Static:true , Public:false}, "Name", $.String, "Name");

    $.Constant({Static:true , Public:false}, "ParentWindowHandle", $.String, "HWND Handle");

    $.Constant({Static:true , Public:false}, "ProviderHandle", $.String, "Provider Handle");

    $.Constant({Static:true , Public:false}, "UIPolicy", $.String, "UI Policy");

    $.Constant({Static:true , Public:false}, "UniqueName", $.String, "Unique Name");

    $.Constant({Static:true , Public:false}, "UseContext", $.String, "Use Context");

    $.Constant({Static:true , Public:false}, "ClrIsEphemeral", $.String, "CLR IsEphemeral");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Internal.Cryptography.CryptoThrowHelper */ 

(function CryptoThrowHelper$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Internal.Cryptography.CryptoThrowHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "ToCryptographicException", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.CryptographicException"), [$.Int32])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class Internal.Cryptography.BasicSymmetricCipher */ 

(function BasicSymmetricCipher$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm02.System.Byte))) ();
  };




  function BasicSymmetricCipher_get_BlockSizeInBytes () {
    return this.BasicSymmetricCipher$BlockSizeInBytes$value;
  }; 

  function BasicSymmetricCipher_get_IV () {
    return this.BasicSymmetricCipher$IV$value;
  }; 

  function BasicSymmetricCipher_set_BlockSizeInBytes (value) {
    this.BasicSymmetricCipher$BlockSizeInBytes$value = (value | 0);
  }; 

  function BasicSymmetricCipher_set_IV (value) {
    this.BasicSymmetricCipher$IV$value = value;
  }; 



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "Internal.Cryptography.BasicSymmetricCipher", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true }, "get_BlockSizeInBytes", 
      JSIL.MethodSignature.Return($.Int32), 
      BasicSymmetricCipher_get_BlockSizeInBytes
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_IV", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte])), 
      BasicSymmetricCipher_get_IV
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_BlockSizeInBytes", 
      JSIL.MethodSignature.Action($.Int32), 
      BasicSymmetricCipher_set_BlockSizeInBytes
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IV", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte])), 
      BasicSymmetricCipher_set_IV
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Transform", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TransformFinal", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "BasicSymmetricCipher$BlockSizeInBytes$value", $.Int32)
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "BasicSymmetricCipher$IV$value", $jsilcore.TypeRef("System.Array", [$.Byte]))
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "BlockSizeInBytes", $.Int32);

    $.Property({Static:false, Public:false}, "IV", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Internal.Cryptography.UniversalCryptoTransform */ 

(function UniversalCryptoTransform$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.Internal.Cryptography.BasicSymmetricCipher)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.System.Security.Cryptography.PaddingMode)) ();
  };






  function UniversalCryptoTransform_get_BasicSymmetricCipher () {
    return this.UniversalCryptoTransform$BasicSymmetricCipher$value;
  }; 





  function UniversalCryptoTransform_get_PaddingMode () {
    return this.UniversalCryptoTransform$PaddingMode$value;
  }; 

  function UniversalCryptoTransform_set_BasicSymmetricCipher (value) {
    this.UniversalCryptoTransform$BasicSymmetricCipher$value = value;
  }; 

  function UniversalCryptoTransform_set_PaddingMode (value) {
    this.UniversalCryptoTransform$PaddingMode$value = value;
  }; 





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "Internal.Cryptography.UniversalCryptoTransform", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Security.Cryptography.PaddingMode"), $asm07.TypeRef("Internal.Cryptography.BasicSymmetricCipher")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"), [
          $asm02.TypeRef("System.Security.Cryptography.PaddingMode"), $asm07.TypeRef("Internal.Cryptography.BasicSymmetricCipher"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Method({Static:false, Public:false}, "get_BasicSymmetricCipher", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Internal.Cryptography.BasicSymmetricCipher")), 
      UniversalCryptoTransform_get_BasicSymmetricCipher
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReuseTransform", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTransformMultipleBlocks", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InputBlockSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OutputBlockSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Method({Static:false, Public:false}, "get_PaddingMode", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Security.Cryptography.PaddingMode")), 
      UniversalCryptoTransform_get_PaddingMode
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_BasicSymmetricCipher", 
      JSIL.MethodSignature.Action($asm07.TypeRef("Internal.Cryptography.BasicSymmetricCipher")), 
      UniversalCryptoTransform_set_BasicSymmetricCipher
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_PaddingMode", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Security.Cryptography.PaddingMode")), 
      UniversalCryptoTransform_set_PaddingMode
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TransformBlock", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TransformFinalBlock", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UncheckedTransformBlock", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UncheckedTransformFinalBlock", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "UniversalCryptoTransform$PaddingMode$value", $asm02.TypeRef("System.Security.Cryptography.PaddingMode"))
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "UniversalCryptoTransform$BasicSymmetricCipher$value", $asm07.TypeRef("Internal.Cryptography.BasicSymmetricCipher"))
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReuseTransform", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTransformMultipleBlocks", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "InputBlockSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "OutputBlockSize", $.Int32);

    $.Property({Static:false, Public:false}, "PaddingMode", $asm02.TypeRef("System.Security.Cryptography.PaddingMode"));

    $.Property({Static:false, Public:false}, "BasicSymmetricCipher", $asm07.TypeRef("Internal.Cryptography.BasicSymmetricCipher"));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"), 
      /* 1 */ $asm02.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Internal.Cryptography.UniversalCryptoDecryptor */ 

(function UniversalCryptoDecryptor$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Internal.Cryptography.UniversalCryptoTransform"), 
      Name: "Internal.Cryptography.UniversalCryptoDecryptor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Security.Cryptography.PaddingMode"), $asm07.TypeRef("Internal.Cryptography.BasicSymmetricCipher")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DepadBlock", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DepaddingRequired", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UncheckedTransformBlock", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UncheckedTransformFinalBlock", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "_heldoverCipher", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "DepaddingRequired", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Internal.Cryptography.UniversalCryptoEncryptor */ 

(function UniversalCryptoEncryptor$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Internal.Cryptography.UniversalCryptoTransform"), 
      Name: "Internal.Cryptography.UniversalCryptoEncryptor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Security.Cryptography.PaddingMode"), $asm07.TypeRef("Internal.Cryptography.BasicSymmetricCipher")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PadBlock", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UncheckedTransformBlock", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UncheckedTransformFinalBlock", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Internal.Cryptography.BasicSymmetricCipherCng */ 

(function BasicSymmetricCipherCng$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Internal.Cryptography.BasicSymmetricCipher"), 
      Name: "Internal.Cryptography.BasicSymmetricCipherCng", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Func`1", [$asm07.TypeRef("System.Security.Cryptography.CngKey")]), $asm02.TypeRef("System.Security.Cryptography.CipherMode"), 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateCngPropertyForCipherMode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.CngProperty"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Transform", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TransformFinal", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "_cngKey", $asm07.TypeRef("System.Security.Cryptography.CngKey"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_encrypting", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_ECBMode", $asm07.TypeRef("System.Security.Cryptography.CngProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_CBCMode", $asm07.TypeRef("System.Security.Cryptography.CngProperty"));


    function BasicSymmetricCipherCng__cctor () {
      $thisType.s_ECBMode = new $asm07.System.Security.Cryptography.CngProperty();
      $thisType.s_CBCMode = new $asm07.System.Security.Cryptography.CngProperty();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      BasicSymmetricCipherCng__cctor
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Internal.Cryptography.CngSymmetricAlgorithmCore */ 

(function CngSymmetricAlgorithmCore$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "Internal.Cryptography.CngSymmetricAlgorithmCore", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 5, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("Internal.Cryptography.ICngSymmetricAlgorithm")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("Internal.Cryptography.ICngSymmetricAlgorithm"), 
          $.String, $asm07.TypeRef("System.Security.Cryptography.CngProvider"), 
          $asm07.TypeRef("System.Security.Cryptography.CngKeyOpenOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateCryptoTransform", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateCryptoTransform", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateCryptoTransformCore", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"), [
          $asm02.TypeRef("System.Func`1", [$asm07.TypeRef("System.Security.Cryptography.CngKey")]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateDecryptor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateDecryptor", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateEncryptor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateEncryptor", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true }, "GenerateIV", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GenerateKey", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KeyInPlainText", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetKeyIfExportable", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ProduceCngKey", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.CngKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetKey", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetKeySize", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("Internal.Cryptography.ICngSymmetricAlgorithm")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_algorithm", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_outer", $asm07.TypeRef("Internal.Cryptography.ICngSymmetricAlgorithm"));

    $.Field({Static:false, Public:false}, "_keyName", $.String);

    $.Field({Static:false, Public:false}, "_provider", $asm07.TypeRef("System.Security.Cryptography.CngProvider"));

    $.Field({Static:false, Public:false}, "_optionOptions", $asm07.TypeRef("System.Security.Cryptography.CngKeyOpenOptions"));

    $.Constant({Static:true , Public:false}, "BitsPerByte", $.Int32, 8);

    $.Property({Static:false, Public:false}, "KeyInPlainText", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Internal.Cryptography.CngSymmetricAlgorithmCore+<>c__DisplayClass12_0 */ 

(function $l$gc__DisplayClass12_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "Internal.Cryptography.CngSymmetricAlgorithmCore+<>c__DisplayClass12_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateCryptoTransform$gb__0", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.CngKey"))
    );

    $.Field({Static:false, Public:true }, "key", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:true }, "algorithm", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.Win32");
/* class Microsoft.Win32.UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;






































































































  JSIL.MakeStaticClass("Microsoft.Win32.UnsafeNativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "CancelIoEx", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Runtime.InteropServices.SafeHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Threading.NativeOverlapped")])]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "CloseHandle", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "ConnectNamedPipe", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Threading.NativeOverlapped")])]), 
      {
        Module: "kernel32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "ConnectNamedPipe", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $.IntPtr]), 
      {
        Module: "kernel32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "CreateFile", 
      new JSIL.MethodSignature($asm02.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), [
          $.String, $.Int32, 
          $asm02.TypeRef("System.IO.FileShare"), $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES"), 
          $asm02.TypeRef("System.IO.FileMode"), $.Int32, 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "CreateFileMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"), [
          $asm02.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES"), 
          $.Int32, $.Int32, 
          $.Int32, $.String
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "CreateNamedPipe", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), [
          $.String, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES")
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "CreateNamedPipeClient", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), [
          $.String, $.Int32, 
          $asm02.TypeRef("System.IO.FileShare"), $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES"), 
          $asm02.TypeRef("System.IO.FileMode"), $.Int32, 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        EntryPoint: "CreateFile", 
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "CreatePipe", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")]), 
          $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES"), $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "DisconnectNamedPipe", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")]), 
      {
        Module: "kernel32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "DuplicateHandle", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")]), 
          $.UInt32, $.Boolean, 
          $.UInt32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "Boolean"
          }, null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EventActivityIdControl", 
      new JSIL.MethodSignature($.UInt32, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Guid")])]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EventEnabled", 
      new JSIL.MethodSignature($.Int32, [$.Int64, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Diagnostics.Eventing.EventDescriptor")])]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EventProviderEnabled", 
      new JSIL.MethodSignature($.Int32, [
          $.Int64, $.Byte, 
          $.Int64
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EventRegister", 
      new JSIL.MethodSignature($.UInt32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Guid")]), $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EtwEnableCallback"), 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Void")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EventUnregister", 
      new JSIL.MethodSignature($.Int32, [$.Int64]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EventWrite", 
      new JSIL.MethodSignature($.UInt32, [
          $.Int64, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Void")])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EventWrite", 
      new JSIL.MethodSignature($.UInt32, [
          $.Int64, $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Void")])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EventWriteString", 
      new JSIL.MethodSignature($.UInt32, [
          $.Int64, $.Byte, 
          $.Int64, $jsilcore.TypeRef("JSIL.Pointer", [$.Char])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EventWriteTransfer", 
      new JSIL.MethodSignature($.UInt32, [
          $.Int64, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Guid")]), $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Guid")]), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Void")])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtArchiveExportedLog", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.Int32, $.Int32
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "LPWStr"
          }, null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtCancel", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")]), 
      {
        Module: "wevtapi.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtClearLog", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.Int32
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "LPWStr"
          }, 
          {
            NativeType: "LPWStr"
          }, null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtClose", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "wevtapi.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtCreateBookmark", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$.String]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "LPWStr"
          }
        ]
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtCreateRenderContext", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtRenderContextFlags")
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "Array"
          }, 
          {
            NativeType: "I4"
          }
        ]
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtExportLog", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.String, 
          $.Int32
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "LPWStr"
          }, 
          {
            NativeType: "LPWStr"
          }, 
          {
            NativeType: "LPWStr"
          }, null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtFormatMessage", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtStringVariant")]), $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtFormatMessageFlags"), 
          $.Int32, $asm02.TypeRef("System.Text.StringBuilder"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "I4"
          }, null
          , 
          {
            NativeType: "LPWStr", 
            Out: true
          }, null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtFormatMessageBuffer", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $.UInt32, $.Int32, 
          $.IntPtr, $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtFormatMessageFlags"), 
          $.Int32, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        EntryPoint: "EvtFormatMessage", 
        Parameters: [
          {
            NativeType: "I4"
          }, null
          , null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtGetChannelConfigProperty", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtChannelConfigPropertyId"), 
          $.Int32, $.Int32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "I4"
          }, null
          , null
          , null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtGetEventInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtEventPropertyId"), 
          $.Int32, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "I4"
          }, null
          , null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtGetEventMetadataProperty", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtEventMetadataPropertyId"), 
          $.Int32, $.Int32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "I4"
          }, null
          , null
          , null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtGetLogInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtLogPropertyId"), 
          $.Int32, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "I4"
          }, null
          , null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtGetObjectArrayProperty", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtGetObjectArraySize", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtGetPublisherMetadataProperty", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtPublisherMetadataPropertyId"), 
          $.Int32, $.Int32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "I4"
          }, null
          , null
          , null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtGetQueryInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtQueryPropertyId"), 
          $.Int32, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "I4"
          }, null
          , null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtNext", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.IntPtr]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtNextChannelPath", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
          $asm02.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "LPWStr", 
            Out: true
          }, null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtNextEventMetadata", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtNextPublisherId", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
          $asm02.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "LPWStr", 
            Out: true
          }, null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtOpenChannelConfig", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.Int32
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "LPWStr"
          }, null

        ]
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtOpenChannelEnum", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtOpenEventMetadataEnum", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtOpenLog", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.PathType")
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "LPWStr"
          }, 
          {
            NativeType: "I4"
          }
        ]
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtOpenPublisherEnum", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtOpenPublisherMetadata", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "LPWStr"
          }, 
          {
            NativeType: "LPWStr"
          }, null
          , null

        ]
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtOpenSession", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtLoginClass"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtRpcLogin")]), 
          $.Int32, $.Int32
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "I4"
          }, null
          , null
          , null

        ]
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtQuery", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.Int32
        ]), 
      {
        Module: "wevtapi.dll", 
        Parameters: [
          {
            NativeType: "LPWStr"
          }, 
          {
            NativeType: "LPWStr"
          }, null

        ]
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtRender", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtRenderFlags"), $.Int32, 
          $asm02.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        Parameters: [
          {
            NativeType: "LPWStr", 
            Out: true
          }, null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtRender", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtRenderFlags"), $.Int32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtSaveChannelConfig", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtSeek", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int64, 
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
          $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtSeekFlags")
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "I4"
          }
        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtSetChannelConfigProperty", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtChannelConfigPropertyId"), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtVariant")])
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "I4"
          }, null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtSubscribe", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm02.TypeRef("Microsoft.Win32.SafeHandles.SafeWaitHandle"), 
          $.String, $.String, 
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.IntPtr, 
          $.IntPtr, $.Int32
        ]), 
      {
        Module: "wevtapi.dll", 
        Parameters: [
          {
            NativeType: "LPWStr"
          }, 
          {
            NativeType: "LPWStr"
          }, null
          , null
          , null
          , null

        ]
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "EvtUpdateBookmark", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "FlushFileBuffers", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")]), 
      {
        Module: "kernel32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "FlushViewOfFile", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $.IntPtr]), 
      {
        Module: "kernel32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "FormatMessage", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.IntPtr, 
          $.Int32, $.Int32, 
          $asm02.TypeRef("System.Text.StringBuilder"), $.Int32, 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "FreeLibrary", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GetCurrentProcess", 
      JSIL.MethodSignature.Return($.IntPtr), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GetFileSize", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GetFileType", 
      new JSIL.MethodSignature($.Int32, [$asm02.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle")]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GetFileType", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetMessage", 
      new JSIL.MethodSignature($.String, [$.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GetNamedPipeHandleState", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GetNamedPipeHandleState", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GetNamedPipeHandleState", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $asm02.TypeRef("System.Text.StringBuilder"), 
          $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GetNamedPipeInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.IntPtr, $.IntPtr, 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GetNamedPipeInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.IntPtr, 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GetNamedPipeInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $.IntPtr, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GetSystemInfo", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SYSTEM_INFO")])), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GlobalMemoryStatusEx", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+MEMORYSTATUSEX")])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GlobalMemoryStatusExNative", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+MEMORYSTATUSEX")])]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        EntryPoint: "GlobalMemoryStatusEx", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "ImpersonateNamedPipeClient", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")]), 
      {
        Module: "advapi32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.PInvokeMethod({Static:true , Public:false}, "LoadLibraryEx", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.SafeLibraryHandle"), [
          $.String, $.IntPtr, 
          $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "MakeHRFromErrorCode", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.PInvokeMethod({Static:true , Public:false}, "MapViewOfFile", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"), $.Int32, 
          $.UInt32, $.UInt32, 
          $.UIntPtr
        ]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "OpenFileMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"), [
          $.Int32, $.Boolean, 
          $.String
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "Boolean"
          }, null

        ]
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "PerfCreateInstance", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+PerfCounterSetInstanceStruct")]), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePerfProviderHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Guid")]), 
          $.String, $.UInt32
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "PerfDeleteInstance", 
      new JSIL.MethodSignature($.UInt32, [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePerfProviderHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+PerfCounterSetInstanceStruct")])]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "PerfSetCounterRefValue", 
      new JSIL.MethodSignature($.UInt32, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePerfProviderHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+PerfCounterSetInstanceStruct")]), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Void")])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "PerfSetCounterSetInfo", 
      new JSIL.MethodSignature($.UInt32, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePerfProviderHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+PerfCounterSetInfoStruct")]), 
          $.UInt32
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "PerfStartProvider", 
      new JSIL.MethodSignature($.UInt32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Guid")]), $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+PERFLIBREQUEST"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePerfProviderHandle")])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "PerfStopProvider", 
      new JSIL.MethodSignature($.UInt32, [$.IntPtr]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "ReadFile", 
      new JSIL.MethodSignature($.Int32, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $.Int32, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Threading.NativeOverlapped")])
        ]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "ReadFile", 
      new JSIL.MethodSignature($.Int32, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "RevertToSelf", 
      JSIL.MethodSignature.Return($.Boolean), 
      {
        Module: "advapi32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:true , Public:false}, "SafeCreateFile", 
      new JSIL.MethodSignature($asm02.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), [
          $.String, $.Int32, 
          $asm02.TypeRef("System.IO.FileShare"), $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES"), 
          $asm02.TypeRef("System.IO.FileMode"), $.Int32, 
          $.IntPtr
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "SetEndOfFile", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "SetErrorMode", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetFilePointer", 
      new JSIL.MethodSignature($.Int64, [
          $asm02.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), $.Int64, 
          $asm02.TypeRef("System.IO.SeekOrigin"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "SetFilePointerWin32", 
      new JSIL.MethodSignature($.Int32, [
          $asm02.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Int32]), $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        EntryPoint: "SetFilePointer", 
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "SetNamedPipeHandleState", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$.Int32]), 
          $.IntPtr, $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "UnmapViewOfFile", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "VirtualAlloc", 
      new JSIL.MethodSignature($.IntPtr, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle"), $.UIntPtr, 
          $.Int32, $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "VirtualQuery", 
      new JSIL.MethodSignature($.IntPtr, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+MEMORY_BASIC_INFORMATION")]), 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:true }, "WaitNamedPipe", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Int32]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "WriteFile", 
      new JSIL.MethodSignature($.Int32, [
          $asm02.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Threading.NativeOverlapped")])
        ]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "WriteFile", 
      new JSIL.MethodSignature($.Int32, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $.Int32, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Threading.NativeOverlapped")])
        ]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "WriteFile", 
      new JSIL.MethodSignature($.Int32, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Constant({Static:true , Public:false}, "KERNEL32", $.String, "kernel32.dll");

    $.Constant({Static:true , Public:false}, "ADVAPI32", $.String, "advapi32.dll");

    $.Constant({Static:true , Public:false}, "WEVTAPI", $.String, "wevtapi.dll");

    $.Field({Static:true , Public:false, ReadOnly:true }, "NULL", $.IntPtr);

    $.Constant({Static:true , Public:false}, "CREDUI_MAX_USERNAME_LENGTH", $.Int32, 513);

    $.Constant({Static:true , Public:false}, "ERROR_SUCCESS", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "ERROR_FILE_NOT_FOUND", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "ERROR_PATH_NOT_FOUND", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "ERROR_ACCESS_DENIED", $.Int32, 5);

    $.Constant({Static:true , Public:false}, "ERROR_INVALID_HANDLE", $.Int32, 6);

    $.Constant({Static:true , Public:false}, "ERROR_NOT_ENOUGH_MEMORY", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "ERROR_INVALID_DRIVE", $.Int32, 15);

    $.Constant({Static:true , Public:false}, "ERROR_NO_MORE_FILES", $.Int32, 18);

    $.Constant({Static:true , Public:false}, "ERROR_NOT_READY", $.Int32, 21);

    $.Constant({Static:true , Public:false}, "ERROR_BAD_LENGTH", $.Int32, 24);

    $.Constant({Static:true , Public:false}, "ERROR_SHARING_VIOLATION", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "ERROR_LOCK_VIOLATION", $.Int32, 33);

    $.Constant({Static:true , Public:false}, "ERROR_HANDLE_EOF", $.Int32, 38);

    $.Constant({Static:true , Public:false}, "ERROR_FILE_EXISTS", $.Int32, 80);

    $.Constant({Static:true , Public:false}, "ERROR_INVALID_PARAMETER", $.Int32, 87);

    $.Constant({Static:true , Public:false}, "ERROR_BROKEN_PIPE", $.Int32, 109);

    $.Constant({Static:true , Public:false}, "ERROR_INSUFFICIENT_BUFFER", $.Int32, 122);

    $.Constant({Static:true , Public:false}, "ERROR_INVALID_NAME", $.Int32, 123);

    $.Constant({Static:true , Public:false}, "ERROR_BAD_PATHNAME", $.Int32, 161);

    $.Constant({Static:true , Public:false}, "ERROR_ALREADY_EXISTS", $.Int32, 183);

    $.Constant({Static:true , Public:false}, "ERROR_ENVVAR_NOT_FOUND", $.Int32, 203);

    $.Constant({Static:true , Public:false}, "ERROR_FILENAME_EXCED_RANGE", $.Int32, 206);

    $.Constant({Static:true , Public:false}, "ERROR_PIPE_BUSY", $.Int32, 231);

    $.Constant({Static:true , Public:false}, "ERROR_NO_DATA", $.Int32, 232);

    $.Constant({Static:true , Public:false}, "ERROR_PIPE_NOT_CONNECTED", $.Int32, 233);

    $.Constant({Static:true , Public:false}, "ERROR_MORE_DATA", $.Int32, 234);

    $.Constant({Static:true , Public:false}, "ERROR_NO_MORE_ITEMS", $.Int32, 259);

    $.Constant({Static:true , Public:false}, "ERROR_PIPE_CONNECTED", $.Int32, 535);

    $.Constant({Static:true , Public:false}, "ERROR_PIPE_LISTENING", $.Int32, 536);

    $.Constant({Static:true , Public:false}, "ERROR_OPERATION_ABORTED", $.Int32, 995);

    $.Constant({Static:true , Public:false}, "ERROR_IO_PENDING", $.Int32, 997);

    $.Constant({Static:true , Public:false}, "ERROR_NOT_FOUND", $.Int32, 1168);

    $.Constant({Static:true , Public:false}, "ERROR_ARITHMETIC_OVERFLOW", $.Int32, 534);

    $.Constant({Static:true , Public:false}, "ERROR_RESOURCE_LANG_NOT_FOUND", $.Int32, 1815);

    $.Constant({Static:true , Public:false}, "ERROR_EVT_MESSAGE_NOT_FOUND", $.Int32, 15027);

    $.Constant({Static:true , Public:false}, "ERROR_EVT_MESSAGE_ID_NOT_FOUND", $.Int32, 15028);

    $.Constant({Static:true , Public:false}, "ERROR_EVT_UNRESOLVED_VALUE_INSERT", $.Int32, 15029);

    $.Constant({Static:true , Public:false}, "ERROR_EVT_UNRESOLVED_PARAMETER_INSERT", $.Int32, 15030);

    $.Constant({Static:true , Public:false}, "ERROR_EVT_MAX_INSERTS_REACHED", $.Int32, 15031);

    $.Constant({Static:true , Public:false}, "ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND", $.Int32, 15033);

    $.Constant({Static:true , Public:false}, "ERROR_MUI_FILE_NOT_FOUND", $.Int32, 15100);

    $.Constant({Static:true , Public:false}, "SECURITY_SQOS_PRESENT", $.Int32, 1048576);

    $.Constant({Static:true , Public:false}, "SECURITY_ANONYMOUS", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "SECURITY_IDENTIFICATION", $.Int32, 65536);

    $.Constant({Static:true , Public:false}, "SECURITY_IMPERSONATION", $.Int32, 131072);

    $.Constant({Static:true , Public:false}, "SECURITY_DELEGATION", $.Int32, 196608);

    $.Constant({Static:true , Public:false}, "GENERIC_READ", $.Int32, -2147483648);

    $.Constant({Static:true , Public:false}, "GENERIC_WRITE", $.Int32, 1073741824);

    $.Constant({Static:true , Public:false}, "STD_INPUT_HANDLE", $.Int32, -10);

    $.Constant({Static:true , Public:false}, "STD_OUTPUT_HANDLE", $.Int32, -11);

    $.Constant({Static:true , Public:false}, "STD_ERROR_HANDLE", $.Int32, -12);

    $.Constant({Static:true , Public:false}, "DUPLICATE_SAME_ACCESS", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "PIPE_ACCESS_INBOUND", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "PIPE_ACCESS_OUTBOUND", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "PIPE_ACCESS_DUPLEX", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "PIPE_TYPE_BYTE", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "PIPE_TYPE_MESSAGE", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "PIPE_READMODE_BYTE", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "PIPE_READMODE_MESSAGE", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "PIPE_UNLIMITED_INSTANCES", $.Int32, 255);

    $.Constant({Static:true , Public:false}, "FILE_FLAG_FIRST_PIPE_INSTANCE", $.Int32, 524288);

    $.Constant({Static:true , Public:false}, "FILE_SHARE_READ", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "FILE_SHARE_WRITE", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "FILE_ATTRIBUTE_NORMAL", $.Int32, 128);

    $.Constant({Static:true , Public:false}, "FILE_FLAG_OVERLAPPED", $.Int32, 1073741824);

    $.Constant({Static:true , Public:false}, "OPEN_EXISTING", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "FILE_TYPE_DISK", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "FILE_TYPE_CHAR", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "FILE_TYPE_PIPE", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "MEM_COMMIT", $.Int32, 4096);

    $.Constant({Static:true , Public:false}, "MEM_RESERVE", $.Int32, 8192);

    $.Constant({Static:true , Public:false}, "INVALID_FILE_SIZE", $.Int32, -1);

    $.Constant({Static:true , Public:false}, "PAGE_READWRITE", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "PAGE_READONLY", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "PAGE_WRITECOPY", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "PAGE_EXECUTE_READ", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "PAGE_EXECUTE_READWRITE", $.Int32, 64);

    $.Constant({Static:true , Public:false}, "FILE_MAP_COPY", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "FILE_MAP_WRITE", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "FILE_MAP_READ", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "FILE_MAP_EXECUTE", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "SEM_FAILCRITICALERRORS", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "FORMAT_MESSAGE_IGNORE_INSERTS", $.Int32, 512);

    $.Constant({Static:true , Public:false}, "FORMAT_MESSAGE_FROM_SYSTEM", $.Int32, 4096);

    $.Constant({Static:true , Public:false}, "FORMAT_MESSAGE_ARGUMENT_ARRAY", $.Int32, 8192);


    function UnsafeNativeMethods__cctor () {
      $thisType.NULL = new $asm02.System.IntPtr();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      UnsafeNativeMethods__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* class Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES */ 

(function SECURITY_ATTRIBUTES$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "nLength", $.Int32);

    $.Field({Static:false, Public:false}, "pSecurityDescriptor", $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "bInheritHandle", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.Win32.UnsafeNativeMethods+EtwEnableCallback */ 

JSIL.MakeDelegate("Microsoft.Win32.UnsafeNativeMethods+EtwEnableCallback", false, [], 
  new JSIL.MethodSignature(null, [
      $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Guid")]), $asm02.TypeRef("System.Int32"), 
      $asm02.TypeRef("System.Byte"), $asm02.TypeRef("System.Int64"), 
      $asm02.TypeRef("System.Int64"), $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Void")]), 
      $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Void")])
    ]));

/* struct Microsoft.Win32.UnsafeNativeMethods+PerfCounterSetInfoStruct */ 

(function PerfCounterSetInfoStruct$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.UnsafeNativeMethods+PerfCounterSetInfoStruct", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
      SizeBytes: 40, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false, Offset: 0}, "CounterSetGuid", $asm02.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false, Offset: 16}, "ProviderGuid", $asm02.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false, Offset: 32}, "NumCounters", $.UInt32);

    $.Field({Static:false, Public:false, Offset: 36}, "InstanceType", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Win32.UnsafeNativeMethods+PerfCounterInfoStruct */ 

(function PerfCounterInfoStruct$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.UnsafeNativeMethods+PerfCounterInfoStruct", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
      SizeBytes: 32, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false, Offset: 0}, "CounterId", $.UInt32);

    $.Field({Static:false, Public:false, Offset: 4}, "CounterType", $.UInt32);

    $.Field({Static:false, Public:false, Offset: 8}, "Attrib", $.Int64);

    $.Field({Static:false, Public:false, Offset: 16}, "Size", $.UInt32);

    $.Field({Static:false, Public:false, Offset: 20}, "DetailLevel", $.UInt32);

    $.Field({Static:false, Public:false, Offset: 24}, "Scale", $.UInt32);

    $.Field({Static:false, Public:false, Offset: 28}, "Offset", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Win32.UnsafeNativeMethods+PerfCounterSetInstanceStruct */ 

(function PerfCounterSetInstanceStruct$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.UnsafeNativeMethods+PerfCounterSetInstanceStruct", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
      SizeBytes: 32, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false, Offset: 0}, "CounterSetGuid", $asm02.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false, Offset: 16}, "dwSize", $.UInt32);

    $.Field({Static:false, Public:false, Offset: 20}, "InstanceId", $.UInt32);

    $.Field({Static:false, Public:false, Offset: 24}, "InstanceNameOffset", $.UInt32);

    $.Field({Static:false, Public:false, Offset: 28}, "InstanceNameSize", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.Win32.UnsafeNativeMethods+PERFLIBREQUEST */ 

JSIL.MakeDelegate("Microsoft.Win32.UnsafeNativeMethods+PERFLIBREQUEST", false, [], 
  new JSIL.MethodSignature($asm02.TypeRef("System.UInt32"), [
      $asm02.TypeRef("System.UInt32"), $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Void")]), 
      $asm02.TypeRef("System.UInt32")
    ]));

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtQueryFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtQueryFlags", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    EvtQueryChannelPath: 1, 
    EvtQueryFilePath: 2, 
    EvtQueryForwardDirection: 256, 
    EvtQueryReverseDirection: 512, 
    EvtQueryTolerateQueryErrors: 4096, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtSubscribeFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtSubscribeFlags", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    EvtSubscribeToFutureEvents: 1, 
    EvtSubscribeStartAtOldestRecord: 2, 
    EvtSubscribeStartAfterBookmark: 3, 
    EvtSubscribeTolerateQueryErrors: 4096, 
    EvtSubscribeStrict: 65536, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtVariantType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtVariantType", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EvtVarTypeNull: 0, 
    EvtVarTypeString: 1, 
    EvtVarTypeAnsiString: 2, 
    EvtVarTypeSByte: 3, 
    EvtVarTypeByte: 4, 
    EvtVarTypeInt16: 5, 
    EvtVarTypeUInt16: 6, 
    EvtVarTypeInt32: 7, 
    EvtVarTypeUInt32: 8, 
    EvtVarTypeInt64: 9, 
    EvtVarTypeUInt64: 10, 
    EvtVarTypeSingle: 11, 
    EvtVarTypeDouble: 12, 
    EvtVarTypeBoolean: 13, 
    EvtVarTypeBinary: 14, 
    EvtVarTypeGuid: 15, 
    EvtVarTypeSizeT: 16, 
    EvtVarTypeFileTime: 17, 
    EvtVarTypeSysTime: 18, 
    EvtVarTypeSid: 19, 
    EvtVarTypeHexInt32: 20, 
    EvtVarTypeHexInt64: 21, 
    EvtVarTypeEvtHandle: 32, 
    EvtVarTypeEvtXml: 35, 
    EvtVarTypeStringArray: 129, 
    EvtVarTypeUInt32Array: 136, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtMasks */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtMasks", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EVT_VARIANT_TYPE_MASK: 127, 
    EVT_VARIANT_TYPE_ARRAY: 128, 
  }
);

/* struct Microsoft.Win32.UnsafeNativeMethods+SystemTime */ 

(function SystemTime$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.UnsafeNativeMethods+SystemTime", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Year", $.Int16);

    $.Field({Static:false, Public:true }, "Month", $.Int16);

    $.Field({Static:false, Public:true }, "DayOfWeek", $.Int16);

    $.Field({Static:false, Public:true }, "Day", $.Int16);

    $.Field({Static:false, Public:true }, "Hour", $.Int16);

    $.Field({Static:false, Public:true }, "Minute", $.Int16);

    $.Field({Static:false, Public:true }, "Second", $.Int16);

    $.Field({Static:false, Public:true }, "Milliseconds", $.Int16);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Win32.UnsafeNativeMethods+EvtVariant */ 

(function EvtVariant$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.UnsafeNativeMethods+EvtVariant", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true , Offset: 0}, "UInteger", $.UInt32);

    $.Field({Static:false, Public:true , Offset: 0}, "Integer", $.Int32);

    $.Field({Static:false, Public:true , Offset: 0}, "UInt8", $.Byte);

    $.Field({Static:false, Public:true , Offset: 0}, "Short", $.Int16);

    $.Field({Static:false, Public:true , Offset: 0}, "UShort", $.UInt16);

    $.Field({Static:false, Public:true , Offset: 0}, "Bool", $.UInt32);

    $.Field({Static:false, Public:true , Offset: 0}, "ByteVal", $.Byte);

    $.Field({Static:false, Public:true , Offset: 0}, "SByte", $.Byte);

    $.Field({Static:false, Public:true , Offset: 0}, "ULong", $.UInt64);

    $.Field({Static:false, Public:true , Offset: 0}, "Long", $.Int64);

    $.Field({Static:false, Public:true , Offset: 0}, "Single", $.Single);

    $.Field({Static:false, Public:true , Offset: 0}, "Double", $.Double);

    $.Field({Static:false, Public:true , Offset: 0}, "StringVal", $.IntPtr);

    $.Field({Static:false, Public:true , Offset: 0}, "AnsiString", $.IntPtr);

    $.Field({Static:false, Public:true , Offset: 0}, "SidVal", $.IntPtr);

    $.Field({Static:false, Public:true , Offset: 0}, "Binary", $.IntPtr);

    $.Field({Static:false, Public:true , Offset: 0}, "Reference", $.IntPtr);

    $.Field({Static:false, Public:true , Offset: 0}, "Handle", $.IntPtr);

    $.Field({Static:false, Public:true , Offset: 0}, "GuidReference", $.IntPtr);

    $.Field({Static:false, Public:true , Offset: 0}, "FileTime", $.UInt64);

    $.Field({Static:false, Public:true , Offset: 0}, "SystemTime", $.IntPtr);

    $.Field({Static:false, Public:true , Offset: 0}, "SizeT", $.IntPtr);

    $.Field({Static:false, Public:true , Offset: 8}, "Count", $.UInt32);

    $.Field({Static:false, Public:true , Offset: 12}, "Type", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtEventPropertyId */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtEventPropertyId", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EvtEventQueryIDs: 0, 
    EvtEventPath: 1, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtQueryPropertyId */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtQueryPropertyId", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EvtQueryNames: 0, 
    EvtQueryStatuses: 1, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtPublisherMetadataPropertyId */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtPublisherMetadataPropertyId", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EvtPublisherMetadataPublisherGuid: 0, 
    EvtPublisherMetadataResourceFilePath: 1, 
    EvtPublisherMetadataParameterFilePath: 2, 
    EvtPublisherMetadataMessageFilePath: 3, 
    EvtPublisherMetadataHelpLink: 4, 
    EvtPublisherMetadataPublisherMessageID: 5, 
    EvtPublisherMetadataChannelReferences: 6, 
    EvtPublisherMetadataChannelReferencePath: 7, 
    EvtPublisherMetadataChannelReferenceIndex: 8, 
    EvtPublisherMetadataChannelReferenceID: 9, 
    EvtPublisherMetadataChannelReferenceFlags: 10, 
    EvtPublisherMetadataChannelReferenceMessageID: 11, 
    EvtPublisherMetadataLevels: 12, 
    EvtPublisherMetadataLevelName: 13, 
    EvtPublisherMetadataLevelValue: 14, 
    EvtPublisherMetadataLevelMessageID: 15, 
    EvtPublisherMetadataTasks: 16, 
    EvtPublisherMetadataTaskName: 17, 
    EvtPublisherMetadataTaskEventGuid: 18, 
    EvtPublisherMetadataTaskValue: 19, 
    EvtPublisherMetadataTaskMessageID: 20, 
    EvtPublisherMetadataOpcodes: 21, 
    EvtPublisherMetadataOpcodeName: 22, 
    EvtPublisherMetadataOpcodeValue: 23, 
    EvtPublisherMetadataOpcodeMessageID: 24, 
    EvtPublisherMetadataKeywords: 25, 
    EvtPublisherMetadataKeywordName: 26, 
    EvtPublisherMetadataKeywordValue: 27, 
    EvtPublisherMetadataKeywordMessageID: 28, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtChannelReferenceFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtChannelReferenceFlags", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EvtChannelReferenceImported: 1, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtEventMetadataPropertyId */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtEventMetadataPropertyId", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EventMetadataEventID: 0, 
    EventMetadataEventVersion: 1, 
    EventMetadataEventChannel: 2, 
    EventMetadataEventLevel: 3, 
    EventMetadataEventOpcode: 4, 
    EventMetadataEventTask: 5, 
    EventMetadataEventKeyword: 6, 
    EventMetadataEventMessageID: 7, 
    EventMetadataEventTemplate: 8, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtChannelConfigPropertyId */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtChannelConfigPropertyId", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EvtChannelConfigEnabled: 0, 
    EvtChannelConfigIsolation: 1, 
    EvtChannelConfigType: 2, 
    EvtChannelConfigOwningPublisher: 3, 
    EvtChannelConfigClassicEventlog: 4, 
    EvtChannelConfigAccess: 5, 
    EvtChannelLoggingConfigRetention: 6, 
    EvtChannelLoggingConfigAutoBackup: 7, 
    EvtChannelLoggingConfigMaxSize: 8, 
    EvtChannelLoggingConfigLogFilePath: 9, 
    EvtChannelPublishingConfigLevel: 10, 
    EvtChannelPublishingConfigKeywords: 11, 
    EvtChannelPublishingConfigControlGuid: 12, 
    EvtChannelPublishingConfigBufferSize: 13, 
    EvtChannelPublishingConfigMinBuffers: 14, 
    EvtChannelPublishingConfigMaxBuffers: 15, 
    EvtChannelPublishingConfigLatency: 16, 
    EvtChannelPublishingConfigClockType: 17, 
    EvtChannelPublishingConfigSidType: 18, 
    EvtChannelPublisherList: 19, 
    EvtChannelConfigPropertyIdEND: 20, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtLogPropertyId */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtLogPropertyId", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EvtLogCreationTime: 0, 
    EvtLogLastAccessTime: 1, 
    EvtLogLastWriteTime: 2, 
    EvtLogFileSize: 3, 
    EvtLogAttributes: 4, 
    EvtLogNumberOfLogRecords: 5, 
    EvtLogOldestRecordNumber: 6, 
    EvtLogFull: 7, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtExportLogFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtExportLogFlags", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EvtExportLogChannelPath: 1, 
    EvtExportLogFilePath: 2, 
    EvtExportLogTolerateQueryErrors: 4096, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtRenderContextFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtRenderContextFlags", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EvtRenderContextValues: 0, 
    EvtRenderContextSystem: 1, 
    EvtRenderContextUser: 2, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtRenderFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtRenderFlags", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EvtRenderEventValues: 0, 
    EvtRenderEventXml: 1, 
    EvtRenderBookmark: 2, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtFormatMessageFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtFormatMessageFlags", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EvtFormatMessageEvent: 1, 
    EvtFormatMessageLevel: 2, 
    EvtFormatMessageTask: 3, 
    EvtFormatMessageOpcode: 4, 
    EvtFormatMessageKeyword: 5, 
    EvtFormatMessageChannel: 6, 
    EvtFormatMessageProvider: 7, 
    EvtFormatMessageId: 8, 
    EvtFormatMessageXml: 9, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtSystemPropertyId */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtSystemPropertyId", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EvtSystemProviderName: 0, 
    EvtSystemProviderGuid: 1, 
    EvtSystemEventID: 2, 
    EvtSystemQualifiers: 3, 
    EvtSystemLevel: 4, 
    EvtSystemTask: 5, 
    EvtSystemOpcode: 6, 
    EvtSystemKeywords: 7, 
    EvtSystemTimeCreated: 8, 
    EvtSystemEventRecordId: 9, 
    EvtSystemActivityID: 10, 
    EvtSystemRelatedActivityID: 11, 
    EvtSystemProcessID: 12, 
    EvtSystemThreadID: 13, 
    EvtSystemChannel: 14, 
    EvtSystemComputer: 15, 
    EvtSystemUserID: 16, 
    EvtSystemVersion: 17, 
    EvtSystemPropertyIdEND: 18, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtLoginClass */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtLoginClass", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EvtRpcLogin: 1, 
  }
);

/* struct Microsoft.Win32.UnsafeNativeMethods+EvtRpcLogin */ 

(function EvtRpcLogin$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.UnsafeNativeMethods+EvtRpcLogin", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Server", $.String);

    $.Field({Static:false, Public:true }, "User", $.String);

    $.Field({Static:false, Public:true }, "Domain", $.String);

    $.Field({Static:false, Public:true }, "Password", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.CoTaskMemUnicodeSafeHandle"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:true }, "Flags", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtSeekFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtSeekFlags", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    EvtSeekRelativeToFirst: 1, 
    EvtSeekRelativeToLast: 2, 
    EvtSeekRelativeToCurrent: 3, 
    EvtSeekRelativeToBookmark: 4, 
    EvtSeekOriginMask: 7, 
    EvtSeekStrict: 65536, 
  }
);

/* struct Microsoft.Win32.UnsafeNativeMethods+EvtStringVariant */ 

(function EvtStringVariant$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.UnsafeNativeMethods+EvtStringVariant", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true , Offset: 0}, "StringVal", $.String);

    $.Field({Static:false, Public:true , Offset: 8}, "Count", $.UInt32);

    $.Field({Static:false, Public:true , Offset: 12}, "Type", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Win32.UnsafeNativeMethods+MEMORY_BASIC_INFORMATION */ 

(function MEMORY_BASIC_INFORMATION$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.UnsafeNativeMethods+MEMORY_BASIC_INFORMATION", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "BaseAddress", $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Void")]));

    $.Field({Static:false, Public:false}, "AllocationBase", $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Void")]));

    $.Field({Static:false, Public:false}, "AllocationProtect", $.UInt32);

    $.Field({Static:false, Public:false}, "RegionSize", $.UIntPtr);

    $.Field({Static:false, Public:false}, "State", $.UInt32);

    $.Field({Static:false, Public:false}, "Protect", $.UInt32);

    $.Field({Static:false, Public:false}, "Type", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* struct Microsoft.Win32.UnsafeNativeMethods+SYSTEM_INFO */ 

(function SYSTEM_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.UnsafeNativeMethods+SYSTEM_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "dwOemId", $.Int32);

    $.Field({Static:false, Public:false}, "dwPageSize", $.Int32);

    $.Field({Static:false, Public:false}, "lpMinimumApplicationAddress", $.IntPtr);

    $.Field({Static:false, Public:false}, "lpMaximumApplicationAddress", $.IntPtr);

    $.Field({Static:false, Public:false}, "dwActiveProcessorMask", $.IntPtr);

    $.Field({Static:false, Public:false}, "dwNumberOfProcessors", $.Int32);

    $.Field({Static:false, Public:false}, "dwProcessorType", $.Int32);

    $.Field({Static:false, Public:false}, "dwAllocationGranularity", $.Int32);

    $.Field({Static:false, Public:false}, "wProcessorLevel", $.Int16);

    $.Field({Static:false, Public:false}, "wProcessorRevision", $.Int16);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Win32.UnsafeNativeMethods+MEMORYSTATUSEX */ 

(function MEMORYSTATUSEX$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.UnsafeNativeMethods+MEMORYSTATUSEX", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "dwLength", $.UInt32);

    $.Field({Static:false, Public:false}, "dwMemoryLoad", $.UInt32);

    $.Field({Static:false, Public:false}, "ullTotalPhys", $.UInt64);

    $.Field({Static:false, Public:false}, "ullAvailPhys", $.UInt64);

    $.Field({Static:false, Public:false}, "ullTotalPageFile", $.UInt64);

    $.Field({Static:false, Public:false}, "ullAvailPageFile", $.UInt64);

    $.Field({Static:false, Public:false}, "ullTotalVirtual", $.UInt64);

    $.Field({Static:false, Public:false}, "ullAvailVirtual", $.UInt64);

    $.Field({Static:false, Public:false}, "ullAvailExtendedVirtual", $.UInt64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.SafeLibraryHandle */ 

(function SafeLibraryHandle$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeLibraryHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

JSIL.DeclareNamespace("Microsoft.Win32.SafeHandles");
/* class Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle */ 

(function SafeBCryptAlgorithmHandle$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "BCryptCloseAlgorithmProvider", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.BCryptNative+ErrorCode"), [$.IntPtr, $.Int32]), 
      {
        Module: "bcrypt", 
      }
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm02.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeBCryptHashHandle */ 

(function SafeBCryptHashHandle$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeBCryptHashHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "BCryptDestroyHash", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.BCryptNative+ErrorCode"), [$.IntPtr]), 
      {
        Module: "bcrypt", 
      }
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm02.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_HashObject", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HashObject", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.Field({Static:false, Public:false}, "m_hashObject", $.IntPtr);

    $.Property({Static:false, Public:false}, "HashObject", $.IntPtr);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeBCryptKeyHandle */ 

(function SafeBCryptKeyHandle$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeBCryptKeyHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "BCryptDestroyKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.BCryptNative+ErrorCode"), [$.IntPtr]), 
      {
        Module: "bcrypt.dll", 
      }
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm02.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

})();

/* class Microsoft.Win32.SafeHandles.SafeAxlBufferHandle */ 

(function SafeAxlBufferHandle$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeAxlBufferHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetProcessHeap", 
      JSIL.MethodSignature.Return($.IntPtr), 
      {
        Module: "kernel32", 
      }
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm02.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "HeapFree", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.Int32, 
          $.IntPtr
        ]), 
      {
        Module: "kernel32", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm02.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeCapiHandleBase */ 

(function SafeCapiHandleBase$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeCapiHandleBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptContextAddRef", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.IntPtr, 
          $.Int32
        ]), 
      {
        Module: "advapi32", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm02.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "CryptReleaseContext", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr, $.Int32]), 
      {
        Module: "advapi32", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm02.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_ParentCsp", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseCapiChildHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ParentCsp", 
      JSIL.MethodSignature.Action($.IntPtr)
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:false, Public:false}, "SetParentCsp", 
      JSIL.MethodSignature.Action($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"))
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.Field({Static:false, Public:false}, "m_csp", $.IntPtr);

    $.Property({Static:false, Public:false}, "ParentCsp", $.IntPtr);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeCapiHashHandle */ 

(function SafeCapiHashHandle$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHandleBase"), 
      Name: "Microsoft.Win32.SafeHandles.SafeCapiHashHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptDestroyHash", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "advapi32", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm02.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_InvalidHandle", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseCapiChildHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:false}, "s_invalidHandle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"));

    $.Property({Static:true , Public:true }, "InvalidHandle", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeCapiKeyHandle */ 

(function SafeCapiKeyHandle$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHandleBase"), 
      Name: "Microsoft.Win32.SafeHandles.SafeCapiKeyHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptDestroyKey", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "advapi32", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm02.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Duplicate", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidHandle", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseCapiChildHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:false}, "s_invalidHandle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"));

    $.Property({Static:true , Public:false}, "InvalidHandle", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeCspHandle */ 

(function SafeCspHandle$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeCspHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptContextAddRef", 
      new JSIL.MethodSignature($.Boolean, [
          $.Type, $.IntPtr, 
          $.Int32
        ]), 
      {
        Module: "advapi32", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm02.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "CryptReleaseContext", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr, $.Int32]), 
      {
        Module: "advapi32", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm02.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Duplicate", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeNCryptHandle */ 

(function SafeNCryptHandle$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeNCryptHandle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Duplicate", 
      new JSIL.MethodSignature("!!0", null, ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "DuplicateDuplicatedHandle", 
      new JSIL.MethodSignature("!!0", null, ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "DuplicateOwnerHandle", 
      new JSIL.MethodSignature("!!0", null, ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Holder", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseNativeHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false}, "set_Holder", 
      JSIL.MethodSignature.Action($.Type)
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.Field({Static:false, Public:false}, "m_ownershipState", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle+OwnershipState"));

    $.Field({Static:false, Public:false}, "m_holder", $.Type);

    $.Property({Static:false, Public:false}, "Holder", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* enum Microsoft.Win32.SafeHandles.SafeNCryptHandle+OwnershipState */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.SafeHandles.SafeNCryptHandle+OwnershipState", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Owner: 0, 
    Duplicate: 1, 
    Holder: 2, 
  }
);

/* class Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle */ 

(function SafeNCryptKeyHandle$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), 
      Name: "Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Duplicate", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptFreeObject", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "ncrypt.dll", 
      }
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm02.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseNativeHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle */ 

(function SafeNCryptProviderHandle$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), 
      Name: "Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Duplicate", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptFreeObject", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "ncrypt.dll", 
      }
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm02.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseNativeHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetHandleValue", 
      JSIL.MethodSignature.Action($.IntPtr)
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle */ 

(function SafeNCryptSecretHandle$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), 
      Name: "Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptFreeObject", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "ncrypt.dll", 
      }
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm02.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseNativeHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafePipeHandle */ 

(function SafePipeHandle$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafePipeHandle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.IntPtr, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafePerfProviderHandle */ 

(function SafePerfProviderHandle$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafePerfProviderHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle */ 

(function SafeMemoryMappedFileHandle$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.IntPtr, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle */ 

(function SafeMemoryMappedViewHandle$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Runtime.InteropServices.SafeBuffer"), 
      Name: "Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.IntPtr, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

JSIL.DeclareNamespace("System");
/* class System.LocalAppContextSwitches */ 

(function LocalAppContextSwitches$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.LocalAppContextSwitches", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_AesCryptoServiceProviderDontCorrectlyResetDecryptor", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DontReliablyClonePrivateKey", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Constant({Static:true , Public:false}, "DontReliablyClonePrivateKeyStr", $.String, "Switch.System.Security.Cryptography.X509Certificates.RSACertificateExtensions.DontReliablyClonePrivateKey");

    $.Field({Static:true , Public:false}, "_dontReliablyClonePrivateKeyName", $.Int32);

    $.Constant({Static:true , Public:false}, "AesCryptoServiceProviderDontCorrectlyResetDecryptorStr", $.String, "Switch.System.Security.Cryptography.AesCryptoServiceProvider.DontCorrectlyResetDecryptor");

    $.Field({Static:true , Public:false}, "_aesCryptoServiceProviderDontCorrectlyResetDecryptorName", $.Int32);

    $.Property({Static:true , Public:true }, "DontReliablyClonePrivateKey", $.Boolean);

    $.Property({Static:true , Public:true }, "AesCryptoServiceProviderDontCorrectlyResetDecryptor", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.AppContextDefaultValues */ 

(function AppContextDefaultValues$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.AppContextDefaultValues", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ParseTargetFrameworkName", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "PopulateDefaultValues", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "PopulateDefaultValuesPartial", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParseFrameworkName", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Action`9 */ 

JSIL.MakeDelegate("System.Action`9", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9"
  ], 
  new JSIL.MethodSignature(null, [
      new JSIL.GenericParameter("T1", "System.Action`9").in(), new JSIL.GenericParameter("T2", "System.Action`9").in(), 
      new JSIL.GenericParameter("T3", "System.Action`9").in(), new JSIL.GenericParameter("T4", "System.Action`9").in(), 
      new JSIL.GenericParameter("T5", "System.Action`9").in(), new JSIL.GenericParameter("T6", "System.Action`9").in(), 
      new JSIL.GenericParameter("T7", "System.Action`9").in(), new JSIL.GenericParameter("T8", "System.Action`9").in(), 
      new JSIL.GenericParameter("T9", "System.Action`9").in()
    ]));

/* delegate System.Action`10 */ 

JSIL.MakeDelegate("System.Action`10", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10"
  ], 
  new JSIL.MethodSignature(null, [
      new JSIL.GenericParameter("T1", "System.Action`10").in(), new JSIL.GenericParameter("T2", "System.Action`10").in(), 
      new JSIL.GenericParameter("T3", "System.Action`10").in(), new JSIL.GenericParameter("T4", "System.Action`10").in(), 
      new JSIL.GenericParameter("T5", "System.Action`10").in(), new JSIL.GenericParameter("T6", "System.Action`10").in(), 
      new JSIL.GenericParameter("T7", "System.Action`10").in(), new JSIL.GenericParameter("T8", "System.Action`10").in(), 
      new JSIL.GenericParameter("T9", "System.Action`10").in(), new JSIL.GenericParameter("T10", "System.Action`10").in()
    ]));

/* delegate System.Action`11 */ 

JSIL.MakeDelegate("System.Action`11", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11"
  ], 
  new JSIL.MethodSignature(null, [
      new JSIL.GenericParameter("T1", "System.Action`11").in(), new JSIL.GenericParameter("T2", "System.Action`11").in(), 
      new JSIL.GenericParameter("T3", "System.Action`11").in(), new JSIL.GenericParameter("T4", "System.Action`11").in(), 
      new JSIL.GenericParameter("T5", "System.Action`11").in(), new JSIL.GenericParameter("T6", "System.Action`11").in(), 
      new JSIL.GenericParameter("T7", "System.Action`11").in(), new JSIL.GenericParameter("T8", "System.Action`11").in(), 
      new JSIL.GenericParameter("T9", "System.Action`11").in(), new JSIL.GenericParameter("T10", "System.Action`11").in(), 
      new JSIL.GenericParameter("T11", "System.Action`11").in()
    ]));

/* delegate System.Action`12 */ 

JSIL.MakeDelegate("System.Action`12", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12"
  ], 
  new JSIL.MethodSignature(null, [
      new JSIL.GenericParameter("T1", "System.Action`12").in(), new JSIL.GenericParameter("T2", "System.Action`12").in(), 
      new JSIL.GenericParameter("T3", "System.Action`12").in(), new JSIL.GenericParameter("T4", "System.Action`12").in(), 
      new JSIL.GenericParameter("T5", "System.Action`12").in(), new JSIL.GenericParameter("T6", "System.Action`12").in(), 
      new JSIL.GenericParameter("T7", "System.Action`12").in(), new JSIL.GenericParameter("T8", "System.Action`12").in(), 
      new JSIL.GenericParameter("T9", "System.Action`12").in(), new JSIL.GenericParameter("T10", "System.Action`12").in(), 
      new JSIL.GenericParameter("T11", "System.Action`12").in(), new JSIL.GenericParameter("T12", "System.Action`12").in()
    ]));

/* delegate System.Action`13 */ 

JSIL.MakeDelegate("System.Action`13", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "in T13"
  ], 
  new JSIL.MethodSignature(null, [
      new JSIL.GenericParameter("T1", "System.Action`13").in(), new JSIL.GenericParameter("T2", "System.Action`13").in(), 
      new JSIL.GenericParameter("T3", "System.Action`13").in(), new JSIL.GenericParameter("T4", "System.Action`13").in(), 
      new JSIL.GenericParameter("T5", "System.Action`13").in(), new JSIL.GenericParameter("T6", "System.Action`13").in(), 
      new JSIL.GenericParameter("T7", "System.Action`13").in(), new JSIL.GenericParameter("T8", "System.Action`13").in(), 
      new JSIL.GenericParameter("T9", "System.Action`13").in(), new JSIL.GenericParameter("T10", "System.Action`13").in(), 
      new JSIL.GenericParameter("T11", "System.Action`13").in(), new JSIL.GenericParameter("T12", "System.Action`13").in(), 
      new JSIL.GenericParameter("T13", "System.Action`13").in()
    ]));

/* delegate System.Action`14 */ 

JSIL.MakeDelegate("System.Action`14", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "in T13", "in T14"
  ], 
  new JSIL.MethodSignature(null, [
      new JSIL.GenericParameter("T1", "System.Action`14").in(), new JSIL.GenericParameter("T2", "System.Action`14").in(), 
      new JSIL.GenericParameter("T3", "System.Action`14").in(), new JSIL.GenericParameter("T4", "System.Action`14").in(), 
      new JSIL.GenericParameter("T5", "System.Action`14").in(), new JSIL.GenericParameter("T6", "System.Action`14").in(), 
      new JSIL.GenericParameter("T7", "System.Action`14").in(), new JSIL.GenericParameter("T8", "System.Action`14").in(), 
      new JSIL.GenericParameter("T9", "System.Action`14").in(), new JSIL.GenericParameter("T10", "System.Action`14").in(), 
      new JSIL.GenericParameter("T11", "System.Action`14").in(), new JSIL.GenericParameter("T12", "System.Action`14").in(), 
      new JSIL.GenericParameter("T13", "System.Action`14").in(), new JSIL.GenericParameter("T14", "System.Action`14").in()
    ]));

/* delegate System.Action`15 */ 

JSIL.MakeDelegate("System.Action`15", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "in T13", "in T14", "in T15"
  ], 
  new JSIL.MethodSignature(null, [
      new JSIL.GenericParameter("T1", "System.Action`15").in(), new JSIL.GenericParameter("T2", "System.Action`15").in(), 
      new JSIL.GenericParameter("T3", "System.Action`15").in(), new JSIL.GenericParameter("T4", "System.Action`15").in(), 
      new JSIL.GenericParameter("T5", "System.Action`15").in(), new JSIL.GenericParameter("T6", "System.Action`15").in(), 
      new JSIL.GenericParameter("T7", "System.Action`15").in(), new JSIL.GenericParameter("T8", "System.Action`15").in(), 
      new JSIL.GenericParameter("T9", "System.Action`15").in(), new JSIL.GenericParameter("T10", "System.Action`15").in(), 
      new JSIL.GenericParameter("T11", "System.Action`15").in(), new JSIL.GenericParameter("T12", "System.Action`15").in(), 
      new JSIL.GenericParameter("T13", "System.Action`15").in(), new JSIL.GenericParameter("T14", "System.Action`15").in(), 
      new JSIL.GenericParameter("T15", "System.Action`15").in()
    ]));

/* delegate System.Action`16 */ 

JSIL.MakeDelegate("System.Action`16", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "in T13", "in T14", "in T15", "in T16"
  ], 
  new JSIL.MethodSignature(null, [
      new JSIL.GenericParameter("T1", "System.Action`16").in(), new JSIL.GenericParameter("T2", "System.Action`16").in(), 
      new JSIL.GenericParameter("T3", "System.Action`16").in(), new JSIL.GenericParameter("T4", "System.Action`16").in(), 
      new JSIL.GenericParameter("T5", "System.Action`16").in(), new JSIL.GenericParameter("T6", "System.Action`16").in(), 
      new JSIL.GenericParameter("T7", "System.Action`16").in(), new JSIL.GenericParameter("T8", "System.Action`16").in(), 
      new JSIL.GenericParameter("T9", "System.Action`16").in(), new JSIL.GenericParameter("T10", "System.Action`16").in(), 
      new JSIL.GenericParameter("T11", "System.Action`16").in(), new JSIL.GenericParameter("T12", "System.Action`16").in(), 
      new JSIL.GenericParameter("T13", "System.Action`16").in(), new JSIL.GenericParameter("T14", "System.Action`16").in(), 
      new JSIL.GenericParameter("T15", "System.Action`16").in(), new JSIL.GenericParameter("T16", "System.Action`16").in()
    ]));

/* delegate System.Func`10 */ 

JSIL.MakeDelegate("System.Func`10", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "out TResult"
  ], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`10").out(), [
      new JSIL.GenericParameter("T1", "System.Func`10").in(), new JSIL.GenericParameter("T2", "System.Func`10").in(), 
      new JSIL.GenericParameter("T3", "System.Func`10").in(), new JSIL.GenericParameter("T4", "System.Func`10").in(), 
      new JSIL.GenericParameter("T5", "System.Func`10").in(), new JSIL.GenericParameter("T6", "System.Func`10").in(), 
      new JSIL.GenericParameter("T7", "System.Func`10").in(), new JSIL.GenericParameter("T8", "System.Func`10").in(), 
      new JSIL.GenericParameter("T9", "System.Func`10").in()
    ]));

/* delegate System.Func`11 */ 

JSIL.MakeDelegate("System.Func`11", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "out TResult"
  ], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`11").out(), [
      new JSIL.GenericParameter("T1", "System.Func`11").in(), new JSIL.GenericParameter("T2", "System.Func`11").in(), 
      new JSIL.GenericParameter("T3", "System.Func`11").in(), new JSIL.GenericParameter("T4", "System.Func`11").in(), 
      new JSIL.GenericParameter("T5", "System.Func`11").in(), new JSIL.GenericParameter("T6", "System.Func`11").in(), 
      new JSIL.GenericParameter("T7", "System.Func`11").in(), new JSIL.GenericParameter("T8", "System.Func`11").in(), 
      new JSIL.GenericParameter("T9", "System.Func`11").in(), new JSIL.GenericParameter("T10", "System.Func`11").in()
    ]));

/* delegate System.Func`12 */ 

JSIL.MakeDelegate("System.Func`12", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "out TResult"
  ], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`12").out(), [
      new JSIL.GenericParameter("T1", "System.Func`12").in(), new JSIL.GenericParameter("T2", "System.Func`12").in(), 
      new JSIL.GenericParameter("T3", "System.Func`12").in(), new JSIL.GenericParameter("T4", "System.Func`12").in(), 
      new JSIL.GenericParameter("T5", "System.Func`12").in(), new JSIL.GenericParameter("T6", "System.Func`12").in(), 
      new JSIL.GenericParameter("T7", "System.Func`12").in(), new JSIL.GenericParameter("T8", "System.Func`12").in(), 
      new JSIL.GenericParameter("T9", "System.Func`12").in(), new JSIL.GenericParameter("T10", "System.Func`12").in(), 
      new JSIL.GenericParameter("T11", "System.Func`12").in()
    ]));

/* delegate System.Func`13 */ 

JSIL.MakeDelegate("System.Func`13", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "out TResult"
  ], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`13").out(), [
      new JSIL.GenericParameter("T1", "System.Func`13").in(), new JSIL.GenericParameter("T2", "System.Func`13").in(), 
      new JSIL.GenericParameter("T3", "System.Func`13").in(), new JSIL.GenericParameter("T4", "System.Func`13").in(), 
      new JSIL.GenericParameter("T5", "System.Func`13").in(), new JSIL.GenericParameter("T6", "System.Func`13").in(), 
      new JSIL.GenericParameter("T7", "System.Func`13").in(), new JSIL.GenericParameter("T8", "System.Func`13").in(), 
      new JSIL.GenericParameter("T9", "System.Func`13").in(), new JSIL.GenericParameter("T10", "System.Func`13").in(), 
      new JSIL.GenericParameter("T11", "System.Func`13").in(), new JSIL.GenericParameter("T12", "System.Func`13").in()
    ]));

/* delegate System.Func`14 */ 

JSIL.MakeDelegate("System.Func`14", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "in T13", "out TResult"
  ], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`14").out(), [
      new JSIL.GenericParameter("T1", "System.Func`14").in(), new JSIL.GenericParameter("T2", "System.Func`14").in(), 
      new JSIL.GenericParameter("T3", "System.Func`14").in(), new JSIL.GenericParameter("T4", "System.Func`14").in(), 
      new JSIL.GenericParameter("T5", "System.Func`14").in(), new JSIL.GenericParameter("T6", "System.Func`14").in(), 
      new JSIL.GenericParameter("T7", "System.Func`14").in(), new JSIL.GenericParameter("T8", "System.Func`14").in(), 
      new JSIL.GenericParameter("T9", "System.Func`14").in(), new JSIL.GenericParameter("T10", "System.Func`14").in(), 
      new JSIL.GenericParameter("T11", "System.Func`14").in(), new JSIL.GenericParameter("T12", "System.Func`14").in(), 
      new JSIL.GenericParameter("T13", "System.Func`14").in()
    ]));

/* delegate System.Func`15 */ 

JSIL.MakeDelegate("System.Func`15", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "in T13", "in T14", "out TResult"
  ], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`15").out(), [
      new JSIL.GenericParameter("T1", "System.Func`15").in(), new JSIL.GenericParameter("T2", "System.Func`15").in(), 
      new JSIL.GenericParameter("T3", "System.Func`15").in(), new JSIL.GenericParameter("T4", "System.Func`15").in(), 
      new JSIL.GenericParameter("T5", "System.Func`15").in(), new JSIL.GenericParameter("T6", "System.Func`15").in(), 
      new JSIL.GenericParameter("T7", "System.Func`15").in(), new JSIL.GenericParameter("T8", "System.Func`15").in(), 
      new JSIL.GenericParameter("T9", "System.Func`15").in(), new JSIL.GenericParameter("T10", "System.Func`15").in(), 
      new JSIL.GenericParameter("T11", "System.Func`15").in(), new JSIL.GenericParameter("T12", "System.Func`15").in(), 
      new JSIL.GenericParameter("T13", "System.Func`15").in(), new JSIL.GenericParameter("T14", "System.Func`15").in()
    ]));

/* delegate System.Func`16 */ 

JSIL.MakeDelegate("System.Func`16", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "in T13", "in T14", "in T15", "out TResult"
  ], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`16").out(), [
      new JSIL.GenericParameter("T1", "System.Func`16").in(), new JSIL.GenericParameter("T2", "System.Func`16").in(), 
      new JSIL.GenericParameter("T3", "System.Func`16").in(), new JSIL.GenericParameter("T4", "System.Func`16").in(), 
      new JSIL.GenericParameter("T5", "System.Func`16").in(), new JSIL.GenericParameter("T6", "System.Func`16").in(), 
      new JSIL.GenericParameter("T7", "System.Func`16").in(), new JSIL.GenericParameter("T8", "System.Func`16").in(), 
      new JSIL.GenericParameter("T9", "System.Func`16").in(), new JSIL.GenericParameter("T10", "System.Func`16").in(), 
      new JSIL.GenericParameter("T11", "System.Func`16").in(), new JSIL.GenericParameter("T12", "System.Func`16").in(), 
      new JSIL.GenericParameter("T13", "System.Func`16").in(), new JSIL.GenericParameter("T14", "System.Func`16").in(), 
      new JSIL.GenericParameter("T15", "System.Func`16").in()
    ]));

/* delegate System.Func`17 */ 

JSIL.MakeDelegate("System.Func`17", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "in T13", "in T14", "in T15", "in T16", 
    "out TResult"
  ], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`17").out(), [
      new JSIL.GenericParameter("T1", "System.Func`17").in(), new JSIL.GenericParameter("T2", "System.Func`17").in(), 
      new JSIL.GenericParameter("T3", "System.Func`17").in(), new JSIL.GenericParameter("T4", "System.Func`17").in(), 
      new JSIL.GenericParameter("T5", "System.Func`17").in(), new JSIL.GenericParameter("T6", "System.Func`17").in(), 
      new JSIL.GenericParameter("T7", "System.Func`17").in(), new JSIL.GenericParameter("T8", "System.Func`17").in(), 
      new JSIL.GenericParameter("T9", "System.Func`17").in(), new JSIL.GenericParameter("T10", "System.Func`17").in(), 
      new JSIL.GenericParameter("T11", "System.Func`17").in(), new JSIL.GenericParameter("T12", "System.Func`17").in(), 
      new JSIL.GenericParameter("T13", "System.Func`17").in(), new JSIL.GenericParameter("T14", "System.Func`17").in(), 
      new JSIL.GenericParameter("T15", "System.Func`17").in(), new JSIL.GenericParameter("T16", "System.Func`17").in()
    ]));

/* class System.LocalAppContext */ 

(function LocalAppContext$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.System.Boolean)) ();
  };



  function LocalAppContext_get_DisableCaching () {
    return $thisType.LocalAppContext$DisableCaching$value;
  }; 





  function LocalAppContext_set_DisableCaching (value) {
    $thisType.LocalAppContext$DisableCaching$value = value;
  }; 


  JSIL.MakeStaticClass("System.LocalAppContext", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "DefineSwitchDefault", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.Method({Static:true , Public:false}, "get_DisableCaching", 
      JSIL.MethodSignature.Return($.Boolean), 
      LocalAppContext_get_DisableCaching
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetCachedSwitchValue", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCachedSwitchValueInternal", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsSwitchEnabled", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSwitchEnabledLocal", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Method({Static:true , Public:false}, "set_DisableCaching", 
      JSIL.MethodSignature.Action($.Boolean), 
      LocalAppContext_set_DisableCaching
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetupDelegate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:false}, "TryGetSwitchFromCentralAppContext", $asm07.TypeRef("System.LocalAppContext+TryGetSwitchDelegate"));

    $.Field({Static:true , Public:false}, "s_canForwardCalls", $.Boolean);

    $.Field({Static:true , Public:false}, "s_switchMap", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Boolean]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_syncLock", $.Object);

    $.Field({Static:true , Public:false}, "LocalAppContext$DisableCaching$value", $.Boolean)
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:true , Public:false}, "DisableCaching", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.LocalAppContext+TryGetSwitchDelegate */ 

JSIL.MakeDelegate("System.LocalAppContext+TryGetSwitchDelegate", false, [], 
  new JSIL.MethodSignature($asm02.TypeRef("System.Boolean"), [$asm02.TypeRef("System.String"), $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Boolean")])]));

/* class System.SRDescriptionAttribute */ 

(function SRDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm05.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.SRDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.All]; });

})();

/* class System.SRCategoryAttribute */ 

(function SRCategoryAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm05.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "System.SRCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.All]; });

})();

/* class System.SR */ 

(function SR$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedNonNegNum", $.String, "ArgumentOutOfRange_NeedNonNegNum");

    $.Constant({Static:true , Public:false}, "Argument_WrongAsyncResult", $.String, "Argument_WrongAsyncResult");

    $.Constant({Static:true , Public:false}, "Argument_InvalidOffLen", $.String, "Argument_InvalidOffLen");

    $.Constant({Static:true , Public:false}, "Argument_NeedNonemptyPipeName", $.String, "Argument_NeedNonemptyPipeName");

    $.Constant({Static:true , Public:false}, "Argument_EmptyServerName", $.String, "Argument_EmptyServerName");

    $.Constant({Static:true , Public:false}, "Argument_NonContainerInvalidAnyFlag", $.String, "Argument_NonContainerInvalidAnyFlag");

    $.Constant({Static:true , Public:false}, "Argument_InvalidHandle", $.String, "Argument_InvalidHandle");

    $.Constant({Static:true , Public:false}, "ArgumentNull_Buffer", $.String, "ArgumentNull_Buffer");

    $.Constant({Static:true , Public:false}, "ArgumentNull_ServerName", $.String, "ArgumentNull_ServerName");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_AdditionalAccessLimited", $.String, "ArgumentOutOfRange_AdditionalAccessLimited");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_AnonymousReserved", $.String, "ArgumentOutOfRange_AnonymousReserved");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_TransmissionModeByteOrMsg", $.String, "ArgumentOutOfRange_TransmissionModeByteOrMsg");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_DirectionModeInOrOut", $.String, "ArgumentOutOfRange_DirectionModeInOrOut");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_DirectionModeInOutOrInOut", $.String, "ArgumentOutOfRange_DirectionModeInOutOrInOut");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_ImpersonationInvalid", $.String, "ArgumentOutOfRange_ImpersonationInvalid");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_ImpersonationOptionsInvalid", $.String, "ArgumentOutOfRange_ImpersonationOptionsInvalid");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_OptionsInvalid", $.String, "ArgumentOutOfRange_OptionsInvalid");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_HandleInheritabilityNoneOrInheritable", $.String, "ArgumentOutOfRange_HandleInheritabilityNoneOrInheritable");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_InvalidPipeAccessRights", $.String, "ArgumentOutOfRange_InvalidPipeAccessRights");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_InvalidTimeout", $.String, "ArgumentOutOfRange_InvalidTimeout");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_MaxNumServerInstances", $.String, "ArgumentOutOfRange_MaxNumServerInstances");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedValidPipeAccessRights", $.String, "ArgumentOutOfRange_NeedValidPipeAccessRights");

    $.Constant({Static:true , Public:false}, "IndexOutOfRange_IORaceCondition", $.String, "IndexOutOfRange_IORaceCondition");

    $.Constant({Static:true , Public:false}, "InvalidOperation_EndReadCalledMultiple", $.String, "InvalidOperation_EndReadCalledMultiple");

    $.Constant({Static:true , Public:false}, "InvalidOperation_EndWriteCalledMultiple", $.String, "InvalidOperation_EndWriteCalledMultiple");

    $.Constant({Static:true , Public:false}, "InvalidOperation_EndWaitForConnectionCalledMultiple", $.String, "InvalidOperation_EndWaitForConnectionCalledMultiple");

    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeNotYetConnected", $.String, "InvalidOperation_PipeNotYetConnected");

    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeDisconnected", $.String, "InvalidOperation_PipeDisconnected");

    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeHandleNotSet", $.String, "InvalidOperation_PipeHandleNotSet");

    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeNotAsync", $.String, "InvalidOperation_PipeNotAsync");

    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeReadModeNotMessage", $.String, "InvalidOperation_PipeReadModeNotMessage");

    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeMessageTypeNotSupported", $.String, "InvalidOperation_PipeMessageTypeNotSupported");

    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeAlreadyConnected", $.String, "InvalidOperation_PipeAlreadyConnected");

    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeAlreadyDisconnected", $.String, "InvalidOperation_PipeAlreadyDisconnected");

    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeClosed", $.String, "InvalidOperation_PipeClosed");

    $.Constant({Static:true , Public:false}, "IO_FileTooLongOrHandleNotSync", $.String, "IO_FileTooLongOrHandleNotSync");

    $.Constant({Static:true , Public:false}, "IO_EOF_ReadBeyondEOF", $.String, "IO_EOF_ReadBeyondEOF");

    $.Constant({Static:true , Public:false}, "IO_FileNotFound", $.String, "IO_FileNotFound");

    $.Constant({Static:true , Public:false}, "IO_FileNotFound_FileName", $.String, "IO_FileNotFound_FileName");

    $.Constant({Static:true , Public:false}, "IO_IO_AlreadyExists_Name", $.String, "IO_IO_AlreadyExists_Name");

    $.Constant({Static:true , Public:false}, "IO_IO_BindHandleFailed", $.String, "IO_IO_BindHandleFailed");

    $.Constant({Static:true , Public:false}, "IO_IO_FileExists_Name", $.String, "IO_IO_FileExists_Name");

    $.Constant({Static:true , Public:false}, "IO_IO_NoPermissionToDirectoryName", $.String, "IO_IO_NoPermissionToDirectoryName");

    $.Constant({Static:true , Public:false}, "IO_IO_SharingViolation_File", $.String, "IO_IO_SharingViolation_File");

    $.Constant({Static:true , Public:false}, "IO_IO_SharingViolation_NoFileName", $.String, "IO_IO_SharingViolation_NoFileName");

    $.Constant({Static:true , Public:false}, "IO_IO_PipeBroken", $.String, "IO_IO_PipeBroken");

    $.Constant({Static:true , Public:false}, "IO_IO_InvalidPipeHandle", $.String, "IO_IO_InvalidPipeHandle");

    $.Constant({Static:true , Public:false}, "IO_OperationAborted", $.String, "IO_OperationAborted");

    $.Constant({Static:true , Public:false}, "IO_DriveNotFound_Drive", $.String, "IO_DriveNotFound_Drive");

    $.Constant({Static:true , Public:false}, "IO_PathNotFound_Path", $.String, "IO_PathNotFound_Path");

    $.Constant({Static:true , Public:false}, "IO_PathNotFound_NoPathName", $.String, "IO_PathNotFound_NoPathName");

    $.Constant({Static:true , Public:false}, "IO_PathTooLong", $.String, "IO_PathTooLong");

    $.Constant({Static:true , Public:false}, "NotSupported_IONonFileDevices", $.String, "NotSupported_IONonFileDevices");

    $.Constant({Static:true , Public:false}, "NotSupported_MemStreamNotExpandable", $.String, "NotSupported_MemStreamNotExpandable");

    $.Constant({Static:true , Public:false}, "NotSupported_UnreadableStream", $.String, "NotSupported_UnreadableStream");

    $.Constant({Static:true , Public:false}, "NotSupported_UnseekableStream", $.String, "NotSupported_UnseekableStream");

    $.Constant({Static:true , Public:false}, "NotSupported_UnwritableStream", $.String, "NotSupported_UnwritableStream");

    $.Constant({Static:true , Public:false}, "NotSupported_AnonymousPipeUnidirectional", $.String, "NotSupported_AnonymousPipeUnidirectional");

    $.Constant({Static:true , Public:false}, "NotSupported_AnonymousPipeMessagesNotSupported", $.String, "NotSupported_AnonymousPipeMessagesNotSupported");

    $.Constant({Static:true , Public:false}, "ObjectDisposed_FileClosed", $.String, "ObjectDisposed_FileClosed");

    $.Constant({Static:true , Public:false}, "ObjectDisposed_PipeClosed", $.String, "ObjectDisposed_PipeClosed");

    $.Constant({Static:true , Public:false}, "ObjectDisposed_ReaderClosed", $.String, "ObjectDisposed_ReaderClosed");

    $.Constant({Static:true , Public:false}, "ObjectDisposed_StreamClosed", $.String, "ObjectDisposed_StreamClosed");

    $.Constant({Static:true , Public:false}, "ObjectDisposed_WriterClosed", $.String, "ObjectDisposed_WriterClosed");

    $.Constant({Static:true , Public:false}, "PlatformNotSupported_NamedPipeServers", $.String, "PlatformNotSupported_NamedPipeServers");

    $.Constant({Static:true , Public:false}, "UnauthorizedAccess_IODenied_Path", $.String, "UnauthorizedAccess_IODenied_Path");

    $.Constant({Static:true , Public:false}, "UnauthorizedAccess_IODenied_NoPathName", $.String, "UnauthorizedAccess_IODenied_NoPathName");

    $.Constant({Static:true , Public:false}, "TraceAsTraceSource", $.String, "TraceAsTraceSource");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedValidLogRetention", $.String, "ArgumentOutOfRange_NeedValidLogRetention");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedMaxFileSizeGEBufferSize", $.String, "ArgumentOutOfRange_NeedMaxFileSizeGEBufferSize");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedValidMaxNumFiles", $.String, "ArgumentOutOfRange_NeedValidMaxNumFiles");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedValidId", $.String, "ArgumentOutOfRange_NeedValidId");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_MaxArgExceeded", $.String, "ArgumentOutOfRange_MaxArgExceeded");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_MaxStringsExceeded", $.String, "ArgumentOutOfRange_MaxStringsExceeded");

    $.Constant({Static:true , Public:false}, "NotSupported_DownLevelVista", $.String, "NotSupported_DownLevelVista");

    $.Constant({Static:true , Public:false}, "Argument_NeedNonemptyDelimiter", $.String, "Argument_NeedNonemptyDelimiter");

    $.Constant({Static:true , Public:false}, "NotSupported_SetTextWriter", $.String, "NotSupported_SetTextWriter");

    $.Constant({Static:true , Public:false}, "Perflib_PlatformNotSupported", $.String, "Perflib_PlatformNotSupported");

    $.Constant({Static:true , Public:false}, "Perflib_Argument_CounterSetAlreadyRegister", $.String, "Perflib_Argument_CounterSetAlreadyRegister");

    $.Constant({Static:true , Public:false}, "Perflib_Argument_InvalidCounterType", $.String, "Perflib_Argument_InvalidCounterType");

    $.Constant({Static:true , Public:false}, "Perflib_Argument_InvalidCounterSetInstanceType", $.String, "Perflib_Argument_InvalidCounterSetInstanceType");

    $.Constant({Static:true , Public:false}, "Perflib_Argument_InstanceAlreadyExists", $.String, "Perflib_Argument_InstanceAlreadyExists");

    $.Constant({Static:true , Public:false}, "Perflib_Argument_CounterAlreadyExists", $.String, "Perflib_Argument_CounterAlreadyExists");

    $.Constant({Static:true , Public:false}, "Perflib_Argument_CounterNameAlreadyExists", $.String, "Perflib_Argument_CounterNameAlreadyExists");

    $.Constant({Static:true , Public:false}, "Perflib_Argument_ProviderNotFound", $.String, "Perflib_Argument_ProviderNotFound");

    $.Constant({Static:true , Public:false}, "Perflib_Argument_InvalidInstance", $.String, "Perflib_Argument_InvalidInstance");

    $.Constant({Static:true , Public:false}, "Perflib_Argument_EmptyInstanceName", $.String, "Perflib_Argument_EmptyInstanceName");

    $.Constant({Static:true , Public:false}, "Perflib_Argument_EmptyCounterName", $.String, "Perflib_Argument_EmptyCounterName");

    $.Constant({Static:true , Public:false}, "Perflib_InsufficientMemory_InstanceCounterBlock", $.String, "Perflib_InsufficientMemory_InstanceCounterBlock");

    $.Constant({Static:true , Public:false}, "Perflib_InsufficientMemory_CounterSetTemplate", $.String, "Perflib_InsufficientMemory_CounterSetTemplate");

    $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_CounterRefValue", $.String, "Perflib_InvalidOperation_CounterRefValue");

    $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_CounterSetNotInstalled", $.String, "Perflib_InvalidOperation_CounterSetNotInstalled");

    $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_InstanceNotFound", $.String, "Perflib_InvalidOperation_InstanceNotFound");

    $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_AddCounterAfterInstance", $.String, "Perflib_InvalidOperation_AddCounterAfterInstance");

    $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_NoActiveProvider", $.String, "Perflib_InvalidOperation_NoActiveProvider");

    $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_CounterSetContainsNoCounter", $.String, "Perflib_InvalidOperation_CounterSetContainsNoCounter");

    $.Constant({Static:true , Public:false}, "Arg_ArrayPlusOffTooSmall", $.String, "Arg_ArrayPlusOffTooSmall");

    $.Constant({Static:true , Public:false}, "Arg_HSCapacityOverflow", $.String, "Arg_HSCapacityOverflow");

    $.Constant({Static:true , Public:false}, "InvalidOperation_EnumFailedVersion", $.String, "InvalidOperation_EnumFailedVersion");

    $.Constant({Static:true , Public:false}, "InvalidOperation_EnumOpCantHappen", $.String, "InvalidOperation_EnumOpCantHappen");

    $.Constant({Static:true , Public:false}, "Serialization_MissingKeys", $.String, "Serialization_MissingKeys");

    $.Constant({Static:true , Public:false}, "LockRecursionException_RecursiveReadNotAllowed", $.String, "LockRecursionException_RecursiveReadNotAllowed");

    $.Constant({Static:true , Public:false}, "LockRecursionException_RecursiveWriteNotAllowed", $.String, "LockRecursionException_RecursiveWriteNotAllowed");

    $.Constant({Static:true , Public:false}, "LockRecursionException_RecursiveUpgradeNotAllowed", $.String, "LockRecursionException_RecursiveUpgradeNotAllowed");

    $.Constant({Static:true , Public:false}, "LockRecursionException_ReadAfterWriteNotAllowed", $.String, "LockRecursionException_ReadAfterWriteNotAllowed");

    $.Constant({Static:true , Public:false}, "LockRecursionException_WriteAfterReadNotAllowed", $.String, "LockRecursionException_WriteAfterReadNotAllowed");

    $.Constant({Static:true , Public:false}, "LockRecursionException_UpgradeAfterReadNotAllowed", $.String, "LockRecursionException_UpgradeAfterReadNotAllowed");

    $.Constant({Static:true , Public:false}, "LockRecursionException_UpgradeAfterWriteNotAllowed", $.String, "LockRecursionException_UpgradeAfterWriteNotAllowed");

    $.Constant({Static:true , Public:false}, "SynchronizationLockException_MisMatchedRead", $.String, "SynchronizationLockException_MisMatchedRead");

    $.Constant({Static:true , Public:false}, "SynchronizationLockException_MisMatchedWrite", $.String, "SynchronizationLockException_MisMatchedWrite");

    $.Constant({Static:true , Public:false}, "SynchronizationLockException_MisMatchedUpgrade", $.String, "SynchronizationLockException_MisMatchedUpgrade");

    $.Constant({Static:true , Public:false}, "SynchronizationLockException_IncorrectDispose", $.String, "SynchronizationLockException_IncorrectDispose");

    $.Constant({Static:true , Public:false}, "Cryptography_ArgECDHKeySizeMismatch", $.String, "Cryptography_ArgECDHKeySizeMismatch");

    $.Constant({Static:true , Public:false}, "Cryptography_ArgECDHRequiresECDHKey", $.String, "Cryptography_ArgECDHRequiresECDHKey");

    $.Constant({Static:true , Public:false}, "Cryptography_ArgECDsaRequiresECDsaKey", $.String, "Cryptography_ArgECDsaRequiresECDsaKey");

    $.Constant({Static:true , Public:false}, "Cryptography_ArgExpectedECDiffieHellmanCngPublicKey", $.String, "Cryptography_ArgExpectedECDiffieHellmanCngPublicKey");

    $.Constant({Static:true , Public:false}, "Cryptography_ArgMustBeCngAlgorithm", $.String, "Cryptography_ArgMustBeCngAlgorithm");

    $.Constant({Static:true , Public:false}, "Cryptography_ArgMustBeCngAlgorithmGroup", $.String, "Cryptography_ArgMustBeCngAlgorithmGroup");

    $.Constant({Static:true , Public:false}, "Cryptography_ArgMustBeCngKeyBlobFormat", $.String, "Cryptography_ArgMustBeCngKeyBlobFormat");

    $.Constant({Static:true , Public:false}, "Cryptography_ArgMustBeCngProvider", $.String, "Cryptography_ArgMustBeCngProvider");

    $.Constant({Static:true , Public:false}, "Cryptography_DecryptWithNoKey", $.String, "Cryptography_DecryptWithNoKey");

    $.Constant({Static:true , Public:false}, "Cryptography_ECXmlSerializationFormatRequired", $.String, "Cryptography_ECXmlSerializationFormatRequired");

    $.Constant({Static:true , Public:false}, "Cryptography_InvalidAlgorithmGroup", $.String, "Cryptography_InvalidAlgorithmGroup");

    $.Constant({Static:true , Public:false}, "Cryptography_InvalidAlgorithmName", $.String, "Cryptography_InvalidAlgorithmName");

    $.Constant({Static:true , Public:false}, "Cryptography_InvalidCipherMode", $.String, "Cryptography_InvalidCipherMode");

    $.Constant({Static:true , Public:false}, "Cryptography_InvalidIVSize", $.String, "Cryptography_InvalidIVSize");

    $.Constant({Static:true , Public:false}, "Cryptography_InvalidKeyBlobFormat", $.String, "Cryptography_InvalidKeyBlobFormat");

    $.Constant({Static:true , Public:false}, "Cryptography_InvalidKeySize", $.String, "Cryptography_InvalidKeySize");

    $.Constant({Static:true , Public:false}, "Cryptography_InvalidPadding", $.String, "Cryptography_InvalidPadding");

    $.Constant({Static:true , Public:false}, "Cryptography_InvalidProviderName", $.String, "Cryptography_InvalidProviderName");

    $.Constant({Static:true , Public:false}, "Cryptography_MissingDomainParameters", $.String, "Cryptography_MissingDomainParameters");

    $.Constant({Static:true , Public:false}, "Cryptography_MissingPublicKey", $.String, "Cryptography_MissingPublicKey");

    $.Constant({Static:true , Public:false}, "Cryptography_MissingIV", $.String, "Cryptography_MissingIV");

    $.Constant({Static:true , Public:false}, "Cryptography_MustTransformWholeBlock", $.String, "Cryptography_MustTransformWholeBlock");

    $.Constant({Static:true , Public:false}, "Cryptography_NonCompliantFIPSAlgorithm", $.String, "Cryptography_NonCompliantFIPSAlgorithm");

    $.Constant({Static:true , Public:false}, "Cryptography_OpenInvalidHandle", $.String, "Cryptography_OpenInvalidHandle");

    $.Constant({Static:true , Public:false}, "Cryptography_OpenEphemeralKeyHandleWithoutEphemeralFlag", $.String, "Cryptography_OpenEphemeralKeyHandleWithoutEphemeralFlag");

    $.Constant({Static:true , Public:false}, "Cryptography_PartialBlock", $.String, "Cryptography_PartialBlock");

    $.Constant({Static:true , Public:false}, "Cryptography_PlatformNotSupported", $.String, "Cryptography_PlatformNotSupported");

    $.Constant({Static:true , Public:false}, "Cryptography_TlsRequiresLabelAndSeed", $.String, "Cryptography_TlsRequiresLabelAndSeed");

    $.Constant({Static:true , Public:false}, "Cryptography_TransformBeyondEndOfBuffer", $.String, "Cryptography_TransformBeyondEndOfBuffer");

    $.Constant({Static:true , Public:false}, "Cryptography_UnknownEllipticCurve", $.String, "Cryptography_UnknownEllipticCurve");

    $.Constant({Static:true , Public:false}, "Cryptography_UnknownEllipticCurveAlgorithm", $.String, "Cryptography_UnknownEllipticCurveAlgorithm");

    $.Constant({Static:true , Public:false}, "Cryptography_UnknownPaddingMode", $.String, "Cryptography_UnknownPaddingMode");

    $.Constant({Static:true , Public:false}, "Cryptography_UnexpectedXmlNamespace", $.String, "Cryptography_UnexpectedXmlNamespace");

    $.Constant({Static:true , Public:false}, "ArgumentException_RangeMinRangeMaxRangeType", $.String, "ArgumentException_RangeMinRangeMaxRangeType");

    $.Constant({Static:true , Public:false}, "ArgumentException_RangeNotIComparable", $.String, "ArgumentException_RangeNotIComparable");

    $.Constant({Static:true , Public:false}, "ArgumentException_RangeMaxRangeSmallerThanMinRange", $.String, "ArgumentException_RangeMaxRangeSmallerThanMinRange");

    $.Constant({Static:true , Public:false}, "ArgumentException_CountMaxLengthSmallerThanMinLength", $.String, "ArgumentException_CountMaxLengthSmallerThanMinLength");

    $.Constant({Static:true , Public:false}, "ArgumentException_LengthMaxLengthSmallerThanMinLength", $.String, "ArgumentException_LengthMaxLengthSmallerThanMinLength");

    $.Constant({Static:true , Public:false}, "ArgumentException_UnregisteredParameterName", $.String, "ArgumentException_UnregisteredParameterName");

    $.Constant({Static:true , Public:false}, "ArgumentException_InvalidParameterName", $.String, "ArgumentException_InvalidParameterName");

    $.Constant({Static:true , Public:false}, "ArgumentException_DuplicateName", $.String, "ArgumentException_DuplicateName");

    $.Constant({Static:true , Public:false}, "ArgumentException_DuplicatePosition", $.String, "ArgumentException_DuplicatePosition");

    $.Constant({Static:true , Public:false}, "ArgumentException_NoParametersFound", $.String, "ArgumentException_NoParametersFound");

    $.Constant({Static:true , Public:false}, "ArgumentException_HelpMessageBaseNameNullOrEmpty", $.String, "ArgumentException_HelpMessageBaseNameNullOrEmpty");

    $.Constant({Static:true , Public:false}, "ArgumentException_HelpMessageResourceIdNullOrEmpty", $.String, "ArgumentException_HelpMessageResourceIdNullOrEmpty");

    $.Constant({Static:true , Public:false}, "ArgumentException_HelpMessageNullOrEmpty", $.String, "ArgumentException_HelpMessageNullOrEmpty");

    $.Constant({Static:true , Public:false}, "ArgumentException_RegexPatternNullOrEmpty", $.String, "ArgumentException_RegexPatternNullOrEmpty");

    $.Constant({Static:true , Public:false}, "ArgumentException_RequiredPositionalAfterOptionalPositional", $.String, "ArgumentException_RequiredPositionalAfterOptionalPositional");

    $.Constant({Static:true , Public:false}, "ArgumentException_DuplicateParameterAttribute", $.String, "ArgumentException_DuplicateParameterAttribute");

    $.Constant({Static:true , Public:false}, "ArgumentException_MissingBaseNameOrResourceId", $.String, "ArgumentException_MissingBaseNameOrResourceId");

    $.Constant({Static:true , Public:false}, "ArgumentException_DuplicateRemainingArgumets", $.String, "ArgumentException_DuplicateRemainingArgumets");

    $.Constant({Static:true , Public:false}, "ArgumentException_TypeMismatchForRemainingArguments", $.String, "ArgumentException_TypeMismatchForRemainingArguments");

    $.Constant({Static:true , Public:false}, "ArgumentException_ValidationParameterTypeMismatch", $.String, "ArgumentException_ValidationParameterTypeMismatch");

    $.Constant({Static:true , Public:false}, "ArgumentException_ParserBuiltWithValueType", $.String, "ArgumentException_ParserBuiltWithValueType");

    $.Constant({Static:true , Public:false}, "InvalidOperationException_GetParameterTypeMismatch", $.String, "InvalidOperationException_GetParameterTypeMismatch");

    $.Constant({Static:true , Public:false}, "InvalidOperationException_GetParameterValueBeforeParse", $.String, "InvalidOperationException_GetParameterValueBeforeParse");

    $.Constant({Static:true , Public:false}, "InvalidOperationException_SetRemainingArgumentsParameterAfterParse", $.String, "InvalidOperationException_SetRemainingArgumentsParameterAfterParse");

    $.Constant({Static:true , Public:false}, "InvalidOperationException_AddParameterAfterParse", $.String, "InvalidOperationException_AddParameterAfterParse");

    $.Constant({Static:true , Public:false}, "InvalidOperationException_BindAfterBind", $.String, "InvalidOperationException_BindAfterBind");

    $.Constant({Static:true , Public:false}, "InvalidOperationException_GetRemainingArgumentsNotAllowed", $.String, "InvalidOperationException_GetRemainingArgumentsNotAllowed");

    $.Constant({Static:true , Public:false}, "InvalidOperationException_ParameterSetBeforeParse", $.String, "InvalidOperationException_ParameterSetBeforeParse");

    $.Constant({Static:true , Public:false}, "CommandLineParser_Aliases", $.String, "CommandLineParser_Aliases");

    $.Constant({Static:true , Public:false}, "CommandLineParser_ErrorMessagePrefix", $.String, "CommandLineParser_ErrorMessagePrefix");

    $.Constant({Static:true , Public:false}, "CommandLineParser_HelpMessagePrefix", $.String, "CommandLineParser_HelpMessagePrefix");

    $.Constant({Static:true , Public:false}, "ParameterBindingException_AmbiguousParameterName", $.String, "ParameterBindingException_AmbiguousParameterName");

    $.Constant({Static:true , Public:false}, "ParameterBindingException_ParameterValueAlreadySpecified", $.String, "ParameterBindingException_ParameterValueAlreadySpecified");

    $.Constant({Static:true , Public:false}, "ParameterBindingException_UnknownParameteName", $.String, "ParameterBindingException_UnknownParameteName");

    $.Constant({Static:true , Public:false}, "ParameterBindingException_RequiredParameterMissingCommandLineValue", $.String, "ParameterBindingException_RequiredParameterMissingCommandLineValue");

    $.Constant({Static:true , Public:false}, "ParameterBindingException_UnboundCommandLineArguments", $.String, "ParameterBindingException_UnboundCommandLineArguments");

    $.Constant({Static:true , Public:false}, "ParameterBindingException_UnboundMandatoryParameter", $.String, "ParameterBindingException_UnboundMandatoryParameter");

    $.Constant({Static:true , Public:false}, "ParameterBindingException_ResponseFileException", $.String, "ParameterBindingException_ResponseFileException");

    $.Constant({Static:true , Public:false}, "ParameterBindingException_ValididationError", $.String, "ParameterBindingException_ValididationError");

    $.Constant({Static:true , Public:false}, "ParameterBindingException_TransformationError", $.String, "ParameterBindingException_TransformationError");

    $.Constant({Static:true , Public:false}, "ParameterBindingException_AmbiguousParameterSet", $.String, "ParameterBindingException_AmbiguousParameterSet");

    $.Constant({Static:true , Public:false}, "ParameterBindingException_UnknownParameterSet", $.String, "ParameterBindingException_UnknownParameterSet");

    $.Constant({Static:true , Public:false}, "ParameterBindingException_NestedResponseFiles", $.String, "ParameterBindingException_NestedResponseFiles");

    $.Constant({Static:true , Public:false}, "ValidateMetadataException_RangeGreaterThanMaxRangeFailure", $.String, "ValidateMetadataException_RangeGreaterThanMaxRangeFailure");

    $.Constant({Static:true , Public:false}, "ValidateMetadataException_RangeSmallerThanMinRangeFailure", $.String, "ValidateMetadataException_RangeSmallerThanMinRangeFailure");

    $.Constant({Static:true , Public:false}, "ValidateMetadataException_PatternFailure", $.String, "ValidateMetadataException_PatternFailure");

    $.Constant({Static:true , Public:false}, "ValidateMetadataException_CountMinLengthFailure", $.String, "ValidateMetadataException_CountMinLengthFailure");

    $.Constant({Static:true , Public:false}, "ValidateMetadataException_CountMaxLengthFailure", $.String, "ValidateMetadataException_CountMaxLengthFailure");

    $.Constant({Static:true , Public:false}, "ValidateMetadataException_LengthMinLengthFailure", $.String, "ValidateMetadataException_LengthMinLengthFailure");

    $.Constant({Static:true , Public:false}, "ValidateMetadataException_LengthMaxLengthFailure", $.String, "ValidateMetadataException_LengthMaxLengthFailure");

    $.Constant({Static:true , Public:false}, "Argument_MapNameEmptyString", $.String, "Argument_MapNameEmptyString");

    $.Constant({Static:true , Public:false}, "Argument_EmptyFile", $.String, "Argument_EmptyFile");

    $.Constant({Static:true , Public:false}, "Argument_NewMMFWriteAccessNotAllowed", $.String, "Argument_NewMMFWriteAccessNotAllowed");

    $.Constant({Static:true , Public:false}, "Argument_ReadAccessWithLargeCapacity", $.String, "Argument_ReadAccessWithLargeCapacity");

    $.Constant({Static:true , Public:false}, "Argument_NewMMFAppendModeNotAllowed", $.String, "Argument_NewMMFAppendModeNotAllowed");

    $.Constant({Static:true , Public:false}, "ArgumentNull_MapName", $.String, "ArgumentNull_MapName");

    $.Constant({Static:true , Public:false}, "ArgumentNull_FileStream", $.String, "ArgumentNull_FileStream");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_CapacityLargerThanLogicalAddressSpaceNotAllowed", $.String, "ArgumentOutOfRange_CapacityLargerThanLogicalAddressSpaceNotAllowed");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedPositiveNumber", $.String, "ArgumentOutOfRange_NeedPositiveNumber");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_PositiveOrDefaultCapacityRequired", $.String, "ArgumentOutOfRange_PositiveOrDefaultCapacityRequired");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_PositiveOrDefaultSizeRequired", $.String, "ArgumentOutOfRange_PositiveOrDefaultSizeRequired");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_PositionLessThanCapacityRequired", $.String, "ArgumentOutOfRange_PositionLessThanCapacityRequired");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_CapacityGEFileSizeRequired", $.String, "ArgumentOutOfRange_CapacityGEFileSizeRequired");

    $.Constant({Static:true , Public:false}, "IO_NotEnoughMemory", $.String, "IO_NotEnoughMemory");

    $.Constant({Static:true , Public:false}, "InvalidOperation_CalledTwice", $.String, "InvalidOperation_CalledTwice");

    $.Constant({Static:true , Public:false}, "InvalidOperation_CantCreateFileMapping", $.String, "InvalidOperation_CantCreateFileMapping");

    $.Constant({Static:true , Public:false}, "InvalidOperation_ViewIsNull", $.String, "InvalidOperation_ViewIsNull");

    $.Constant({Static:true , Public:false}, "NotSupported_DelayAllocateFileBackedNotAllowed", $.String, "NotSupported_DelayAllocateFileBackedNotAllowed");

    $.Constant({Static:true , Public:false}, "NotSupported_MMViewStreamsFixedLength", $.String, "NotSupported_MMViewStreamsFixedLength");

    $.Constant({Static:true , Public:false}, "ObjectDisposed_ViewAccessorClosed", $.String, "ObjectDisposed_ViewAccessorClosed");

    $.Constant({Static:true , Public:false}, "ObjectDisposed_StreamIsClosed", $.String, "ObjectDisposed_StreamIsClosed");

    $.Constant({Static:true , Public:false}, "NotSupported_Method", $.String, "NotSupported_Method");

    $.Constant({Static:true , Public:false}, "NotSupported_SubclassOverride", $.String, "NotSupported_SubclassOverride");

    $.Constant({Static:true , Public:false}, "Cryptography_ArgDSARequiresDSAKey", $.String, "Cryptography_ArgDSARequiresDSAKey");

    $.Constant({Static:true , Public:false}, "Cryptography_ArgRSAaRequiresRSAKey", $.String, "Cryptography_ArgRSAaRequiresRSAKey");

    $.Constant({Static:true , Public:false}, "Cryptography_CngKeyWrongAlgorithm", $.String, "Cryptography_CngKeyWrongAlgorithm");

    $.Constant({Static:true , Public:false}, "Cryptography_DSA_HashTooShort", $.String, "Cryptography_DSA_HashTooShort");

    $.Constant({Static:true , Public:false}, "Cryptography_HashAlgorithmNameNullOrEmpty", $.String, "Cryptography_HashAlgorithmNameNullOrEmpty");

    $.Constant({Static:true , Public:false}, "Cryptography_InvalidDsaParameters_MissingFields", $.String, "Cryptography_InvalidDsaParameters_MissingFields");

    $.Constant({Static:true , Public:false}, "Cryptography_InvalidDsaParameters_MismatchedPGY", $.String, "Cryptography_InvalidDsaParameters_MismatchedPGY");

    $.Constant({Static:true , Public:false}, "Cryptography_InvalidDsaParameters_MismatchedQX", $.String, "Cryptography_InvalidDsaParameters_MismatchedQX");

    $.Constant({Static:true , Public:false}, "Cryptography_InvalidDsaParameters_MismatchedPJ", $.String, "Cryptography_InvalidDsaParameters_MismatchedPJ");

    $.Constant({Static:true , Public:false}, "Cryptography_InvalidDsaParameters_SeedRestriction_ShortKey", $.String, "Cryptography_InvalidDsaParameters_SeedRestriction_ShortKey");

    $.Constant({Static:true , Public:false}, "Cryptography_InvalidDsaParameters_QRestriction_ShortKey", $.String, "Cryptography_InvalidDsaParameters_QRestriction_ShortKey");

    $.Constant({Static:true , Public:false}, "Cryptography_InvalidDsaParameters_QRestriction_LargeKey", $.String, "Cryptography_InvalidDsaParameters_QRestriction_LargeKey");

    $.Constant({Static:true , Public:false}, "Cryptography_InvalidRsaParameters", $.String, "Cryptography_InvalidRsaParameters");

    $.Constant({Static:true , Public:false}, "Cryptography_InvalidSignatureAlgorithm", $.String, "Cryptography_InvalidSignatureAlgorithm");

    $.Constant({Static:true , Public:false}, "Cryptography_KeyBlobParsingError", $.String, "Cryptography_KeyBlobParsingError");

    $.Constant({Static:true , Public:false}, "Cryptography_NotSupportedKeyAlgorithm", $.String, "Cryptography_NotSupportedKeyAlgorithm");

    $.Constant({Static:true , Public:false}, "Cryptography_NotValidPublicOrPrivateKey", $.String, "Cryptography_NotValidPublicOrPrivateKey");

    $.Constant({Static:true , Public:false}, "Cryptography_NotValidPrivateKey", $.String, "Cryptography_NotValidPrivateKey");

    $.Constant({Static:true , Public:false}, "Cryptography_UnexpectedTransformTruncation", $.String, "Cryptography_UnexpectedTransformTruncation");

    $.Constant({Static:true , Public:false}, "Cryptography_UnsupportedPaddingMode", $.String, "Cryptography_UnsupportedPaddingMode");

    $.Constant({Static:true , Public:false}, "Cryptography_WeakKey", $.String, "Cryptography_WeakKey");

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm02.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm02.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm02.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Threading");
/* enum System.Threading.LockRecursionPolicy */ 

JSIL.MakeEnum(
  {
    FullName: "System.Threading.LockRecursionPolicy", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    NoRecursion: 0, 
    SupportsRecursion: 1, 
  }
);

/* class System.Threading.ReaderWriterCount */ 

(function ReaderWriterCount$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Threading.ReaderWriterCount", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "lockID", $.Int64);

    $.Field({Static:false, Public:true }, "readercount", $.Int32);

    $.Field({Static:false, Public:true }, "writercount", $.Int32);

    $.Field({Static:false, Public:true }, "upgradecount", $.Int32);

    $.Field({Static:false, Public:true }, "next", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Threading.ReaderWriterLockSlim */ 

(function ReaderWriterLockSlim$Members () {
  var $, $thisType;






















































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Threading.ReaderWriterLockSlim", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.LockRecursionPolicy"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ClearUpgraderWaiting", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearWriterAcquired", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearWritersWaiting", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "EnterMyLock", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnterMyLockSpin", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "EnterReadLock", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "EnterUpgradeableReadLock", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "EnterWriteLock", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ExitAndWakeUpAppropriateWaiters", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitAndWakeUpAppropriateWaitersPreferringWriters", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitMyLock", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ExitReadLock", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ExitUpgradeableReadLock", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ExitWriteLock", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentReadCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsReadLockHeld", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsUpgradeableReadLockHeld", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsWriteLockHeld", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_RecursionPolicy", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.LockRecursionPolicy"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_RecursiveReadCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_RecursiveUpgradeCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_RecursiveWriteCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_WaitingReadCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_WaitingUpgradeCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_WaitingWriteCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetNumReaders", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetThreadRWCount", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.ReaderWriterCount"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeThreadCounts", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "IsRWEntryEmpty", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Threading.ReaderWriterCount")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsRwHashEntryChanged", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Threading.ReaderWriterCount")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsWriterAcquired", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "LazyCreateEvent", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Threading.EventWaitHandle")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetUpgraderWaiting", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetWriterAcquired", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetWritersWaiting", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "SpinWait", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnterReadLock", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.TimeSpan")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "TryEnterReadLock", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "TryEnterReadLock", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Threading.ReaderWriterLockSlim+TimeoutTracker")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryEnterReadLockCore", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Threading.ReaderWriterLockSlim+TimeoutTracker")])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnterUpgradeableReadLock", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.TimeSpan")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "TryEnterUpgradeableReadLock", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "TryEnterUpgradeableReadLock", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Threading.ReaderWriterLockSlim+TimeoutTracker")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryEnterUpgradeableReadLockCore", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Threading.ReaderWriterLockSlim+TimeoutTracker")])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnterWriteLock", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.TimeSpan")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "TryEnterWriteLock", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "TryEnterWriteLock", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Threading.ReaderWriterLockSlim+TimeoutTracker")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryEnterWriteLockCore", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Threading.ReaderWriterLockSlim+TimeoutTracker")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WaitOnEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Threading.EventWaitHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $asm07.TypeRef("System.Threading.ReaderWriterLockSlim+TimeoutTracker")
        ])
    );

    $.Field({Static:false, Public:false}, "fIsReentrant", $.Boolean);

    $.Field({Static:false, Public:false}, "myLock", $.Int32);

    $.Constant({Static:true , Public:false}, "LockSpinCycles", $.Int32, 20);

    $.Constant({Static:true , Public:false}, "LockSpinCount", $.Int32, 10);

    $.Constant({Static:true , Public:false}, "LockSleep0Count", $.Int32, 5);

    $.Field({Static:false, Public:false}, "numWriteWaiters", $.UInt32);

    $.Field({Static:false, Public:false}, "numReadWaiters", $.UInt32);

    $.Field({Static:false, Public:false}, "numWriteUpgradeWaiters", $.UInt32);

    $.Field({Static:false, Public:false}, "numUpgradeWaiters", $.UInt32);

    $.Field({Static:false, Public:false}, "fNoWaiters", $.Boolean);

    $.Field({Static:false, Public:false}, "upgradeLockOwnerId", $.Int32);

    $.Field({Static:false, Public:false}, "writeLockOwnerId", $.Int32);

    $.Field({Static:false, Public:false}, "writeEvent", $asm02.TypeRef("System.Threading.EventWaitHandle"));

    $.Field({Static:false, Public:false}, "readEvent", $asm02.TypeRef("System.Threading.EventWaitHandle"));

    $.Field({Static:false, Public:false}, "upgradeEvent", $asm02.TypeRef("System.Threading.EventWaitHandle"));

    $.Field({Static:false, Public:false}, "waitUpgradeEvent", $asm02.TypeRef("System.Threading.EventWaitHandle"));

    $.Field({Static:true , Public:false}, "s_nextLockID", $.Int64);

    $.Field({Static:false, Public:false}, "lockID", $.Int64);

    $.Field({Static:true , Public:false}, "t_rwc", $asm07.TypeRef("System.Threading.ReaderWriterCount"))
      .Attribute($asm02.TypeRef("System.ThreadStaticAttribute"));

    $.Field({Static:false, Public:false}, "fUpgradeThreadHoldingRead", $.Boolean);

    $.Constant({Static:true , Public:false}, "MaxSpinCount", $.Int32, 20);

    $.Field({Static:false, Public:false}, "owners", $.UInt32);

    $.Constant({Static:true , Public:false}, "WRITER_HELD", $.UInt32, 2147483648);

    $.Constant({Static:true , Public:false}, "WAITING_WRITERS", $.UInt32, 1073741824);

    $.Constant({Static:true , Public:false}, "WAITING_UPGRADER", $.UInt32, 536870912);

    $.Constant({Static:true , Public:false}, "MAX_READER", $.UInt32, 268435454);

    $.Constant({Static:true , Public:false}, "READER_MASK", $.UInt32, 268435455);

    $.Field({Static:false, Public:false}, "fDisposed", $.Boolean);

    $.Property({Static:false, Public:true }, "IsReadLockHeld", $.Boolean)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsUpgradeableReadLockHeld", $.Boolean)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsWriteLockHeld", $.Boolean)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "RecursionPolicy", $asm07.TypeRef("System.Threading.LockRecursionPolicy"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "CurrentReadCount", $.Int32)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "RecursiveReadCount", $.Int32)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "RecursiveUpgradeCount", $.Int32)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "RecursiveWriteCount", $.Int32)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "WaitingReadCount", $.Int32)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "WaitingUpgradeCount", $.Int32)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "WaitingWriteCount", $.Int32)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* struct System.Threading.ReaderWriterLockSlim+TimeoutTracker */ 

(function TimeoutTracker$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Threading.ReaderWriterLockSlim+TimeoutTracker", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsExpired", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RemainingMilliseconds", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "m_total", $.Int32);

    $.Field({Static:false, Public:false}, "m_start", $.Int32);

    $.Property({Static:false, Public:true }, "RemainingMilliseconds", $.Int32);

    $.Property({Static:false, Public:true }, "IsExpired", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Threading.Tasks");
/* class System.Threading.Tasks.TaskExtensions */ 

(function TaskExtensions$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Threading.Tasks.TaskExtensions", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Unwrap", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Threading.Tasks.Task"), [$asm02.TypeRef("System.Threading.Tasks.Task`1", [$asm02.TypeRef("System.Threading.Tasks.Task")])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Unwrap", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [$asm02.TypeRef("System.Threading.Tasks.Task`1", [$asm02.TypeRef("System.Threading.Tasks.Task`1", ["!!0"])])], ["TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* struct System.Threading.Tasks.TaskExtensions+VoidResult */ 

(function VoidResult$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Threading.Tasks.TaskExtensions+VoidResult", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      SizeBytes: 1, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Collections");
JSIL.DeclareNamespace("System.Collections.Generic");
/* class System.Collections.Generic.BitHelper */ 

(function BitHelper$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.BitHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Int32]), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsMarked", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "MarkBit", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ToIntArrayLength", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.Constant({Static:true , Public:false}, "MarkedBitFlag", $.Byte, 1);

    $.Constant({Static:true , Public:false}, "IntSize", $.Byte, 32);

    $.Field({Static:false, Public:false}, "m_length", $.Int32);

    $.Field({Static:false, Public:false}, "m_arrayPtr", $jsilcore.TypeRef("JSIL.Pointer", [$.Int32]))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_array", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "useStackAlloc", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.HashSet`1 */ 

(function HashSet$b1$Members () {
  var $, $thisType;




















































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.HashSet`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm02.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "AddIfNotPresent", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddOrGetLocation", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "AreEqualityComparersEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")]), $asm07.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckUniqueAndUnfoundElements", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.HashSet`1+ElementCount", [$.GenericParameter("T")]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), $.Boolean])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ContainsAllElements", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateSetComparer", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm07.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExceptWith", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Comparer", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")]), null)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.HashSet`1+Enumerator", [$.GenericParameter("T")]), null)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm02.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "HashSetEquals", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")]), $asm07.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncreaseCapacity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalIndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IntersectWith", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IntersectWithEnumerable", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IntersectWithHashSetWithSameEC", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsProperSubsetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsProperSupersetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSubsetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IsSubsetOfHashSetWithSameEC", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSupersetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnDeserialization", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Overlaps", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "RemoveWhere", 
      new JSIL.MethodSignature($.Int32, [$asm02.TypeRef("System.Predicate`1", [$.GenericParameter("T")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetCapacity", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetEquals", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SymmetricExceptWith", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SymmetricExceptWithEnumerable", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SymmetricExceptWithUniqueHashSet", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "Add")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "get_IsReadOnly")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "TrimExcess", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "UnionWith", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Constant({Static:true , Public:false}, "Lower31BitMask", $.Int32, 2147483647);

    $.Constant({Static:true , Public:false}, "StackAllocThreshold", $.Int32, 100);

    $.Constant({Static:true , Public:false}, "ShrinkThreshold", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "CapacityName", $.String, "Capacity");

    $.Constant({Static:true , Public:false}, "ElementsName", $.String, "Elements");

    $.Constant({Static:true , Public:false}, "ComparerName", $.String, "Comparer");

    $.Constant({Static:true , Public:false}, "VersionName", $.String, "Version");

    $.Field({Static:false, Public:false}, "m_buckets", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "m_slots", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Collections.Generic.HashSet`1+Slot", [$.GenericParameter("T")])]));

    $.Field({Static:false, Public:false}, "m_count", $.Int32);

    $.Field({Static:false, Public:false}, "m_lastIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_freeList", $.Int32);

    $.Field({Static:false, Public:false}, "m_comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "m_version", $.Int32);

    $.Field({Static:false, Public:false}, "m_siInfo", $asm02.TypeRef("System.Runtime.Serialization.SerializationInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.IsReadOnly", $.Boolean)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 3 */ $asm02.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 4 */ $asm02.TypeRef("System.Runtime.Serialization.IDeserializationCallback"), 
      /* 5 */ $asm05.TypeRef("System.Collections.Generic.ISet`1", [$.GenericParameter("T")]), 
      /* 6 */ $asm02.TypeRef("System.Collections.Generic.IReadOnlyCollection`1", [$.GenericParameter("T")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Collections.Generic.HashSetDebugView$b1.__Type__]; })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count = {Count}"]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* struct System.Collections.Generic.HashSet`1+ElementCount */ 

(function ElementCount$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.HashSet`1+ElementCount", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "uniqueCount", $.Int32);

    $.Field({Static:false, Public:false}, "unfoundCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Collections.Generic.HashSet`1+Slot */ 

(function Slot$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.HashSet`1+Slot", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "hashCode", $.Int32);

    $.Field({Static:false, Public:false}, "value", $.GenericParameter("T"));

    $.Field({Static:false, Public:false}, "next", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Collections.Generic.HashSet`1+Enumerator */ 

(function Enumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.HashSet`1+Enumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "set", $asm07.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.Field({Static:false, Public:false}, "version", $.Int32);

    $.Field({Static:false, Public:false}, "current", $.GenericParameter("T"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("T"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm02.TypeRef("System.IDisposable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Collections.Generic.HashSetDebugView`1 */ 

(function HashSetDebugView$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.HashSetDebugView`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.Field({Static:false, Public:false}, "set", $asm07.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]))
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm02.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.HashSetEqualityComparer`1 */ 

(function HashSetEqualityComparer$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.HashSetEqualityComparer`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")]), $asm07.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "m_comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")]));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm07.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.IO");
/* class System.IO.__Error */ 

(function __Error$Members () {
  var $, $thisType;
















  JSIL.MakeStaticClass("System.IO.__Error", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "EndOfFile", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "EndReadCalledTwice", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "EndWaitForConnectionCalledTwice", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "EndWriteCalledTwice", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "FileNotOpen", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDisplayablePath", 
      new JSIL.MethodSignature($.String, [$.String, $.Boolean])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "OperationAborted", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "PipeNotOpen", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadNotSupported", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "SeekNotSupported", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "StreamIsClosed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "WinIOError", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WinIOError", 
      new JSIL.MethodSignature(null, [$.Int32, $.String])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WriteNotSupported", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "WrongAsyncResult", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.BufferedStream2 */ 

(function BufferedStream2$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.IO.Stream"), 
      Name: "System.IO.BufferedStream2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddUnderlyingStreamPosition", 
      new JSIL.MethodSignature($.Int64, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "DiscardBuffer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushRead", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushWrite", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UnderlyingStreamPosition", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_UnderlyingStreamPosition", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ])
    );

    $.Constant({Static:true , Public:false}, "DefaultBufferSize", $.Int32, 32768);

    $.Field({Static:false, Public:false}, "bufferSize", $.Int32);

    $.Field({Static:false, Public:false}, "_buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_pendingBufferCopy", $.Int32);

    $.Field({Static:false, Public:false}, "_writePos", $.Int32);

    $.Field({Static:false, Public:false}, "_readPos", $.Int32);

    $.Field({Static:false, Public:false}, "_readLen", $.Int32);

    $.Field({Static:false, Public:false}, "pos", $.Int64);

    $.Property({Static:false, Public:false}, "UnderlyingStreamPosition", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.LogStream */ 

(function LogStream$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.BufferedStream2"), 
      Name: "System.IO.LogStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $asm07.TypeRef("System.IO.LogRetentionOption"), $.Int64, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "_DisableLogging", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "_Init", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $asm02.TypeRef("System.IO.FileShare"), $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES"), 
          $asm02.TypeRef("System.Security.Permissions.FileIOPermissionAccess"), $asm02.TypeRef("System.IO.FileMode"), 
          $.Int32, $.Boolean
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EnforceRetentionPolicy", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), $.Int64])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Object"), "Finalize")
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSecAttrs", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES"), [$asm02.TypeRef("System.IO.FileShare")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm02.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SeekCore", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm02.TypeRef("System.IO.SeekOrigin")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteFileNative", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Threading.NativeOverlapped")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Constant({Static:true , Public:false}, "DefaultFileSize", $.Int64, 10240000);

    $.Constant({Static:true , Public:false}, "DefaultNumberOfFiles", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "DefaultRetention", $asm07.TypeRef("System.IO.LogRetentionOption"), 2);

    $.Constant({Static:true , Public:false}, "_retentionRetryThreshold", $.Int32, 2);

    $.Field({Static:false, Public:false}, "_retention", $asm07.TypeRef("System.IO.LogRetentionOption"));

    $.Field({Static:false, Public:false}, "_maxFileSize", $.Int64);

    $.Field({Static:false, Public:false}, "_maxNumberOfFiles", $.Int32);

    $.Field({Static:false, Public:false}, "_currentFileNum", $.Int32);

    $.Field({Static:false, Public:false}, "_disableLogging", $.Boolean);

    $.Field({Static:false, Public:false}, "_retentionRetryCount", $.Int32);

    $.Field({Static:false, Public:false}, "_canRead", $.Boolean);

    $.Field({Static:false, Public:false}, "_canWrite", $.Boolean);

    $.Field({Static:false, Public:false}, "_canSeek", $.Boolean);

    $.Field({Static:false, Public:false}, "_handle", $asm02.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "_fileName", $.String);

    $.Field({Static:false, Public:false}, "_fileNameWithoutExt", $.String);

    $.Field({Static:false, Public:false}, "_fileExt", $.String);

    $.Field({Static:false, Public:false}, "_pathSav", $.String);

    $.Field({Static:false, Public:false}, "_fAccessSav", $.Int32);

    $.Field({Static:false, Public:false}, "_shareSav", $asm02.TypeRef("System.IO.FileShare"));

    $.Field({Static:false, Public:false}, "_secAttrsSav", $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES"));

    $.Field({Static:false, Public:false}, "_secAccessSav", $asm02.TypeRef("System.Security.Permissions.FileIOPermissionAccess"));

    $.Field({Static:false, Public:false}, "_modeSav", $asm02.TypeRef("System.IO.FileMode"));

    $.Field({Static:false, Public:false}, "_flagsAndAttributesSav", $.Int32);

    $.Field({Static:false, Public:false}, "_seekToEndSav", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_lockObject", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IO.LogRetentionOption */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.LogRetentionOption", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    UnlimitedSequentialFiles: 0, 
    LimitedCircularFiles: 1, 
    SingleFileUnboundedSize: 2, 
    LimitedSequentialFiles: 3, 
    SingleFileBoundedSize: 4, 
  }
);

/* enum System.IO.HandleInheritability */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.HandleInheritability", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Inheritable: 1, 
  }
);

JSIL.DeclareNamespace("System.IO.MemoryMappedFiles");
/* enum System.IO.MemoryMappedFiles.MemoryMappedFileAccess */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.MemoryMappedFiles.MemoryMappedFileAccess", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    ReadWrite: 0, 
    Read: 1, 
    Write: 2, 
    CopyOnWrite: 3, 
    ReadExecute: 4, 
    ReadWriteExecute: 5, 
  }
);

/* enum System.IO.MemoryMappedFiles.MemoryMappedFileOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.MemoryMappedFiles.MemoryMappedFileOptions", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    DelayAllocatePages: 67108864, 
  }
);

/* class System.IO.MemoryMappedFiles.MemoryMappedFile */ 

(function MemoryMappedFile$Members () {
  var $, $thisType;










































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.IO.MemoryMappedFiles.MemoryMappedFile", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"), $asm02.TypeRef("System.IO.FileStream"), 
          $.Boolean
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CleanupFile", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.FileStream"), $.Boolean, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateCore", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"), [
          $asm02.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), $.String, 
          $asm07.TypeRef("System.IO.HandleInheritability"), $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileSecurity"), 
          $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"), $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileOptions"), 
          $.Int64
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateFromFile", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromFile", 
      new JSIL.MethodSignature($.Type, [$.String, $asm02.TypeRef("System.IO.FileMode")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromFile", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm02.TypeRef("System.IO.FileMode"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromFile", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm02.TypeRef("System.IO.FileMode"), 
          $.String, $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromFile", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm02.TypeRef("System.IO.FileMode"), 
          $.String, $.Int64, 
          $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateFromFile", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.IO.FileStream"), $.String, 
          $.Int64, $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"), 
          $asm07.TypeRef("System.IO.HandleInheritability"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromFile", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.IO.FileStream"), $.String, 
          $.Int64, $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"), 
          $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileSecurity"), $asm07.TypeRef("System.IO.HandleInheritability"), 
          $.Boolean
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateNew", 
      new JSIL.MethodSignature($.Type, [$.String, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateNew", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.Int64, 
          $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateNew", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.Int64, 
          $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"), $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileOptions"), 
          $asm07.TypeRef("System.IO.HandleInheritability")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateNew", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.Int64, 
          $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"), $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileOptions"), 
          $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileSecurity"), $asm07.TypeRef("System.IO.HandleInheritability")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateOrOpen", 
      new JSIL.MethodSignature($.Type, [$.String, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateOrOpen", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.Int64, 
          $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateOrOpen", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.Int64, 
          $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"), $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileOptions"), 
          $asm07.TypeRef("System.IO.HandleInheritability")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateOrOpen", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.Int64, 
          $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"), $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileOptions"), 
          $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileSecurity"), $asm07.TypeRef("System.IO.HandleInheritability")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CreateOrOpenCore", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"), [
          $asm02.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), $.String, 
          $asm07.TypeRef("System.IO.HandleInheritability"), $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileSecurity"), 
          $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"), $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileOptions"), 
          $.Int64
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CreateViewAccessor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedViewAccessor"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateViewAccessor", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedViewAccessor"), [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateViewAccessor", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedViewAccessor"), [
          $.Int64, $.Int64, 
          $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CreateViewStream", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedViewStream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateViewStream", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedViewStream"), [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateViewStream", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedViewStream"), [
          $.Int64, $.Int64, 
          $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_SafeMemoryMappedFileHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetAccessControl", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileSecurity"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetFileAccess", 
      new JSIL.MethodSignature($asm02.TypeRef("System.IO.FileAccess"), [$asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFileMapAccess", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFileStreamFileSystemRights", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.AccessControl.FileSystemRights"), [$asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPageAccess", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSecAttrs", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES"), [
          $asm07.TypeRef("System.IO.HandleInheritability"), $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileSecurity"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetSystemPageAllocationGranularity", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "OpenCore", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"), [
          $.String, $asm07.TypeRef("System.IO.HandleInheritability"), 
          $.Int32, $.Boolean
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OpenExisting", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "OpenExisting", 
      new JSIL.MethodSignature($.Type, [$.String, $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileRights")])
    );

    $.ExternalMethod({Static:true , Public:true }, "OpenExisting", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileRights"), 
          $asm07.TypeRef("System.IO.HandleInheritability")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "SetAccessControl", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileSecurity"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "_handle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"));

    $.Field({Static:false, Public:false}, "_leaveOpen", $.Boolean);

    $.Field({Static:false, Public:false}, "_fileStream", $asm02.TypeRef("System.IO.FileStream"));

    $.Constant({Static:true , Public:false}, "DefaultSize", $.Int32, 0);

    $.Property({Static:false, Public:true }, "SafeMemoryMappedFileHandle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.MemoryMappedFiles.MemoryMappedViewAccessor */ 

(function MemoryMappedViewAccessor$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.IO.UnmanagedMemoryAccessor"), 
      Name: "System.IO.MemoryMappedFiles.MemoryMappedViewAccessor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedView"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Flush", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_PointerOffset", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SafeMemoryMappedViewHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_view", $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedView"));

    $.Property({Static:false, Public:true }, "SafeMemoryMappedViewHandle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle"));

    $.Property({Static:false, Public:true }, "PointerOffset", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.MemoryMappedFiles.MemoryMappedViewStream */ 

(function MemoryMappedViewStream$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.IO.UnmanagedMemoryStream"), 
      Name: "System.IO.MemoryMappedFiles.MemoryMappedViewStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedView"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_PointerOffset", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SafeMemoryMappedViewHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.Field({Static:false, Public:false}, "m_view", $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedView"));

    $.Property({Static:false, Public:true }, "SafeMemoryMappedViewHandle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle"));

    $.Property({Static:false, Public:true }, "PointerOffset", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IO.MemoryMappedFiles.MemoryMappedFileRights */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.MemoryMappedFiles.MemoryMappedFileRights", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    CopyOnWrite: 1, 
    Write: 2, 
    Read: 4, 
    ReadWrite: 6, 
    Execute: 8, 
    ReadExecute: 12, 
    ReadWriteExecute: 14, 
    Delete: 65536, 
    ReadPermissions: 131072, 
    ChangePermissions: 262144, 
    TakeOwnership: 524288, 
    FullControl: 983055, 
    AccessSystemSecurity: 16777216, 
  }
);

/* class System.IO.MemoryMappedFiles.MemoryMappedFileSecurity */ 

(function MemoryMappedFileSecurity$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Security.AccessControl.ObjectSecurity`1", [$asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileRights")]), 
      Name: "System.IO.MemoryMappedFiles.MemoryMappedFileSecurity", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"), $asm02.TypeRef("System.Security.AccessControl.AccessControlSections")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "PersistHandle", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Runtime.InteropServices.SafeHandle"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.MemoryMappedFiles.MemoryMappedView */ 

(function MemoryMappedView$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.IO.MemoryMappedFiles.MemoryMappedView", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle"), $.Int64, 
          $.Int64, $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CreateView", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"), $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"), 
          $.Int64, $.Int64
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Flush", 
      JSIL.MethodSignature.Action($.IntPtr)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Access", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsClosed", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_PointerOffset", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Size", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ViewHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_viewHandle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle"));

    $.Field({Static:false, Public:false}, "m_pointerOffset", $.Int64);

    $.Field({Static:false, Public:false}, "m_size", $.Int64);

    $.Field({Static:false, Public:false}, "m_access", $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"));

    $.Constant({Static:true , Public:false}, "MaxFlushWaits", $.Int32, 15);

    $.Constant({Static:true , Public:false}, "MaxFlushRetriesPerWait", $.Int32, 20);

    $.Property({Static:false, Public:false}, "ViewHandle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle"));

    $.Property({Static:false, Public:false}, "PointerOffset", $.Int64);

    $.Property({Static:false, Public:false}, "Size", $.Int64);

    $.Property({Static:false, Public:false}, "Access", $asm07.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"));

    $.Property({Static:false, Public:false}, "IsClosed", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.IO.Pipes");
/* enum System.IO.Pipes.PipeDirection */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.Pipes.PipeDirection", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    In: 1, 
    Out: 2, 
    InOut: 3, 
  }
);

/* enum System.IO.Pipes.PipeTransmissionMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.Pipes.PipeTransmissionMode", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Byte: 0, 
    Message: 1, 
  }
);

/* enum System.IO.Pipes.PipeOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.Pipes.PipeOptions", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    WriteThrough: -2147483648, 
    None: 0, 
    Asynchronous: 1073741824, 
  }
);

/* class System.IO.Pipes.IOCancellationHelper */ 

(function IOCancellationHelper$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.IO.Pipes.IOCancellationHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Threading.CancellationToken"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AllowCancellation", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Runtime.InteropServices.SafeHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Threading.NativeOverlapped")])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Cancel", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "SetOperationCompleted", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ThrowIOOperationAborted", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "_cancellationRegistration", $asm02.TypeRef("System.Threading.CancellationTokenRegistration"));

    $.Field({Static:false, Public:false}, "_handle", $asm02.TypeRef("System.Runtime.InteropServices.SafeHandle"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "_overlapped", $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Threading.NativeOverlapped")]))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Pipes.PipeStream */ 

(function PipeStream$Members () {
  var $, $thisType;






















































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.IO.Stream"), 
      Name: "System.IO.Pipes.PipeStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Pipes.PipeDirection"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Pipes.PipeDirection"), $asm07.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AsyncPSCallback", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Threading.NativeOverlapped")])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm02.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "BeginReadCore", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Pipes.PipeStreamAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm02.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "BeginWriteCore", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Pipes.PipeStreamAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckPipePropertyOperations", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckReadOperations", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckWriteOperations", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm02.TypeRef("System.IAsyncResult")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IAsyncResult"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InBufferSize", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_InternalHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsAsync", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsConnected", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsHandleExposed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsMessageComplete", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OutBufferSize", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadMode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.Pipes.PipeTransmissionMode"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_SafePipeHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_State", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.Pipes.PipeState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TransmissionMode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.Pipes.PipeTransmissionMode"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetAccessControl", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.Pipes.PipeSecurity"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetSecAttrs", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES"), [
          $asm07.TypeRef("System.IO.HandleInheritability"), $asm07.TypeRef("System.IO.Pipes.PipeSecurity"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetSecAttrs", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES"), [$asm07.TypeRef("System.IO.HandleInheritability")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Pipes.PipeDirection"), $asm07.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeHandle", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $.Boolean, 
          $.Boolean
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadByte", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReadCore", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReadFileNative", 
      new JSIL.MethodSignature($.Int32, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Threading.NativeOverlapped")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm02.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsConnected", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadMode", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Pipes.PipeTransmissionMode"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_State", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Pipes.PipeState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetAccessControl", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Pipes.PipeSecurity"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateReadMode", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WaitForPipeDrain", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WinIOError", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteByte", 
      JSIL.MethodSignature.Action($.Byte)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteFileNative", 
      new JSIL.MethodSignature($.Int32, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Threading.NativeOverlapped")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_canUseAsync", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "IOCallback", $asm02.TypeRef("System.Threading.IOCompletionCallback"), function ($pi) {
        return $asm02.System.Threading.IOCompletionCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "AsyncPSCallback", new JSIL.MethodSignature(null, [
                $.UInt32, $.UInt32, 
                $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Threading.NativeOverlapped")])
              ]), true, false));
      })
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_handle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"));

    $.Field({Static:false, Public:false}, "m_canRead", $.Boolean);

    $.Field({Static:false, Public:false}, "m_canWrite", $.Boolean);

    $.Field({Static:false, Public:false}, "m_isAsync", $.Boolean);

    $.Field({Static:false, Public:false}, "m_isMessageComplete", $.Boolean);

    $.Field({Static:false, Public:false}, "m_isFromExistingHandle", $.Boolean);

    $.Field({Static:false, Public:false}, "m_isHandleExposed", $.Boolean);

    $.Field({Static:false, Public:false}, "m_readMode", $asm07.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.Field({Static:false, Public:false}, "m_transmissionMode", $asm07.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.Field({Static:false, Public:false}, "m_pipeDirection", $asm07.TypeRef("System.IO.Pipes.PipeDirection"));

    $.Field({Static:false, Public:false}, "m_outBufferSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_state", $asm07.TypeRef("System.IO.Pipes.PipeState"));

    $.Property({Static:false, Public:true }, "IsConnected", $.Boolean);

    $.Property({Static:false, Public:true }, "IsAsync", $.Boolean);

    $.Property({Static:false, Public:true }, "IsMessageComplete", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "TransmissionMode", $asm07.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.Property({Static:false, Public:true , Virtual:true }, "InBufferSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "OutBufferSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadMode", $asm07.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.Property({Static:false, Public:true }, "SafePipeHandle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"));

    $.Property({Static:false, Public:false}, "InternalHandle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"));

    $.Property({Static:false, Public:false}, "IsHandleExposed", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:false}, "State", $asm07.TypeRef("System.IO.Pipes.PipeState"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Pipes.AnonymousPipeServerStream */ 

(function AnonymousPipeServerStream$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.Pipes.PipeStream"), 
      Name: "System.IO.Pipes.AnonymousPipeServerStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Pipes.PipeDirection"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Pipes.PipeDirection"), $asm07.TypeRef("System.IO.HandleInheritability")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Pipes.PipeDirection"), $asm07.TypeRef("System.IO.HandleInheritability"), 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Pipes.PipeDirection"), $asm07.TypeRef("System.IO.HandleInheritability"), 
          $.Int32, $asm07.TypeRef("System.IO.Pipes.PipeSecurity")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Pipes.PipeDirection"), $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), 
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Create", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Pipes.PipeDirection"), $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES"), 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "DisposeLocalCopyOfClientHandle", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:true }, "get_ClientSafePipeHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TransmissionMode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.Pipes.PipeTransmissionMode"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetClientHandleAsString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadMode", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Pipes.PipeTransmissionMode"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_clientHandle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"));

    $.Field({Static:false, Public:false}, "m_clientHandleExposed", $.Boolean);

    $.Property({Static:false, Public:true }, "ClientSafePipeHandle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "TransmissionMode", $asm07.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReadMode", $asm07.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Pipes.AnonymousPipeClientStream */ 

(function AnonymousPipeClientStream$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.Pipes.PipeStream"), 
      Name: "System.IO.Pipes.AnonymousPipeClientStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Pipes.PipeDirection"), $.String])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Pipes.PipeDirection"), $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TransmissionMode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.Pipes.PipeTransmissionMode"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Pipes.PipeDirection"), $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadMode", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Pipes.PipeTransmissionMode"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "TransmissionMode", $asm07.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReadMode", $asm07.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.IO.Pipes.PipeStreamImpersonationWorker */ 

JSIL.MakeDelegate("System.IO.Pipes.PipeStreamImpersonationWorker", true, [], 
  JSIL.MethodSignature.Void);

/* class System.IO.Pipes.NamedPipeServerStream */ 

(function NamedPipeServerStream$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.Pipes.PipeStream"), 
      Name: "System.IO.Pipes.NamedPipeServerStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 10, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.IO.Pipes.PipeDirection")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm07.TypeRef("System.IO.Pipes.PipeTransmissionMode")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm07.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $asm07.TypeRef("System.IO.Pipes.PipeOptions")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm07.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $asm07.TypeRef("System.IO.Pipes.PipeOptions"), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm07.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $asm07.TypeRef("System.IO.Pipes.PipeOptions"), $.Int32, 
          $.Int32, $asm07.TypeRef("System.IO.Pipes.PipeSecurity")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm07.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $asm07.TypeRef("System.IO.Pipes.PipeOptions"), $.Int32, 
          $.Int32, $asm07.TypeRef("System.IO.Pipes.PipeSecurity"), 
          $asm07.TypeRef("System.IO.HandleInheritability")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm07.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $asm07.TypeRef("System.IO.Pipes.PipeOptions"), $.Int32, 
          $.Int32, $asm07.TypeRef("System.IO.Pipes.PipeSecurity"), 
          $asm07.TypeRef("System.IO.HandleInheritability"), $asm07.TypeRef("System.IO.Pipes.PipeAccessRights")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Pipes.PipeDirection"), $.Boolean, 
          $.Boolean, $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AsyncWaitForConnectionCallback", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Threading.NativeOverlapped")])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "BeginWaitForConnection", 
      new JSIL.MethodSignature($asm02.TypeRef("System.IAsyncResult"), [$asm02.TypeRef("System.AsyncCallback"), $.Object])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckConnectOperationsServer", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckDisconnectOperations", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Create", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm07.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $asm07.TypeRef("System.IO.Pipes.PipeOptions"), $.Int32, 
          $.Int32, $asm07.TypeRef("System.IO.Pipes.PipeAccessRights"), 
          $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Disconnect", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "EndWaitForConnection", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IAsyncResult"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:true }, "GetImpersonationUserName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ImpersonateAndTryCode", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "RevertImpersonationOnBackout", 
      new JSIL.MethodSignature(null, [$.Object, $.Boolean])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "RunAsClient", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Pipes.PipeStreamImpersonationWorker"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WaitForConnection", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WaitForConnectionAsync", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Threading.Tasks.Task"), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WaitForConnectionAsync", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Threading.Tasks.Task"))
    );

    $.Constant({Static:true , Public:true }, "MaxAllowedServerInstances", $.Int32, -1);

    $.Field({Static:true , Public:false, ReadOnly:true }, "WaitForConnectionCallback", $asm02.TypeRef("System.Threading.IOCompletionCallback"), function ($pi) {
        return $asm02.System.Threading.IOCompletionCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "AsyncWaitForConnectionCallback", new JSIL.MethodSignature(null, [
                $.UInt32, $.UInt32, 
                $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Threading.NativeOverlapped")])
              ]), true, false));
      })
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "tryCode", $asm02.TypeRef("System.Runtime.CompilerServices.RuntimeHelpers+TryCode"), function ($pi) {
        return $asm02.System.Runtime.CompilerServices.RuntimeHelpers_TryCode.New(null, null, new JSIL.MethodPointerInfo($thisType, "ImpersonateAndTryCode", JSIL.MethodSignature.Action($.Object), true, false));
      });

    $.Field({Static:true , Public:false}, "cleanupCode", $asm02.TypeRef("System.Runtime.CompilerServices.RuntimeHelpers+CleanupCode"), function ($pi) {
        return $asm02.System.Runtime.CompilerServices.RuntimeHelpers_CleanupCode.New(null, null, new JSIL.MethodPointerInfo($thisType, "RevertImpersonationOnBackout", new JSIL.MethodSignature(null, [$.Object, $.Boolean]), true, false));
      });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Pipes.NamedPipeServerStream+ExecuteHelper */ 

(function ExecuteHelper$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.IO.Pipes.NamedPipeServerStream+ExecuteHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Pipes.PipeStreamImpersonationWorker"), $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_userCode", $asm07.TypeRef("System.IO.Pipes.PipeStreamImpersonationWorker"));

    $.Field({Static:false, Public:false}, "m_handle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"));

    $.Field({Static:false, Public:false}, "m_mustRevert", $.Boolean);

    $.Field({Static:false, Public:false}, "m_impersonateErrorCode", $.Int32);

    $.Field({Static:false, Public:false}, "m_revertImpersonateErrorCode", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Pipes.NamedPipeClientStream */ 

(function NamedPipeClientStream$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.Pipes.PipeStream"), 
      Name: "System.IO.Pipes.NamedPipeClientStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.IO.Pipes.PipeDirection")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.IO.Pipes.PipeDirection"), $asm07.TypeRef("System.IO.Pipes.PipeOptions")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.IO.Pipes.PipeDirection"), $asm07.TypeRef("System.IO.Pipes.PipeOptions"), 
          $asm02.TypeRef("System.Security.Principal.TokenImpersonationLevel")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.IO.Pipes.PipeDirection"), $asm07.TypeRef("System.IO.Pipes.PipeOptions"), 
          $asm02.TypeRef("System.Security.Principal.TokenImpersonationLevel"), $asm07.TypeRef("System.IO.HandleInheritability")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.IO.Pipes.PipeAccessRights"), $asm07.TypeRef("System.IO.Pipes.PipeOptions"), 
          $asm02.TypeRef("System.Security.Principal.TokenImpersonationLevel"), $asm07.TypeRef("System.IO.HandleInheritability")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Pipes.PipeDirection"), $.Boolean, 
          $.Boolean, $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckConnectOperationsClient", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckPipePropertyOperations", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Connect", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Connect", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ConnectAsync", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Threading.Tasks.Task"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ConnectAsync", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Threading.Tasks.Task"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "ConnectAsync", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Threading.Tasks.Task"), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ConnectAsync", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Threading.Tasks.Task"), [$.Int32, $asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConnectInternal", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm02.TypeRef("System.Threading.CancellationToken"), 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DirectionFromRights", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Pipes.PipeDirection"), [$asm07.TypeRef("System.IO.Pipes.PipeAccessRights")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:true }, "get_NumberOfServerInstances", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Constant({Static:true , Public:false}, "CancellationCheckIntervalInMilliseconds", $.Int32, 50);

    $.Field({Static:false, Public:false}, "m_normalizedPipePath", $.String);

    $.Field({Static:false, Public:false}, "m_impersonationLevel", $asm02.TypeRef("System.Security.Principal.TokenImpersonationLevel"));

    $.Field({Static:false, Public:false}, "m_pipeOptions", $asm07.TypeRef("System.IO.Pipes.PipeOptions"));

    $.Field({Static:false, Public:false}, "m_inheritability", $asm07.TypeRef("System.IO.HandleInheritability"));

    $.Field({Static:false, Public:false}, "m_access", $.Int32);

    $.Property({Static:false, Public:true }, "NumberOfServerInstances", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Pipes.NamedPipeClientStream+<>c__DisplayClass21_0 */ 

(function $l$gc__DisplayClass21_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.IO.Pipes.NamedPipeClientStream+<>c__DisplayClass21_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lConnectAsync$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "timeout", $.Int32);

    $.Field({Static:false, Public:true }, "cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:true }, "startTime", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.IO.Pipes.NamedPipeClientStream"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.IO.Pipes.PipeAsyncResult */ 

(function PipeAsyncResult$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.IO.Pipes.PipeAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CallUserCallback", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CallUserCallbackWorker", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncState", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncWaitHandle", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Threading.WaitHandle"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CompletedSynchronously", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsCompleted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_userCallback", $asm02.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:false}, "_userStateObject", $.Object);

    $.Field({Static:false, Public:false}, "_waitHandle", $asm02.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "_handle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "_overlapped", $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Threading.NativeOverlapped")]))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "_EndXxxCalled", $.Int32);

    $.Field({Static:false, Public:false}, "_errorCode", $.Int32);

    $.Field({Static:false, Public:false}, "_isComplete", $.Boolean);

    $.Field({Static:false, Public:false}, "_completedSynchronously", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncState", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "IsCompleted", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncWaitHandle", $asm02.TypeRef("System.Threading.WaitHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "CompletedSynchronously", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IAsyncResult")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IO.Pipes.PipeState */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.Pipes.PipeState", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    WaitingToConnect: 0, 
    Connected: 1, 
    Broken: 2, 
    Disconnected: 3, 
    Closed: 4, 
  }
);

/* class System.IO.Pipes.PipeStreamAsyncResult */ 

(function PipeStreamAsyncResult$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.IO.Pipes.PipeStreamAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CallUserCallback", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CallUserCallbackWorker", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncState", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncWaitHandle", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Threading.WaitHandle"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CompletedSynchronously", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsCompleted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_userCallback", $asm02.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:false}, "_userStateObject", $.Object);

    $.Field({Static:false, Public:false}, "_waitHandle", $asm02.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "_handle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "_overlapped", $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Threading.NativeOverlapped")]))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "_EndXxxCalled", $.Int32);

    $.Field({Static:false, Public:false}, "_numBytes", $.Int32);

    $.Field({Static:false, Public:false}, "_errorCode", $.Int32);

    $.Field({Static:false, Public:false}, "_isMessageComplete", $.Boolean);

    $.Field({Static:false, Public:false}, "_isWrite", $.Boolean);

    $.Field({Static:false, Public:false}, "_isComplete", $.Boolean);

    $.Field({Static:false, Public:false}, "_completedSynchronously", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncState", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "IsCompleted", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncWaitHandle", $asm02.TypeRef("System.Threading.WaitHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "CompletedSynchronously", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IAsyncResult")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IO.Pipes.PipeAccessRights */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.Pipes.PipeAccessRights", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    ReadData: 1, 
    WriteData: 2, 
    CreateNewInstance: 4, 
    ReadExtendedAttributes: 8, 
    WriteExtendedAttributes: 16, 
    ReadAttributes: 128, 
    WriteAttributes: 256, 
    Write: 274, 
    Delete: 65536, 
    ReadPermissions: 131072, 
    Read: 131209, 
    ReadWrite: 131483, 
    ChangePermissions: 262144, 
    TakeOwnership: 524288, 
    Synchronize: 1048576, 
    FullControl: 2032031, 
    AccessSystemSecurity: 16777216, 
  }
);

/* class System.IO.Pipes.PipeAccessRule */ 

(function PipeAccessRule$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Security.AccessControl.AccessRule"), 
      Name: "System.IO.Pipes.PipeAccessRule", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.IO.Pipes.PipeAccessRights"), 
          $asm02.TypeRef("System.Security.AccessControl.AccessControlType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.IO.Pipes.PipeAccessRights"), 
          $asm02.TypeRef("System.Security.AccessControl.AccessControlType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Security.Principal.IdentityReference"), $.Int32, 
          $.Boolean, $asm02.TypeRef("System.Security.AccessControl.AccessControlType")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AccessMaskFromRights", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IO.Pipes.PipeAccessRights"), $asm02.TypeRef("System.Security.AccessControl.AccessControlType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PipeAccessRights", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.Pipes.PipeAccessRights"))
    );

    $.ExternalMethod({Static:true , Public:false}, "RightsFromAccessMask", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Pipes.PipeAccessRights"), [$.Int32])
    );

    $.Property({Static:false, Public:true }, "PipeAccessRights", $asm07.TypeRef("System.IO.Pipes.PipeAccessRights"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Pipes.PipeAuditRule */ 

(function PipeAuditRule$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Security.AccessControl.AuditRule"), 
      Name: "System.IO.Pipes.PipeAuditRule", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.IO.Pipes.PipeAccessRights"), 
          $asm02.TypeRef("System.Security.AccessControl.AuditFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.IO.Pipes.PipeAccessRights"), 
          $asm02.TypeRef("System.Security.AccessControl.AuditFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Security.Principal.IdentityReference"), $.Int32, 
          $.Boolean, $asm02.TypeRef("System.Security.AccessControl.AuditFlags")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AccessMaskFromRights", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IO.Pipes.PipeAccessRights")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PipeAccessRights", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.Pipes.PipeAccessRights"))
    );

    $.Property({Static:false, Public:true }, "PipeAccessRights", $asm07.TypeRef("System.IO.Pipes.PipeAccessRights"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Pipes.PipeSecurity */ 

(function PipeSecurity$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Security.AccessControl.NativeObjectSecurity"), 
      Name: "System.IO.Pipes.PipeSecurity", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $asm02.TypeRef("System.Security.AccessControl.AccessControlSections")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AccessRuleFactory", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.AccessControl.AccessRule"), [
          $asm02.TypeRef("System.Security.Principal.IdentityReference"), $.Int32, 
          $.Boolean, $asm02.TypeRef("System.Security.AccessControl.InheritanceFlags"), 
          $asm02.TypeRef("System.Security.AccessControl.PropagationFlags"), $asm02.TypeRef("System.Security.AccessControl.AccessControlType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddAccessRule", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Pipes.PipeAccessRule"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddAuditRule", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Pipes.PipeAuditRule"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AuditRuleFactory", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.AccessControl.AuditRule"), [
          $asm02.TypeRef("System.Security.Principal.IdentityReference"), $.Int32, 
          $.Boolean, $asm02.TypeRef("System.Security.AccessControl.InheritanceFlags"), 
          $asm02.TypeRef("System.Security.AccessControl.PropagationFlags"), $asm02.TypeRef("System.Security.AccessControl.AuditFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AccessRightType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AccessRuleType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AuditRuleType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAccessControlSectionsFromChanges", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Security.AccessControl.AccessControlSections"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Persist", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Runtime.InteropServices.SafeHandle"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Persist", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "RemoveAccessRule", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.IO.Pipes.PipeAccessRule")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAccessRuleSpecific", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Pipes.PipeAccessRule"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAuditRule", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.IO.Pipes.PipeAuditRule")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAuditRuleAll", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Pipes.PipeAuditRule"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAuditRuleSpecific", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Pipes.PipeAuditRule"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetAccessRule", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Pipes.PipeAccessRule"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetAccessRule", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Pipes.PipeAccessRule"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetAuditRule", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Pipes.PipeAuditRule"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "AccessRightType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "AccessRuleType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "AuditRuleType", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Dynamic");
JSIL.MakeTypeAlias($jsilcore, "System.Runtime.CompilerServices.CallSiteBinder");

/* class System.Runtime.CompilerServices.CallSiteBinder+LambdaSignature`1 */ 

(function LambdaSignature$b1$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.CallSiteBinder+LambdaSignature`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Instance", $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder+LambdaSignature`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Parameters", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "ReturnLabel", $asm07.TypeRef("System.Linq.Expressions.LabelTarget"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.DynamicMetaObjectBinder */ 

(function DynamicMetaObjectBinder$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
      Name: "System.Dynamic.DynamicMetaObjectBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AddRemoteObjectRestrictions", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.BindingRestrictions"), [
          $asm07.TypeRef("System.Dynamic.BindingRestrictions"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
          $asm07.TypeRef("System.Linq.Expressions.LabelTarget")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CreateArgumentMetaObjects", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")]), [$jsilcore.TypeRef("System.Array", [$.Object]), $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Defer", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(1, "args", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "Defer", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(0, "args", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetUpdateExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm02.TypeRef("System.Type")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsComObject", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeDeferred", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.BindingRestrictions"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ComObjectType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Dynamic.BinaryOperationBinder */ 

(function BinaryOperationBinder$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.BinaryOperationBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "FallbackBinaryOperation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackBinaryOperation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $asm07.TypeRef("System.Dynamic.DynamicMetaObject"), 
          $asm07.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Operation", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "OperationIsValid", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.Expressions.ExpressionType")])
    );

    $.Field({Static:false, Public:false}, "_operation", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Operation", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Dynamic.BindingRestrictions */ 

(function BindingRestrictions$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.BindingRestrictions", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "Combine", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetExpressionRestriction", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetInstanceRestriction", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $.Object])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetTypeRestriction", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Type")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetTypeRestriction", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Merge", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ToExpression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Constant({Static:true , Public:false}, "TypeRestrictionHash", $.Int32, 268435456);

    $.Constant({Static:true , Public:false}, "InstanceRestrictionHash", $.Int32, 536870912);

    $.Constant({Static:true , Public:false}, "CustomRestrictionHash", $.Int32, 1073741824);

    $.Property({Static:false, Public:false}, "DebugView", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Dynamic.BindingRestrictions_BindingRestrictionsProxy.__Type__]; })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{DebugView}"]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Dynamic.BindingRestrictions+TestBuilder */ 

(function TestBuilder$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.BindingRestrictions+TestBuilder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Append", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Dynamic.BindingRestrictions"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToExpression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_unique", $asm07.TypeRef("System.Linq.Expressions.Set`1", [$asm07.TypeRef("System.Dynamic.BindingRestrictions")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_tests", $asm05.TypeRef("System.Collections.Generic.Stack`1", [$asm07.TypeRef("System.Dynamic.BindingRestrictions+TestBuilder+AndNode")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Dynamic.BindingRestrictions+TestBuilder+AndNode */ 

(function AndNode$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Dynamic.BindingRestrictions+TestBuilder+AndNode", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "Depth", $.Int32);

    $.Field({Static:false, Public:false}, "Node", $asm07.TypeRef("System.Linq.Expressions.Expression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.BindingRestrictions+MergedRestriction */ 

(function MergedRestriction$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Dynamic.BindingRestrictions"), 
      Name: "System.Dynamic.BindingRestrictions+MergedRestriction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Dynamic.BindingRestrictions"), $asm07.TypeRef("System.Dynamic.BindingRestrictions")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "Left", $asm07.TypeRef("System.Dynamic.BindingRestrictions"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Right", $asm07.TypeRef("System.Dynamic.BindingRestrictions"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.BindingRestrictions+CustomRestriction */ 

(function CustomRestriction$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Dynamic.BindingRestrictions"), 
      Name: "System.Dynamic.BindingRestrictions+CustomRestriction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expression", $asm07.TypeRef("System.Linq.Expressions.Expression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.BindingRestrictions+TypeRestriction */ 

(function TypeRestriction$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Dynamic.BindingRestrictions"), 
      Name: "System.Dynamic.BindingRestrictions+TypeRestriction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expression", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.BindingRestrictions+InstanceRestriction */ 

(function InstanceRestriction$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Dynamic.BindingRestrictions"), 
      Name: "System.Dynamic.BindingRestrictions+InstanceRestriction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expression", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_instance", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.BindingRestrictions+BindingRestrictionsProxy */ 

(function BindingRestrictionsProxy$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.BindingRestrictions+BindingRestrictionsProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Dynamic.BindingRestrictions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Restrictions", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.BindingRestrictions")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Test", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Dynamic.BindingRestrictions"));

    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);

    $.Property({Static:false, Public:true }, "Test", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Restrictions", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.BindingRestrictions")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.CallInfo */ 

(function CallInfo$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.CallInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.String])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(1, "argNames", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ArgumentNames", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_argCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_argNames", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]));

    $.Property({Static:false, Public:true }, "ArgumentCount", $.Int32)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ArgumentNames", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Dynamic.ConvertBinder */ 

(function ConvertBinder$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.ConvertBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $.Boolean])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "FallbackConvert", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackConvert", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Explicit", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm02.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_explicit", $.Boolean);

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Explicit", $.Boolean)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Dynamic.CreateInstanceBinder */ 

(function CreateInstanceBinder$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.CreateInstanceBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Dynamic.CallInfo"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "FallbackCreateInstance", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackCreateInstance", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm07.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_CallInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Dynamic.CallInfo"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_callInfo", $asm07.TypeRef("System.Dynamic.CallInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "CallInfo", $asm07.TypeRef("System.Dynamic.CallInfo"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Dynamic.DeleteIndexBinder */ 

(function DeleteIndexBinder$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.DeleteIndexBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Dynamic.CallInfo"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "FallbackDeleteIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackDeleteIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm07.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_CallInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Dynamic.CallInfo"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_callInfo", $asm07.TypeRef("System.Dynamic.CallInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "CallInfo", $asm07.TypeRef("System.Dynamic.CallInfo"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Dynamic.DeleteMemberBinder */ 

(function DeleteMemberBinder$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.DeleteMemberBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "FallbackDeleteMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackDeleteMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreCase", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_ignoreCase", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IgnoreCase", $.Boolean)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Dynamic.DynamicMetaObject */ 

(function DynamicMetaObject$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicMetaObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Dynamic.BindingRestrictions")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Dynamic.BindingRestrictions"), 
          $.Object
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindBinaryOperation", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Dynamic.BinaryOperationBinder"), $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindConvert", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Dynamic.ConvertBinder")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindCreateInstance", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Dynamic.CreateInstanceBinder"), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindDeleteIndex", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Dynamic.DeleteIndexBinder"), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindDeleteMember", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Dynamic.DeleteMemberBinder")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindGetIndex", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Dynamic.GetIndexBinder"), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindGetMember", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Dynamic.GetMemberBinder")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindInvoke", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Dynamic.InvokeBinder"), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindInvokeMember", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Dynamic.InvokeMemberBinder"), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindSetIndex", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("System.Dynamic.SetIndexBinder"), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $.Type
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindSetMember", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Dynamic.SetMemberBinder"), $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindUnaryOperation", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Dynamic.UnaryOperationBinder")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.Object, $asm07.TypeRef("System.Linq.Expressions.Expression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_LimitType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Restrictions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Dynamic.BindingRestrictions"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_RuntimeType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDynamicMemberNames", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetExpressions", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), [$jsilcore.TypeRef("System.Array", [$.Type])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expression", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_restrictions", $asm07.TypeRef("System.Dynamic.BindingRestrictions"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_value", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_hasValue", $.Boolean);

    $.Field({Static:true , Public:true , ReadOnly:true }, "EmptyMetaObjects", $jsilcore.TypeRef("System.Array", [$.Type]), function ($pi) {
        return JSIL.Array.New($thisType, 0);
      })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Expression", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Restrictions", $asm07.TypeRef("System.Dynamic.BindingRestrictions"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Value", $.Object)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "HasValue", $.Boolean)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "RuntimeType", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "LimitType", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Dynamic.DynamicObject */ 

(function DynamicObject$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDynamicMemberNames", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMetaObject", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryBinaryOperation", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Dynamic.BinaryOperationBinder"), $.Object, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryConvert", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Dynamic.ConvertBinder"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryCreateInstance", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Dynamic.CreateInstanceBinder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryDeleteIndex", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Dynamic.DeleteIndexBinder"), $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryDeleteMember", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Dynamic.DeleteMemberBinder")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetIndex", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Dynamic.GetIndexBinder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetMember", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Dynamic.GetMemberBinder"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryInvoke", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Dynamic.InvokeBinder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryInvokeMember", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Dynamic.InvokeMemberBinder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TrySetIndex", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Dynamic.SetIndexBinder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $.Object
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TrySetMember", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Dynamic.SetMemberBinder"), $.Object])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryUnaryOperation", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Dynamic.UnaryOperationBinder"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Dynamic.IDynamicMetaObjectProvider")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Dynamic.DynamicObject+MetaDynamic */ 

(function MetaDynamic$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Dynamic.DynamicMetaObject"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Dynamic.DynamicObject")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindBinaryOperation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.BinaryOperationBinder"), $asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindConvert", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.ConvertBinder")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindCreateInstance", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.CreateInstanceBinder"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindDeleteIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DeleteIndexBinder"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindDeleteMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DeleteMemberBinder")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindGetIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.GetIndexBinder"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindGetMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.GetMemberBinder")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindInvoke", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.InvokeBinder"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindInvokeMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.InvokeMemberBinder"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindSetIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm07.TypeRef("System.Dynamic.SetIndexBinder"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm07.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindSetMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.SetMemberBinder"), $asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindUnaryOperation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.UnaryOperationBinder")])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildCallArgs", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), [
          $asm07.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildCallMethodWithResult", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $.String, $asm07.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), $asm07.TypeRef("System.Dynamic.DynamicMetaObject"), 
          $asm07.TypeRef("System.Dynamic.DynamicObject+MetaDynamic+Fallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallMethodNoResult", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $.String, $asm07.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), $asm07.TypeRef("System.Dynamic.DynamicObject+MetaDynamic+Fallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallMethodReturnLast", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $.String, $asm07.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Dynamic.DynamicObject+MetaDynamic+Fallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallMethodWithResult", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $.String, $asm07.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), $asm07.TypeRef("System.Dynamic.DynamicObject+MetaDynamic+Fallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallMethodWithResult", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $.String, $asm07.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), $asm07.TypeRef("System.Dynamic.DynamicObject+MetaDynamic+Fallback"), 
          $asm07.TypeRef("System.Dynamic.DynamicObject+MetaDynamic+Fallback")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Constant", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ConstantExpression"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObjectBinder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Dynamic.DynamicObject"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetConvertedArgs", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    )
      .Parameter(0, "args", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDynamicMemberNames", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLimitedSelf", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRestrictions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Dynamic.BindingRestrictions"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsOverridden", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReferenceArgAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "NoArgs", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), function ($pi) {
        return JSIL.Array.New($asm07.System.Linq.Expressions.Expression, 0);
      });

    $.Property({Static:false, Public:false}, "Value", $asm07.TypeRef("System.Dynamic.DynamicObject"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Dynamic.DynamicObject+MetaDynamic+Fallback */ 

JSIL.MakeDelegate("System.Dynamic.DynamicObject+MetaDynamic+Fallback", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")]));

/* class System.Dynamic.GetMemberBinder */ 

(function GetMemberBinder$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.GetMemberBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "FallbackGetMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackGetMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreCase", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_ignoreCase", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IgnoreCase", $.Boolean)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Dynamic.DynamicObject+MetaDynamic+GetBinderAdapter */ 

(function GetBinderAdapter$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Dynamic.GetMemberBinder"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic+GetBinderAdapter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Dynamic.InvokeMemberBinder"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackGetMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass2_0 */ 

(function $l$gc__DisplayClass2_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass2_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindGetMember$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.Field({Static:false, Public:true }, "binder", $asm07.TypeRef("System.Dynamic.GetMemberBinder"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Dynamic.DynamicObject+MetaDynamic"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass3_0 */ 

(function $l$gc__DisplayClass3_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass3_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindSetMember$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.Field({Static:false, Public:true }, "binder", $asm07.TypeRef("System.Dynamic.SetMemberBinder"));

    $.Field({Static:false, Public:true }, "value", $asm07.TypeRef("System.Dynamic.DynamicMetaObject"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Dynamic.DynamicObject+MetaDynamic"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass4_0 */ 

(function $l$gc__DisplayClass4_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass4_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindDeleteMember$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.Field({Static:false, Public:true }, "binder", $asm07.TypeRef("System.Dynamic.DeleteMemberBinder"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Dynamic.DynamicObject+MetaDynamic"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass5_0 */ 

(function $l$gc__DisplayClass5_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass5_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindConvert$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.Field({Static:false, Public:true }, "binder", $asm07.TypeRef("System.Dynamic.ConvertBinder"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Dynamic.DynamicObject+MetaDynamic"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass6_0 */ 

(function $l$gc__DisplayClass6_0$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass6_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindInvokeMember$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindInvokeMember$gb__1", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.Field({Static:false, Public:true }, "binder", $asm07.TypeRef("System.Dynamic.InvokeMemberBinder"));

    $.Field({Static:false, Public:true }, "args", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Dynamic.DynamicObject+MetaDynamic"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass7_0 */ 

(function $l$gc__DisplayClass7_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass7_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindCreateInstance$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.Field({Static:false, Public:true }, "binder", $asm07.TypeRef("System.Dynamic.CreateInstanceBinder"));

    $.Field({Static:false, Public:true }, "args", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Dynamic.DynamicObject+MetaDynamic"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass8_0 */ 

(function $l$gc__DisplayClass8_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass8_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindInvoke$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.Field({Static:false, Public:true }, "binder", $asm07.TypeRef("System.Dynamic.InvokeBinder"));

    $.Field({Static:false, Public:true }, "args", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Dynamic.DynamicObject+MetaDynamic"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass9_0 */ 

(function $l$gc__DisplayClass9_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass9_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindBinaryOperation$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.Field({Static:false, Public:true }, "binder", $asm07.TypeRef("System.Dynamic.BinaryOperationBinder"));

    $.Field({Static:false, Public:true }, "arg", $asm07.TypeRef("System.Dynamic.DynamicMetaObject"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Dynamic.DynamicObject+MetaDynamic"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass10_0 */ 

(function $l$gc__DisplayClass10_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass10_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindUnaryOperation$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.Field({Static:false, Public:true }, "binder", $asm07.TypeRef("System.Dynamic.UnaryOperationBinder"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Dynamic.DynamicObject+MetaDynamic"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass11_0 */ 

(function $l$gc__DisplayClass11_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass11_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindGetIndex$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.Field({Static:false, Public:true }, "binder", $asm07.TypeRef("System.Dynamic.GetIndexBinder"));

    $.Field({Static:false, Public:true }, "indexes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Dynamic.DynamicObject+MetaDynamic"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass12_0 */ 

(function $l$gc__DisplayClass12_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass12_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindSetIndex$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.Field({Static:false, Public:true }, "binder", $asm07.TypeRef("System.Dynamic.SetIndexBinder"));

    $.Field({Static:false, Public:true }, "indexes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")]));

    $.Field({Static:false, Public:true }, "value", $asm07.TypeRef("System.Dynamic.DynamicMetaObject"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Dynamic.DynamicObject+MetaDynamic"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass13_0 */ 

(function $l$gc__DisplayClass13_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject+MetaDynamic+<>c__DisplayClass13_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindDeleteIndex$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.Field({Static:false, Public:true }, "binder", $asm07.TypeRef("System.Dynamic.DeleteIndexBinder"));

    $.Field({Static:false, Public:true }, "indexes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Dynamic.DynamicObject+MetaDynamic"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.ExpandoClass */ 

(function ExpandoClass$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoClass", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindNewClass", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Keys", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTransitionList", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.WeakReference")]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueIndex", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Boolean, 
          $asm07.TypeRef("System.Dynamic.ExpandoObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueIndexCaseInsensitive", 
      new JSIL.MethodSignature($.Int32, [$.String, $asm07.TypeRef("System.Dynamic.ExpandoObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueIndexCaseSensitive", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_keys", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_hashCode", $.Int32);

    $.Field({Static:false, Public:false}, "_transitions", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm02.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.WeakReference")])]));

    $.Constant({Static:true , Public:false}, "EmptyHashCode", $.Int32, 6551);

    $.Field({Static:true , Public:false}, "Empty", $.Type);

    $.Property({Static:false, Public:false}, "Keys", $jsilcore.TypeRef("System.Array", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.ExpandoObject */ 

(function ExpandoObject$Members () {
  var $, $thisType;

































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ExpandoContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Class", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Dynamic.ExpandoClass"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetExpandoEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), [$asm07.TypeRef("System.Dynamic.ExpandoObject+ExpandoData"), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Dynamic.ExpandoObject_$lGetExpandoEnumerator$gd__46.__Type__]; });

    $.ExternalMethod({Static:false, Public:false}, "IsDeletedMember", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "PromoteClass", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "PromoteClassCore", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.ExpandoObject+ExpandoData"), [$asm07.TypeRef("System.Dynamic.ExpandoClass"), $asm07.TypeRef("System.Dynamic.ExpandoClass")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Add", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object]))
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.Object")])]), "Add")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Clear", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.Object")])]), "Clear")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])])
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.Object")])]), "Contains")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), $.Int32])
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.Object")])]), "CopyTo")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.Object")])]), "get_Count")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.Object")])]), "get_IsReadOnly")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])])
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.Object")])]), "Remove")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.Add", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IDictionary`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.Object")]), "Add")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IDictionary`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.Object")]), "ContainsKey")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IDictionary`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.Object")]), "get_Item")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.get_Keys", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.String]))
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IDictionary`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.Object")]), "get_Keys")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.get_Values", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.Object]))
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IDictionary`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.Object")]), "get_Values")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.Remove", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IDictionary`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.Object")]), "Remove")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IDictionary`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.Object")]), "set_Item")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IDictionary`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.Object")]), "TryGetValue")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]))
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.Object")])]), "GetEnumerator")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged", 
      JSIL.MethodSignature.Action($asm05.TypeRef("System.ComponentModel.PropertyChangedEventHandler"))
    )
      .Overrides($asm05.TypeRef("System.ComponentModel.INotifyPropertyChanged"), "add_PropertyChanged")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged", 
      JSIL.MethodSignature.Action($asm05.TypeRef("System.ComponentModel.PropertyChangedEventHandler"))
    )
      .Overrides($asm05.TypeRef("System.ComponentModel.INotifyPropertyChanged"), "remove_PropertyChanged")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    )
      .Overrides($asm07.TypeRef("System.Dynamic.IDynamicMetaObjectProvider"), "GetMetaObject")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "TryAddMember", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryDeleteValue", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.Int32, 
          $.String, $.Boolean, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.Int32, 
          $.String, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetValueForKey", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TrySetValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Int32, 
          $.Object, $.String, 
          $.Boolean, $.Boolean
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "LockObject", $.Object);

    $.Field({Static:false, Public:false}, "_data", $asm07.TypeRef("System.Dynamic.ExpandoObject+ExpandoData"));

    $.Field({Static:false, Public:false}, "_count", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Uninitialized", $.Object);

    $.Constant({Static:true , Public:false}, "AmbiguousMatchFound", $.Int32, -2);

    $.Constant({Static:true , Public:false}, "NoMatch", $.Int32, -1);

    $.Field({Static:false, Public:false}, "_propertyChanged", $asm05.TypeRef("System.ComponentModel.PropertyChangedEventHandler"));

    $.Property({Static:false, Public:false}, "Class", $asm07.TypeRef("System.Dynamic.ExpandoClass"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.Keys", $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.String]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.Values", $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.Object]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.Item", $.Object)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Count", $.Int32)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.IsReadOnly", $.Boolean)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Event({Static:false, Public:false, Virtual:true }, "System.ComponentModel.INotifyPropertyChanged.PropertyChanged", $asm05.TypeRef("System.ComponentModel.PropertyChangedEventHandler"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Dynamic.IDynamicMetaObjectProvider"), 
      /* 1 */ $asm02.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), 
      /* 3 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 5 */ $asm05.TypeRef("System.ComponentModel.INotifyPropertyChanged")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Dynamic.ExpandoObject+KeyCollectionDebugView */ 

(function KeyCollectionDebugView$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject+KeyCollectionDebugView", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.Field({Static:false, Public:false}, "collection", $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.String]));

    $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm02.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.ExpandoObject+KeyCollection */ 

(function KeyCollection$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject+KeyCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Dynamic.ExpandoObject"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckVersion", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.String]))
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Dynamic.ExpandoObject_KeyCollection_$lGetEnumerator$gd__15.__Type__]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expando", $asm07.TypeRef("System.Dynamic.ExpandoObject"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoVersion", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoData", $asm07.TypeRef("System.Dynamic.ExpandoObject+ExpandoData"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.String]), 
      /* 1 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Dynamic.ExpandoObject_KeyCollectionDebugView.__Type__]; })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count = {Count}"]; });

})();

/* class System.Dynamic.ExpandoObject+KeyCollection+<GetEnumerator>d__15 */ 

(function $lGetEnumerator$gd__15$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject+KeyCollection+<GetEnumerator>d__15", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.String$g.get_Current", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm02.TypeRef("System.String")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.String);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Dynamic.ExpandoObject+KeyCollection"));

    $.Field({Static:false, Public:false}, "$li$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "$ln$g5__2", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.String$g.Current", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.String]), 
      /* 1 */ $asm02.TypeRef("System.IDisposable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.ExpandoObject+ValueCollectionDebugView */ 

(function ValueCollectionDebugView$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject+ValueCollectionDebugView", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.Field({Static:false, Public:false}, "collection", $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.Object]));

    $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [$.Object]))
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm02.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.ExpandoObject+ValueCollection */ 

(function ValueCollection$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject+ValueCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Dynamic.ExpandoObject"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckVersion", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]))
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Dynamic.ExpandoObject_ValueCollection_$lGetEnumerator$gd__15.__Type__]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expando", $asm07.TypeRef("System.Dynamic.ExpandoObject"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoVersion", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoData", $asm07.TypeRef("System.Dynamic.ExpandoObject+ExpandoData"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.Object]), 
      /* 1 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Object]), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Dynamic.ExpandoObject_ValueCollectionDebugView.__Type__]; })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count = {Count}"]; });

})();

/* class System.Dynamic.ExpandoObject+ValueCollection+<GetEnumerator>d__15 */ 

(function $lGetEnumerator$gd__15$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject+ValueCollection+<GetEnumerator>d__15", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm02.TypeRef("System.Object")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.Object);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Dynamic.ExpandoObject+ValueCollection"));

    $.Field({Static:false, Public:false}, "$ldata$g5__1", $asm07.TypeRef("System.Dynamic.ExpandoObject+ExpandoData"));

    $.Field({Static:false, Public:false}, "$li$g5__2", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 1 */ $asm02.TypeRef("System.IDisposable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.ExpandoObject+MetaExpando */ 

(function MetaExpando$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Dynamic.DynamicMetaObject"), 
      Name: "System.Dynamic.ExpandoObject+MetaExpando", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Dynamic.ExpandoObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDynamicTestAndDefer", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm07.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $asm07.TypeRef("System.Dynamic.ExpandoClass"), 
          $asm07.TypeRef("System.Dynamic.ExpandoClass"), $asm07.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindDeleteMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DeleteMemberBinder")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindGetMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.GetMemberBinder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindGetOrInvokeMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm07.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $.String, 
          $.Boolean, $asm07.TypeRef("System.Dynamic.DynamicMetaObject"), 
          $asm02.TypeRef("System.Func`2", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindInvokeMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.InvokeMemberBinder"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindSetMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.SetMemberBinder"), $asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Dynamic.ExpandoObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetClassEnsureIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.ExpandoClass"), [
          $.String, $.Boolean, 
          $asm07.TypeRef("System.Dynamic.ExpandoObject"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Dynamic.ExpandoClass")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDynamicMemberNames", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Dynamic.ExpandoObject_MetaExpando_$lGetDynamicMemberNames$gd__6.__Type__]; });

    $.ExternalMethod({Static:false, Public:false}, "GetLimitedSelf", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRestrictions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Dynamic.BindingRestrictions"))
    );

    $.Property({Static:false, Public:true }, "Value", $asm07.TypeRef("System.Dynamic.ExpandoObject"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.ExpandoObject+MetaExpando+<>c__DisplayClass3_0 */ 

(function $l$gc__DisplayClass3_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject+MetaExpando+<>c__DisplayClass3_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindInvokeMember$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.Field({Static:false, Public:true }, "binder", $asm07.TypeRef("System.Dynamic.InvokeMemberBinder"));

    $.Field({Static:false, Public:true }, "args", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.ExpandoObject+MetaExpando+<GetDynamicMemberNames>d__6 */ 

(function $lGetDynamicMemberNames$gd__6$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject+MetaExpando+<GetDynamicMemberNames>d__6", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.String$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.String]))
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.String")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.String$g.get_Current", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm02.TypeRef("System.String")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.String);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Dynamic.ExpandoObject+MetaExpando"));

    $.Field({Static:false, Public:false}, "$lexpandoData$g5__1", $asm07.TypeRef("System.Dynamic.ExpandoObject+ExpandoData"));

    $.Field({Static:false, Public:false}, "$lklass$g5__2", $asm07.TypeRef("System.Dynamic.ExpandoClass"));

    $.Field({Static:false, Public:false}, "$li$g5__3", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.String$g.Current", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.String]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.ExpandoObject+ExpandoData */ 

(function ExpandoData$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject+ExpandoData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Dynamic.ExpandoClass"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Version", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAlignedSize", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateClass", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Dynamic.ExpandoClass")])
    );

    $.Field({Static:true , Public:false}, "Empty", $.Type);

    $.Field({Static:false, Public:false, ReadOnly:true }, "Class", $asm07.TypeRef("System.Dynamic.ExpandoClass"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_dataArray", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "_version", $.Int32);

    $.Property({Static:false, Public:false}, "Item", $.Object);

    $.Property({Static:false, Public:false}, "Version", $.Int32);

    $.Property({Static:false, Public:false}, "Length", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Dynamic.ExpandoObject+<GetExpandoEnumerator>d__46 */ 

(function $lGetExpandoEnumerator$gd__46$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject+<GetExpandoEnumerator>d__46", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.get_Current", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object]))
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm02.TypeRef("System.String"), $asm02.TypeRef("System.Object")])]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Dynamic.ExpandoObject"));

    $.Field({Static:false, Public:true }, "version", $.Int32);

    $.Field({Static:false, Public:true }, "data", $asm07.TypeRef("System.Dynamic.ExpandoObject+ExpandoData"));

    $.Field({Static:false, Public:false}, "$li$g5__1", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Current", $asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), 
      /* 1 */ $asm02.TypeRef("System.IDisposable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.GetIndexBinder */ 

(function GetIndexBinder$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.GetIndexBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Dynamic.CallInfo"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "FallbackGetIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackGetIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm07.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_CallInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Dynamic.CallInfo"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_callInfo", $asm07.TypeRef("System.Dynamic.CallInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "CallInfo", $asm07.TypeRef("System.Dynamic.CallInfo"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* interface System.Dynamic.IDynamicMetaObjectProvider */ 

JSIL.MakeInterface(
  "System.Dynamic.IDynamicMetaObjectProvider", true, [], function ($) {
    $.Method({}, "GetMetaObject", new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Linq.Expressions.Expression")]));
  }, [])
  .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

/* interface System.Dynamic.IInvokeOnGetBinder */ 

JSIL.MakeInterface(
  "System.Dynamic.IInvokeOnGetBinder", true, [], function ($) {
    $.Method({}, "get_InvokeOnGet", JSIL.MethodSignature.Return($.Boolean));
    $.Property({}, "InvokeOnGet");
  }, [])
  .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

/* class System.Dynamic.InvokeBinder */ 

(function InvokeBinder$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.InvokeBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Dynamic.CallInfo"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "FallbackInvoke", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackInvoke", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm07.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_CallInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Dynamic.CallInfo"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_callInfo", $asm07.TypeRef("System.Dynamic.CallInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "CallInfo", $asm07.TypeRef("System.Dynamic.CallInfo"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Dynamic.InvokeMemberBinder */ 

(function InvokeMemberBinder$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.InvokeMemberBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $asm07.TypeRef("System.Dynamic.CallInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackInvoke", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm07.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "FallbackInvokeMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackInvokeMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm07.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_CallInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Dynamic.CallInfo"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreCase", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_ignoreCase", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_callInfo", $asm07.TypeRef("System.Dynamic.CallInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IgnoreCase", $.Boolean)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "CallInfo", $asm07.TypeRef("System.Dynamic.CallInfo"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Dynamic.SetIndexBinder */ 

(function SetIndexBinder$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.SetIndexBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Dynamic.CallInfo"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "FallbackSetIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm07.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackSetIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $asm07.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_CallInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Dynamic.CallInfo"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_callInfo", $asm07.TypeRef("System.Dynamic.CallInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "CallInfo", $asm07.TypeRef("System.Dynamic.CallInfo"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Dynamic.SetMemberBinder */ 

(function SetMemberBinder$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.SetMemberBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "FallbackSetMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackSetMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $asm07.TypeRef("System.Dynamic.DynamicMetaObject"), 
          $asm07.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreCase", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_ignoreCase", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IgnoreCase", $.Boolean)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Dynamic.UnaryOperationBinder */ 

(function UnaryOperationBinder$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.UnaryOperationBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "FallbackUnaryOperation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackUnaryOperation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm07.TypeRef("System.Dynamic.DynamicMetaObject"), $asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Operation", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "OperationIsValid", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.Expressions.ExpressionType")])
    );

    $.Field({Static:false, Public:false}, "_operation", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Operation", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Dynamic.UpdateDelegates */ 

(function UpdateDelegates$Members () {
  var $, $thisType;











































  JSIL.MakeStaticClass("System.Dynamic.UpdateDelegates", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "NoMatch0", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Runtime.CompilerServices.CallSite")], ["TRet"])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatch1", 
      new JSIL.MethodSignature("!!1", [$asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0"], ["T0", "TRet"])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatch10", 
      new JSIL.MethodSignature("!!10", [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6", 
          "!!7", "!!8", 
          "!!9"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9", "TRet"
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatch2", 
      new JSIL.MethodSignature("!!2", [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1"
        ], ["T0", "T1", "TRet"])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatch3", 
      new JSIL.MethodSignature("!!3", [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2"
        ], ["T0", "T1", "T2", "TRet"])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatch4", 
      new JSIL.MethodSignature("!!4", [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3"
        ], [
          "T0", "T1", "T2", "T3", 
          "TRet"
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatch5", 
      new JSIL.MethodSignature("!!5", [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "TRet"
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatch6", 
      new JSIL.MethodSignature("!!6", [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "TRet"
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatch7", 
      new JSIL.MethodSignature("!!7", [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "TRet"
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatch8", 
      new JSIL.MethodSignature("!!8", [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6", 
          "!!7"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "TRet"
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatch9", 
      new JSIL.MethodSignature("!!9", [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6", 
          "!!7", "!!8"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "TRet"
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid1", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0"], ["T0"])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid10", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6", 
          "!!7", "!!8", 
          "!!9"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9"
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid2", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1"
        ], ["T0", "T1"])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid3", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2"
        ], ["T0", "T1", "T2"])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid4", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3"
        ], ["T0", "T1", "T2", "T3"])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid5", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4"
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid6", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5"
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid7", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6"
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid8", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6", 
          "!!7"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7"
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid9", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6", 
          "!!7", "!!8"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8"
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute0", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Runtime.CompilerServices.CallSite")], ["TRet"])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute1", 
      new JSIL.MethodSignature("!!1", [$asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0"], ["T0", "TRet"])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute10", 
      new JSIL.MethodSignature("!!10", [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6", 
          "!!7", "!!8", 
          "!!9"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9", "TRet"
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute2", 
      new JSIL.MethodSignature("!!2", [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1"
        ], ["T0", "T1", "TRet"])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute3", 
      new JSIL.MethodSignature("!!3", [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2"
        ], ["T0", "T1", "T2", "TRet"])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute4", 
      new JSIL.MethodSignature("!!4", [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3"
        ], [
          "T0", "T1", "T2", "T3", 
          "TRet"
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute5", 
      new JSIL.MethodSignature("!!5", [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "TRet"
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute6", 
      new JSIL.MethodSignature("!!6", [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "TRet"
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute7", 
      new JSIL.MethodSignature("!!7", [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "TRet"
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute8", 
      new JSIL.MethodSignature("!!8", [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6", 
          "!!7"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "TRet"
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute9", 
      new JSIL.MethodSignature("!!9", [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6", 
          "!!7", "!!8"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "TRet"
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid1", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0"], ["T0"])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid10", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6", 
          "!!7", "!!8", 
          "!!9"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9"
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid2", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1"
        ], ["T0", "T1"])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid3", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2"
        ], ["T0", "T1", "T2"])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid4", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3"
        ], ["T0", "T1", "T2", "T3"])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid5", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4"
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid6", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5"
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid7", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6"
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid8", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6", 
          "!!7"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7"
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid9", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6", 
          "!!7", "!!8"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8"
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Dynamic.Utils");
/* class System.Dynamic.Utils.TypeUtils */ 

(function TypeUtils$Members () {
  var $, $thisType;






































  JSIL.MakeStaticClass("System.Dynamic.Utils.TypeUtils", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AreEquivalent", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AreReferenceAssignable", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanCache", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "FindConversionOperator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.MethodInfo"), [
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Reflection.MethodInfo")]), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Type"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindGenericType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBooleanOperator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.MethodInfo"), [$asm02.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNonNullableType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm02.TypeRef("System.Type")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetNonRefType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm02.TypeRef("System.Type")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetNullableType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedCoercionMethod", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.MethodInfo"), [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasBuiltInEqualityOperator", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasIdentityPrimitiveOrNullableConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasReferenceConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasReferenceEquality", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsArithmetic", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsBool", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsContravariant", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsConvertible", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCovariant", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDelegate", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsFloatingPoint", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitBoxingConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitlyConvertible", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitNullableConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitNumericConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitReferenceConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsInteger", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsIntegerOrBool", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsInvariant", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsLegalExplicitVariantDelegateConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullableType", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsNumeric", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSameOrSubclass", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsUnsigned", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsUnsignedInt", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidInstanceType", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Reflection.MemberInfo"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateType", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.Constant({Static:true , Public:false}, "AnyStatic", $asm02.TypeRef("System.Reflection.BindingFlags"), 56);

    $.Constant({Static:true , Public:false}, "PublicStatic", $asm02.TypeRef("System.Reflection.MethodAttributes"), 22);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_mscorlib", $asm02.TypeRef("System.Reflection.Assembly"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_systemCore", $asm02.TypeRef("System.Reflection.Assembly"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Dynamic.Utils.CacheDict`2 */ 

(function CacheDict$b2$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.Utils.CacheDict`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AlignSize", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("TValue"), [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey"), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TValue")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "mask", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "entries", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.Utils.CacheDict`2+Entry", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]));

    $.Property({Static:false, Public:false}, "Item", $.GenericParameter("TValue"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Dynamic.Utils.CacheDict`2+Entry */ 

(function Entry$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.Utils.CacheDict`2+Entry", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.GenericParameter("TKey"), 
          $.GenericParameter("TValue")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "hash", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "key", $.GenericParameter("TKey"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "value", $.GenericParameter("TValue"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.Utils.CollectionExtensions */ 

(function CollectionExtensions$Members () {
  var $, $thisType;
















  JSIL.MakeStaticClass("System.Dynamic.Utils.CollectionExtensions", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AddFirst", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), "!!0"], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AddLast", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), "!!0"], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "All", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Copy", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "First", 
      new JSIL.MethodSignature("!!0", [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Last", 
      new JSIL.MethodSignature("!!0", [$asm02.TypeRef("System.Collections.Generic.IList`1", ["!!0"])], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ListEquals", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"])], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ListHashCode", 
      new JSIL.MethodSignature($.Int32, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Map", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!1"]), [$asm02.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"])], ["T", "U"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "RemoveFirst", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "RemoveLast", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Select", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"])], ["T", "U"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Dynamic.Utils.CollectionExtensions_$lSelect$gd__3$b2.__Type__]; })
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ToReadOnly", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Where", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Dynamic.Utils.CollectionExtensions_$lWhere$gd__5$b1.__Type__]; })
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Dynamic.Utils.CollectionExtensions+<Select>d__3`2 */ 

(function $lSelect$gd__3$b2$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.Utils.CollectionExtensions+<Select>d__3`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T", "U"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lU$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("U")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("U")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lU$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("U"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("U")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("U"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "enumerable", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:true }, "$l$g3__enumerable", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "select", $asm02.TypeRef("System.Func`2", [$.GenericParameter("T"), $.GenericParameter("U")]));

    $.Field({Static:false, Public:true }, "$l$g3__select", $asm02.TypeRef("System.Func`2", [$.GenericParameter("T"), $.GenericParameter("U")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lU$g.Current", $.GenericParameter("U"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("U")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("U")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.Utils.CollectionExtensions+<Where>d__5`1 */ 

(function $lWhere$gd__5$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.Utils.CollectionExtensions+<Where>d__5`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("T"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "enumerable", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:true }, "$l$g3__enumerable", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "where", $asm02.TypeRef("System.Func`2", [$.GenericParameter("T"), $.Boolean]));

    $.Field({Static:false, Public:true }, "$l$g3__where", $asm02.TypeRef("System.Func`2", [$.GenericParameter("T"), $.Boolean]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.Utils.EmptyReadOnlyCollection`1 */ 

(function EmptyReadOnlyCollection$b1$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Dynamic.Utils.EmptyReadOnlyCollection`1", false, ["T"], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:false}, "Instance", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.Utils.ContractUtils */ 

(function ContractUtils$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("System.Dynamic.Utils.ContractUtils", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_Unreachable", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "Requires", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "Requires", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "RequiresArrayRange", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), $.Int32, 
          $.Int32, $.String, 
          $.String
        ], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "RequiresNotEmpty", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"]), $.String], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "RequiresNotNull", 
      new JSIL.MethodSignature(null, [$.Object, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "RequiresNotNullItems", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), $.String], ["T"])
    );

    $.Property({Static:true , Public:false}, "Unreachable", $asm02.TypeRef("System.Exception"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.Utils.Helpers */ 

(function Helpers$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Dynamic.Utils.Helpers", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CommonNode", 
      new JSIL.MethodSignature("!!0", [
          "!!0", "!!0", 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!0"])
        ], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncrementCount", 
      new JSIL.MethodSignature(null, ["!!0", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", ["!!0", $.Int32])], ["T"])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.Utils.ReferenceEqualityComparer`1 */ 

(function ReferenceEqualityComparer$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Dynamic.Utils.ReferenceEqualityComparer`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T"), $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Instance", $asm07.TypeRef("System.Dynamic.Utils.ReferenceEqualityComparer`1", [$.GenericParameter("T")]));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.Utils.TypeExtensions */ 

(function TypeExtensions$Members () {
  var $, $thisType;







  JSIL.MakeStaticClass("System.Dynamic.Utils.TypeExtensions", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CreateDelegate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Delegate"), [
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm02.TypeRef("System.Type"), 
          $.Object
        ])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetMethodValidated", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.MethodInfo"), [
          $asm02.TypeRef("System.Type"), $.String, 
          $asm02.TypeRef("System.Reflection.BindingFlags"), $asm02.TypeRef("System.Reflection.Binder"), 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Reflection.ParameterModifier")])
        ])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetParametersCached", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Reflection.ParameterInfo")]), [$asm02.TypeRef("System.Reflection.MethodBase")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetReturnType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm02.TypeRef("System.Reflection.MethodBase")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsByRefParameter", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Reflection.ParameterInfo")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "MatchesArgumentTypes", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_ParamInfoCache", $asm07.TypeRef("System.Dynamic.Utils.CacheDict`2", [$asm02.TypeRef("System.Reflection.MethodBase"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Reflection.ParameterInfo")])]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

JSIL.DeclareNamespace("System.Security");
/* enum System.Security.ManifestKinds */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.ManifestKinds", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Deployment: 1, 
    Application: 2, 
    ApplicationAndDeployment: 3, 
  }
);

JSIL.DeclareNamespace("System.Security.Cryptography");
/* class System.Security.Cryptography.AesCng */ 

(function AesCng$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Security.Cryptography.Aes"), 
      Name: "System.Security.Cryptography.AesCng", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Security.Cryptography.CngProvider")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Security.Cryptography.CngProvider"), 
          $asm07.TypeRef("System.Security.Cryptography.CngKeyOpenOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDecryptor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDecryptor", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEncryptor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEncryptor", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateIV", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateKey", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Key", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeySize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Internal.Cryptography.ICngSymmetricAlgorithm.get_BaseKey", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Overrides($asm07.TypeRef("Internal.Cryptography.ICngSymmetricAlgorithm"), "get_BaseKey");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Internal.Cryptography.ICngSymmetricAlgorithm.get_BaseKeySize", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("Internal.Cryptography.ICngSymmetricAlgorithm"), "get_BaseKeySize");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Internal.Cryptography.ICngSymmetricAlgorithm.IsWeakKey", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Overrides($asm07.TypeRef("Internal.Cryptography.ICngSymmetricAlgorithm"), "IsWeakKey");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Internal.Cryptography.ICngSymmetricAlgorithm.set_BaseKey", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Overrides($asm07.TypeRef("Internal.Cryptography.ICngSymmetricAlgorithm"), "set_BaseKey");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Internal.Cryptography.ICngSymmetricAlgorithm.set_BaseKeySize", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Overrides($asm07.TypeRef("Internal.Cryptography.ICngSymmetricAlgorithm"), "set_BaseKeySize");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Key", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_KeySize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Constant({Static:true , Public:false}, "AlgorithmName", $.String, "AES");

    $.Field({Static:false, Public:false}, "_core", $asm07.TypeRef("Internal.Cryptography.CngSymmetricAlgorithmCore"));

    $.Property({Static:false, Public:true , Virtual:true }, "Key", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "KeySize", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "Internal.Cryptography.ICngSymmetricAlgorithm.BaseKey", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false, Virtual:true }, "Internal.Cryptography.ICngSymmetricAlgorithm.BaseKeySize", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm07.TypeRef("Internal.Cryptography.ICngSymmetricAlgorithm")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.AesCryptoServiceProvider */ 

(function AesCryptoServiceProvider$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Security.Cryptography.Aes"), 
      Name: "System.Security.Cryptography.AesCryptoServiceProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDecryptor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDecryptor", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CreateDecryptor", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEncryptor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEncryptor", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CreateEncryptor", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "FindSupportedKeySizes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Security.Cryptography.KeySizes")]), [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateIV", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateKey", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Key", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeySize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAlgorithmId", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.CapiNative+AlgorithmId"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Key", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_KeySize", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:true , Public:false}, "s_supportedKeySizes", $asm02.TypeRef("System.Array"));

    $.Field({Static:true , Public:false}, "s_defaultKeySize", $asm02.TypeRef("System.Int32"));

    $.Field({Static:false, Public:false}, "m_cspHandle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_key", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "Key", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "KeySize", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.AesManaged */ 

(function AesManaged$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Security.Cryptography.Aes"), 
      Name: "System.Security.Cryptography.AesManaged", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDecryptor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDecryptor", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEncryptor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEncryptor", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateIV", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateKey", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FeedbackSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IV", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Key", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeySize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Mode", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Security.Cryptography.CipherMode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Padding", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Security.Cryptography.PaddingMode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_FeedbackSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_IV", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Key", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_KeySize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Mode", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Security.Cryptography.CipherMode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Padding", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Security.Cryptography.PaddingMode"))
    );

    $.Field({Static:false, Public:false}, "m_rijndael", $asm02.TypeRef("System.Security.Cryptography.RijndaelManaged"));

    $.Property({Static:false, Public:true , Virtual:true }, "FeedbackSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IV", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "Key", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "KeySize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Mode", $asm02.TypeRef("System.Security.Cryptography.CipherMode"));

    $.Property({Static:false, Public:true , Virtual:true }, "Padding", $asm02.TypeRef("System.Security.Cryptography.PaddingMode"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.AsymmetricPaddingMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.AsymmetricPaddingMode", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 1, 
    Pkcs1: 2, 
    Oaep: 4, 
    Pss: 8, 
  }
);

/* struct System.Security.Cryptography.BCRYPT_DSA_KEY_BLOB_V2 */ 

(function BCRYPT_DSA_KEY_BLOB_V2$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.BCRYPT_DSA_KEY_BLOB_V2", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "dwMagic", $asm07.TypeRef("System.Security.Cryptography.BCryptNative+KeyBlobMagicNumber"));

    $.Field({Static:false, Public:true }, "cbKey", $.Int32);

    $.Field({Static:false, Public:true }, "hashAlgorithm", $asm07.TypeRef("System.Security.Cryptography.HASHALGORITHM_ENUM"));

    $.Field({Static:false, Public:true }, "standardVersion", $asm07.TypeRef("System.Security.Cryptography.DSAFIPSVERSION_ENUM"));

    $.Field({Static:false, Public:true }, "cbSeedLength", $.Int32);

    $.Field({Static:false, Public:true }, "cbGroupSize", $.Int32);

    $.Field({Static:false, Public:true }, "Count3", $.Byte);

    $.Field({Static:false, Public:true }, "Count2", $.Byte);

    $.Field({Static:false, Public:true }, "Count1", $.Byte);

    $.Field({Static:false, Public:true }, "Count0", $.Byte);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.HASHALGORITHM_ENUM */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.HASHALGORITHM_ENUM", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    DSA_HASH_ALGORITHM_SHA1: 0, 
    DSA_HASH_ALGORITHM_SHA256: 1, 
    DSA_HASH_ALGORITHM_SHA512: 2, 
  }
);

/* enum System.Security.Cryptography.DSAFIPSVERSION_ENUM */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.DSAFIPSVERSION_ENUM", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    DSA_FIPS186_2: 0, 
    DSA_FIPS186_3: 1, 
  }
);

/* class System.Security.Cryptography.BCryptNative */ 

(function BCryptNative$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ExportBCryptKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptKeyHandle"), $.String])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_BCryptSupported", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetInt32Property", 
      new JSIL.MethodSignature($.Int32, ["!!0", $.String], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetProperty", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), ["!!0", $.String], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ImportAsymmetricPublicKey", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptKeyHandle"), [$asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+CERT_PUBLIC_KEY_INFO"), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "MapAlgorithmIdToMagic", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Security.Cryptography.BCryptNative+KeyBlobMagicNumber")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OpenAlgorithm", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle"), [$.String, $.String])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Constant({Static:true , Public:false}, "BCRYPT_ECCPUBLIC_BLOB", $.String, "ECCPUBLICBLOB");

    $.Constant({Static:true , Public:false}, "BCRYPT_ECCPRIVATE_BLOB", $.String, "ECCPRIVATEBLOB");

    $.Field({Static:true , Public:false}, "s_haveBcryptSupported", $asm02.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false}, "s_bcryptSupported", $asm02.TypeRef("System.Boolean"));

    $.Property({Static:true , Public:false}, "BCryptSupported", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.BCryptNative+AlgorithmName */ 

(function AlgorithmName$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative+AlgorithmName", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "ECDHP256", $.String, "ECDH_P256");

    $.Constant({Static:true , Public:true }, "ECDHP384", $.String, "ECDH_P384");

    $.Constant({Static:true , Public:true }, "ECDHP521", $.String, "ECDH_P521");

    $.Constant({Static:true , Public:true }, "ECDsaP256", $.String, "ECDSA_P256");

    $.Constant({Static:true , Public:true }, "ECDsaP384", $.String, "ECDSA_P384");

    $.Constant({Static:true , Public:true }, "ECDsaP521", $.String, "ECDSA_P521");

    $.Constant({Static:true , Public:true }, "MD5", $.String, "MD5");

    $.Constant({Static:true , Public:true }, "Sha1", $.String, "SHA1");

    $.Constant({Static:true , Public:true }, "Sha256", $.String, "SHA256");

    $.Constant({Static:true , Public:true }, "Sha384", $.String, "SHA384");

    $.Constant({Static:true , Public:true }, "Sha512", $.String, "SHA512");

    $.Constant({Static:true , Public:false}, "Rsa", $.String, "RSA");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.BCryptNative+KeyBlobType */ 

(function KeyBlobType$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative+KeyBlobType", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "RsaFullPrivateBlob", $.String, "RSAFULLPRIVATEBLOB");

    $.Constant({Static:true , Public:false}, "RsaPrivateBlob", $.String, "RSAPRIVATEBLOB");

    $.Constant({Static:true , Public:false}, "RsaPublicBlob", $.String, "RSAPUBLICBLOB");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.BCryptNative+BCRYPT_RSAKEY_BLOB */ 

(function BCRYPT_RSAKEY_BLOB$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.BCryptNative+BCRYPT_RSAKEY_BLOB", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "Magic", $asm07.TypeRef("System.Security.Cryptography.BCryptNative+KeyBlobMagicNumber"));

    $.Field({Static:false, Public:false}, "BitLength", $.Int32);

    $.Field({Static:false, Public:false}, "cbPublicExp", $.Int32);

    $.Field({Static:false, Public:false}, "cbModulus", $.Int32);

    $.Field({Static:false, Public:false}, "cbPrime1", $.Int32);

    $.Field({Static:false, Public:false}, "cbPrime2", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.BCryptNative+ErrorCode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.BCryptNative+ErrorCode", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    BufferToSmall: -1073741789, 
    ObjectNameNotFound: -1073741772, 
    Success: 0, 
  }
);

/* class System.Security.Cryptography.BCryptNative+HashPropertyName */ 

(function HashPropertyName$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative+HashPropertyName", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "HashLength", $.String, "HashDigestLength");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.BCryptNative+KeyBlobMagicNumber */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.BCryptNative+KeyBlobMagicNumber", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    RsaPublic: 826364754, 
    ECDHPublicP256: 827016005, 
    ECDsaPublicP256: 827540293, 
    RsaPrivate: 843141970, 
    DsaPublicV2: 843206724, 
    DsaPrivateV2: 844517444, 
    RsaFullPrivateMagic: 859919186, 
    ECDHPublicP384: 860570437, 
    ECDsaPublicP384: 861094725, 
    ECDHPublicP521: 894124869, 
    ECDsaPublicP521: 894649157, 
    DsaPublic: 1112560452, 
    KeyDataBlob: 1296188491, 
    DsaPrivate: 1448104772, 
  }
);

/* struct System.Security.Cryptography.BCryptNative+BCRYPT_OAEP_PADDING_INFO */ 

(function BCRYPT_OAEP_PADDING_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.BCryptNative+BCRYPT_OAEP_PADDING_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "pszAlgId", $.String);

    $.Field({Static:false, Public:false}, "pbLabel", $.IntPtr);

    $.Field({Static:false, Public:false}, "cbLabel", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.BCryptNative+BCRYPT_PKCS1_PADDING_INFO */ 

(function BCRYPT_PKCS1_PADDING_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.BCryptNative+BCRYPT_PKCS1_PADDING_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "pszAlgId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.BCryptNative+BCRYPT_PSS_PADDING_INFO */ 

(function BCRYPT_PSS_PADDING_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.BCryptNative+BCRYPT_PSS_PADDING_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "pszAlgId", $.String);

    $.Field({Static:false, Public:false}, "cbSalt", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.BCryptNative+KeyDerivationFunction */ 

(function KeyDerivationFunction$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative+KeyDerivationFunction", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Hash", $.String, "HASH");

    $.Constant({Static:true , Public:true }, "Hmac", $.String, "HMAC");

    $.Constant({Static:true , Public:true }, "Tls", $.String, "TLS_PRF");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.BCryptNative+ProviderName */ 

(function ProviderName$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative+ProviderName", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "MicrosoftPrimitiveProvider", $.String, "Microsoft Primitive Provider");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.BCryptNative+ObjectPropertyName */ 

(function ObjectPropertyName$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative+ObjectPropertyName", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "ObjectLength", $.String, "ObjectLength");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.BCryptNative+UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;










  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative+UnsafeNativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "BCryptCreateHash", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.BCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptHashHandle")]), 
          $.IntPtr, $.Int32, 
          $.IntPtr, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "bcrypt.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "BCryptExportKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.BCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptKeyHandle"), $.IntPtr, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.Int32
        ]), 
      {
        Module: "bcrypt.dll", 
        Parameters: [
          {
            NativeType: "LPWStr"
          }, 
          {
            NativeType: "Array", 
            Out: true
          }, null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "BCryptFinishHash", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.BCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptHashHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ]), 
      {
        Module: "bcrypt.dll", 
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }, null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "BCryptGetAlgorithmProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.BCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
        ]), 
      {
        Module: "bcrypt.dll", 
        CharSet: 'unicode',
        EntryPoint: "BCryptGetProperty", 
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }, null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "BCryptGetHashProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.BCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptHashHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
        ]), 
      {
        Module: "bcrypt.dll", 
        CharSet: 'unicode',
        EntryPoint: "BCryptGetProperty", 
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }, null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "BCryptGetProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.BCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
        ]), 
      {
        Module: "bcrypt.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }, null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "BCryptHashData", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.BCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptHashHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ]), 
      {
        Module: "bcrypt.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "BCryptOpenAlgorithmProvider", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.BCryptNative+ErrorCode"), [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle")]), $.String, 
          $.String, $.Int32
        ]), 
      {
        Module: "bcrypt.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptImportPublicKeyInfoEx2", 
      new JSIL.MethodSignature($.Int32, [
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+CERT_PUBLIC_KEY_INFO")]), 
          $.Int32, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptKeyHandle")])
        ]), 
      {
        Module: "Crypt32.dll", 
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; })
    .Attribute($asm02.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* delegate System.Security.Cryptography.BCryptNative+BCryptPropertyGetter`1 */ 

JSIL.MakeDelegate("System.Security.Cryptography.BCryptNative+BCryptPropertyGetter`1", false, ["T"], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.BCryptNative+ErrorCode"), [
      new JSIL.GenericParameter("T", "System.Security.Cryptography.BCryptNative+BCryptPropertyGetter`1"), $asm02.TypeRef("System.String"), 
      $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Byte")]), $asm02.TypeRef("System.Int32"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Int32")]), $asm02.TypeRef("System.Int32")
    ]));

/* class System.Security.Cryptography.BCryptAlgorithmHandleCache */ 

(function BCryptAlgorithmHandleCache$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.BCryptAlgorithmHandleCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetCachedAlgorithmHandle", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle"), [$.String, $.String])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_algorithmHandles", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm02.TypeRef("System.WeakReference")]))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.BCryptHashAlgorithm */ 

(function BCryptHashAlgorithm$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.BCryptHashAlgorithm", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"), $.String])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "HashFinal", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "HashStream", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IO.Stream"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Initialize", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:true , Public:false}, "_algorithmCache", $asm07.TypeRef("System.Security.Cryptography.BCryptAlgorithmHandleCache"))
      .Attribute($asm02.TypeRef("System.ThreadStaticAttribute"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_algorithmHandle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_hashHandle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptHashHandle"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CngAlgorithm */ 

(function CngAlgorithm$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngAlgorithm", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Algorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDiffieHellmanP256", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDiffieHellmanP384", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDiffieHellmanP521", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDsaP256", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDsaP384", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDsaP521", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MD5", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Rsa", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Sha1", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Sha256", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Sha384", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Sha512", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:true , Public:false}, "s_ecdhp256", $asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Field({Static:true , Public:false}, "s_ecdhp384", $asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Field({Static:true , Public:false}, "s_ecdhp521", $asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Field({Static:true , Public:false}, "s_ecdsap256", $asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Field({Static:true , Public:false}, "s_ecdsap384", $asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Field({Static:true , Public:false}, "s_ecdsap521", $asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Field({Static:true , Public:false}, "s_md5", $asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Field({Static:true , Public:false}, "s_sha1", $asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Field({Static:true , Public:false}, "s_sha256", $asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Field({Static:true , Public:false}, "s_sha384", $asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Field({Static:true , Public:false}, "s_sha512", $asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Field({Static:true , Public:false}, "s_rsa", $asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Field({Static:false, Public:false}, "m_algorithm", $.String);

    $.Property({Static:false, Public:true }, "Algorithm", $.String);

    $.Property({Static:true , Public:true }, "Rsa", $.Type);

    $.Property({Static:true , Public:true }, "ECDiffieHellmanP256", $.Type);

    $.Property({Static:true , Public:true }, "ECDiffieHellmanP384", $.Type);

    $.Property({Static:true , Public:true }, "ECDiffieHellmanP521", $.Type);

    $.Property({Static:true , Public:true }, "ECDsaP256", $.Type);

    $.Property({Static:true , Public:true }, "ECDsaP384", $.Type);

    $.Property({Static:true , Public:true }, "ECDsaP521", $.Type);

    $.Property({Static:true , Public:true }, "MD5", $.Type);

    $.Property({Static:true , Public:true }, "Sha1", $.Type);

    $.Property({Static:true , Public:true }, "Sha256", $.Type);

    $.Property({Static:true , Public:true }, "Sha384", $.Type);

    $.Property({Static:true , Public:true }, "Sha512", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CngAlgorithmGroup */ 

(function CngAlgorithmGroup$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngAlgorithmGroup", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AlgorithmGroup", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DiffieHellman", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Dsa", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDiffieHellman", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDsa", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Rsa", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:true , Public:false}, "s_dh", $asm07.TypeRef("System.Security.Cryptography.CngAlgorithmGroup"));

    $.Field({Static:true , Public:false}, "s_dsa", $asm07.TypeRef("System.Security.Cryptography.CngAlgorithmGroup"));

    $.Field({Static:true , Public:false}, "s_ecdh", $asm07.TypeRef("System.Security.Cryptography.CngAlgorithmGroup"));

    $.Field({Static:true , Public:false}, "s_ecdsa", $asm07.TypeRef("System.Security.Cryptography.CngAlgorithmGroup"));

    $.Field({Static:true , Public:false}, "s_rsa", $asm07.TypeRef("System.Security.Cryptography.CngAlgorithmGroup"));

    $.Field({Static:false, Public:false}, "m_algorithmGroup", $.String);

    $.Property({Static:false, Public:true }, "AlgorithmGroup", $.String);

    $.Property({Static:true , Public:true }, "DiffieHellman", $.Type);

    $.Property({Static:true , Public:true }, "Dsa", $.Type);

    $.Property({Static:true , Public:true }, "ECDiffieHellman", $.Type);

    $.Property({Static:true , Public:true }, "ECDsa", $.Type);

    $.Property({Static:true , Public:true }, "Rsa", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.CngKeyHandleOpenOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CngKeyHandleOpenOptions", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    EphemeralKey: 1, 
  }
);

/* class System.Security.Cryptography.CngKey */ 

(function CngKey$Members () {
  var $, $thisType;






































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngKey", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "BuildKeyContainerPermission", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Permissions.KeyContainerPermission"), [$asm02.TypeRef("System.Security.Permissions.KeyContainerPermissionFlags")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Security.Cryptography.CngAlgorithm")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"), $.String, 
          $asm07.TypeRef("System.Security.Cryptography.CngKeyCreationParameters")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Delete", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Exists", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Exists", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm07.TypeRef("System.Security.Cryptography.CngProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Exists", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm07.TypeRef("System.Security.Cryptography.CngProvider"), 
          $asm07.TypeRef("System.Security.Cryptography.CngKeyOpenOptions")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Export", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.CngKeyBlobFormat")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Algorithm", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_AlgorithmGroup", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.CngAlgorithmGroup"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ExportPolicy", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.CngExportPolicies"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Handle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsEphemeral", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsMachineKey", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_KeyName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_KeySize", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_KeyUsage", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.CngKeyUsages"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ParentWindowHandle", 
      JSIL.MethodSignature.Return($.IntPtr)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Provider", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.CngProvider"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_UIPolicy", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.CngUIPolicy"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_UniqueName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.CngProperty"), [$.String, $asm07.TypeRef("System.Security.Cryptography.CngPropertyOptions")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "HasProperty", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm07.TypeRef("System.Security.Cryptography.CngPropertyOptions")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Import", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm07.TypeRef("System.Security.Cryptography.CngKeyBlobFormat")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Import", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm07.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"), 
          $asm07.TypeRef("System.Security.Cryptography.CngProvider")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Open", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Open", 
      new JSIL.MethodSignature($.Type, [$.String, $asm07.TypeRef("System.Security.Cryptography.CngProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Open", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm07.TypeRef("System.Security.Cryptography.CngProvider"), 
          $asm07.TypeRef("System.Security.Cryptography.CngKeyOpenOptions")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Open", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm07.TypeRef("System.Security.Cryptography.CngKeyHandleOpenOptions")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IsEphemeral", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ParentWindowHandle", 
      JSIL.MethodSignature.Action($.IntPtr)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetKeyProperties", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm07.TypeRef("System.Security.Cryptography.CngKeyCreationParameters")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "SetProperty", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.CngProperty"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_keyHandle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"));

    $.Field({Static:false, Public:false}, "m_kspHandle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"));

    $.Property({Static:false, Public:true }, "AlgorithmGroup", $asm07.TypeRef("System.Security.Cryptography.CngAlgorithmGroup"));

    $.Property({Static:false, Public:true }, "Algorithm", $asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Property({Static:false, Public:true }, "ExportPolicy", $asm07.TypeRef("System.Security.Cryptography.CngExportPolicies"));

    $.Property({Static:false, Public:true }, "Handle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"));

    $.Property({Static:false, Public:true }, "IsEphemeral", $.Boolean);

    $.Property({Static:false, Public:true }, "IsMachineKey", $.Boolean);

    $.Property({Static:false, Public:true }, "KeyName", $.String);

    $.Property({Static:false, Public:true }, "KeySize", $.Int32);

    $.Property({Static:false, Public:true }, "KeyUsage", $asm07.TypeRef("System.Security.Cryptography.CngKeyUsages"));

    $.Property({Static:false, Public:true }, "ParentWindowHandle", $.IntPtr);

    $.Property({Static:false, Public:true }, "Provider", $asm07.TypeRef("System.Security.Cryptography.CngProvider"));

    $.Property({Static:false, Public:true }, "ProviderHandle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"));

    $.Property({Static:false, Public:true }, "UniqueName", $.String);

    $.Property({Static:false, Public:true }, "UIPolicy", $asm07.TypeRef("System.Security.Cryptography.CngUIPolicy"));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CngKeyBlobFormat */ 

(function CngKeyBlobFormat$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngKeyBlobFormat", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_EccPrivateBlob", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_EccPublicBlob", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Format", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GenericPrivateBlob", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GenericPublicBlob", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_OpaqueTransportBlob", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Pkcs8PrivateBlob", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:true , Public:false}, "s_eccPrivate", $asm07.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"));

    $.Field({Static:true , Public:false}, "s_eccPublic", $asm07.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"));

    $.Field({Static:true , Public:false}, "s_genericPrivate", $asm07.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"));

    $.Field({Static:true , Public:false}, "s_genericPublic", $asm07.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"));

    $.Field({Static:true , Public:false}, "s_opaqueTransport", $asm07.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"));

    $.Field({Static:true , Public:false}, "s_pkcs8Private", $asm07.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"));

    $.Field({Static:false, Public:false}, "m_format", $.String);

    $.Property({Static:false, Public:true }, "Format", $.String);

    $.Property({Static:true , Public:true }, "EccPrivateBlob", $.Type);

    $.Property({Static:true , Public:true }, "EccPublicBlob", $.Type);

    $.Property({Static:true , Public:true }, "GenericPrivateBlob", $.Type);

    $.Property({Static:true , Public:true }, "GenericPublicBlob", $.Type);

    $.Property({Static:true , Public:true }, "OpaqueTransportBlob", $.Type);

    $.Property({Static:true , Public:true }, "Pkcs8PrivateBlob", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CngKeyCreationParameters */ 

(function CngKeyCreationParameters$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngKeyCreationParameters", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExportPolicy", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.Security.Cryptography.CngExportPolicies")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyCreationOptions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.CngKeyCreationOptions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyUsage", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.Security.Cryptography.CngKeyUsages")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.CngPropertyCollection"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_ParametersNoDemand", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.CngPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParentWindowHandle", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Provider", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.CngProvider"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UIPolicy", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.CngUIPolicy"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ExportPolicy", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.Security.Cryptography.CngExportPolicies")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyCreationOptions", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.CngKeyCreationOptions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyUsage", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.Security.Cryptography.CngKeyUsages")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ParentWindowHandle", 
      JSIL.MethodSignature.Action($.IntPtr)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Provider", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.CngProvider"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UIPolicy", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.CngUIPolicy"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_exportPolicy", $asm02.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.Security.Cryptography.CngExportPolicies")]));

    $.Field({Static:false, Public:false}, "m_keyCreationOptions", $asm07.TypeRef("System.Security.Cryptography.CngKeyCreationOptions"));

    $.Field({Static:false, Public:false}, "m_keyUsage", $asm02.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.Security.Cryptography.CngKeyUsages")]));

    $.Field({Static:false, Public:false}, "m_parameters", $asm07.TypeRef("System.Security.Cryptography.CngPropertyCollection"));

    $.Field({Static:false, Public:false}, "m_parentWindowHandle", $.IntPtr);

    $.Field({Static:false, Public:false}, "m_provider", $asm07.TypeRef("System.Security.Cryptography.CngProvider"));

    $.Field({Static:false, Public:false}, "m_uiPolicy", $asm07.TypeRef("System.Security.Cryptography.CngUIPolicy"));

    $.Property({Static:false, Public:true }, "ExportPolicy", $asm02.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.Security.Cryptography.CngExportPolicies")]));

    $.Property({Static:false, Public:true }, "KeyCreationOptions", $asm07.TypeRef("System.Security.Cryptography.CngKeyCreationOptions"));

    $.Property({Static:false, Public:true }, "KeyUsage", $asm02.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.Security.Cryptography.CngKeyUsages")]));

    $.Property({Static:false, Public:true }, "ParentWindowHandle", $.IntPtr);

    $.Property({Static:false, Public:true }, "Parameters", $asm07.TypeRef("System.Security.Cryptography.CngPropertyCollection"));

    $.Property({Static:false, Public:false}, "ParametersNoDemand", $asm07.TypeRef("System.Security.Cryptography.CngPropertyCollection"));

    $.Property({Static:false, Public:true }, "Provider", $asm07.TypeRef("System.Security.Cryptography.CngProvider"));

    $.Property({Static:false, Public:true }, "UIPolicy", $asm07.TypeRef("System.Security.Cryptography.CngUIPolicy"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CngProperty */ 

(function CngProperty$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CngProperty", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm07.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Options", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.CngPropertyOptions"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetValue", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.Field({Static:false, Public:false}, "m_name", $.String);

    $.Field({Static:false, Public:false}, "m_propertyOptions", $asm07.TypeRef("System.Security.Cryptography.CngPropertyOptions"));

    $.Field({Static:false, Public:false}, "m_value", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "m_hashCode", $asm02.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Options", $asm07.TypeRef("System.Security.Cryptography.CngPropertyOptions"));

    $.Property({Static:false, Public:false}, "Value", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CngPropertyCollection */ 

(function CngPropertyCollection$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm07.TypeRef("System.Security.Cryptography.CngProperty")]), 
      Name: "System.Security.Cryptography.CngPropertyCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CngProvider */ 

(function CngProvider$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MicrosoftSmartCardKeyStorageProvider", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MicrosoftSoftwareKeyStorageProvider", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Provider", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:true , Public:false}, "s_msSmartCardKsp", $asm07.TypeRef("System.Security.Cryptography.CngProvider"));

    $.Field({Static:true , Public:false}, "s_msSoftwareKsp", $asm07.TypeRef("System.Security.Cryptography.CngProvider"));

    $.Field({Static:false, Public:false}, "m_provider", $.String);

    $.Property({Static:false, Public:true }, "Provider", $.String);

    $.Property({Static:true , Public:true }, "MicrosoftSmartCardKeyStorageProvider", $.Type);

    $.Property({Static:true , Public:true }, "MicrosoftSoftwareKeyStorageProvider", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CngUIPolicy */ 

(function CngUIPolicy$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngUIPolicy", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"), $.String, 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CreationTitle", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FriendlyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProtectionLevel", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseContext", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "m_creationTitle", $.String);

    $.Field({Static:false, Public:false}, "m_description", $.String);

    $.Field({Static:false, Public:false}, "m_friendlyName", $.String);

    $.Field({Static:false, Public:false}, "m_protectionLevel", $asm07.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"));

    $.Field({Static:false, Public:false}, "m_useContext", $.String);

    $.Property({Static:false, Public:true }, "CreationTitle", $.String);

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:true }, "FriendlyName", $.String);

    $.Property({Static:false, Public:true }, "ProtectionLevel", $asm07.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"));

    $.Property({Static:false, Public:true }, "UseContext", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CapiHashAlgorithm */ 

(function CapiHashAlgorithm$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CapiHashAlgorithm", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Security.Cryptography.CapiNative+ProviderType"), 
          $asm07.TypeRef("System.Security.Cryptography.CapiNative+AlgorithmId")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "HashFinal", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Initialize", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_algorithmId", $asm07.TypeRef("System.Security.Cryptography.CapiNative+AlgorithmId"));

    $.Field({Static:false, Public:false}, "m_cspHandle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_hashHandle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CapiNative */ 

(function CapiNative$Members () {
  var $, $thisType;















  JSIL.MakeStaticClass("System.Security.Cryptography.CapiNative", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AcquireCsp", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), [
          $.String, $.String, 
          $asm07.TypeRef("System.Security.Cryptography.CapiNative+ProviderType"), $asm07.TypeRef("System.Security.Cryptography.CapiNative+CryptAcquireContextFlags"), 
          $.Boolean
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CryptFindOIDInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.CapiNative+CRYPT_OID_INFO"), [
          $.UInt32, $.IntPtr, 
          $asm05.TypeRef("System.Security.Cryptography.OidGroup")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CryptFindOIDInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.CapiNative+CRYPT_OID_INFO"), [
          $.UInt32, $asm07.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle"), 
          $asm05.TypeRef("System.Security.Cryptography.OidGroup")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DecodeObject", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.IntPtr, 
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DecodeObject", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle")]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ExportSymmetricKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetAlgorithmName", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Security.Cryptography.CapiNative+AlgorithmId")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHashParameter", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"), $asm07.TypeRef("System.Security.Cryptography.CapiNative+HashParameter")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetProviderParameterStruct", 
      new JSIL.MethodSignature("!!0", [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm07.TypeRef("System.Security.Cryptography.CapiNative+ProviderParameter"), 
          $asm07.TypeRef("System.Security.Cryptography.CapiNative+ProviderParameterFlags")
        ], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "HResultForVerificationResult", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Security.Cryptography.SignatureVerificationResult")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ImportSymmetricKey", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm07.TypeRef("System.Security.Cryptography.CapiNative+AlgorithmId"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "LocalAlloc", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle"), [$.UInt32, $.IntPtr])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetKeyParameter", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm07.TypeRef("System.Security.Cryptography.CapiNative+KeyParameter"), 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetKeyParameter", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm07.TypeRef("System.Security.Cryptography.CapiNative+KeyParameter"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Constant({Static:true , Public:false}, "ALG_CLASS_SIGNATURE", $.UInt32, 8192);

    $.Constant({Static:true , Public:false}, "ALG_TYPE_RSA", $.UInt32, 1024);

    $.Constant({Static:true , Public:false}, "ALG_SID_RSA_ANY", $.UInt32, 0);

    $.Constant({Static:true , Public:false}, "ALG_SID_DSS_ANY", $.UInt32, 0);

    $.Constant({Static:true , Public:false}, "ALG_TYPE_DSS", $.UInt32, 512);

    $.Constant({Static:true , Public:false}, "ALG_CLASS_KEY_EXCHANGE", $.UInt32, 40960);

    $.Constant({Static:true , Public:false}, "CALG_RSA_SIGN", $.UInt32, 9216);

    $.Constant({Static:true , Public:false}, "CALG_DSS_SIGN", $.UInt32, 8704);

    $.Constant({Static:true , Public:false}, "CALG_RSA_KEYX", $.UInt32, 41984);

    $.Constant({Static:true , Public:false}, "CNG_RSA_PUBLIC_KEY_BLOB", $.UInt32, 72);

    $.Constant({Static:true , Public:false}, "X509_DSS_PUBLICKEY", $.UInt32, 38);

    $.Constant({Static:true , Public:false}, "X509_DSS_PARAMETERS", $.UInt32, 39);

    $.Constant({Static:true , Public:false}, "X509_ASN_ENCODING", $.UInt32, 1);

    $.Constant({Static:true , Public:false}, "PKCS_7_ASN_ENCODING", $.UInt32, 65536);

    $.Constant({Static:true , Public:false}, "CRYPT_OID_INFO_OID_KEY", $.UInt32, 1);

    $.Constant({Static:true , Public:false}, "LMEM_FIXED", $.UInt32, 0);

    $.Constant({Static:true , Public:false}, "LMEM_ZEROINIT", $.UInt32, 64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.CapiNative+AlgorithmClass */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CapiNative+AlgorithmClass", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    DataEncryption: 24576, 
    Hash: 32768, 
  }
);

/* enum System.Security.Cryptography.CapiNative+AlgorithmType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CapiNative+AlgorithmType", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Any: 0, 
    Block: 1536, 
  }
);

/* enum System.Security.Cryptography.CapiNative+AlgorithmSubId */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CapiNative+AlgorithmSubId", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    MD5: 3, 
    Sha1: 4, 
    Sha256: 12, 
    Sha384: 13, 
    Aes128: 14, 
    Sha512: 14, 
    Aes192: 15, 
    Aes256: 16, 
  }
);

/* enum System.Security.Cryptography.CapiNative+AlgorithmId */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CapiNative+AlgorithmId", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Aes128: 26126, 
    Aes192: 26127, 
    Aes256: 26128, 
    MD5: 32771, 
    Sha1: 32772, 
    Sha256: 32780, 
    Sha384: 32781, 
    Sha512: 32782, 
  }
);

/* enum System.Security.Cryptography.CapiNative+CryptAcquireContextFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CapiNative+CryptAcquireContextFlags", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    VerifyContext: -268435456, 
    None: 0, 
  }
);

/* enum System.Security.Cryptography.CapiNative+ErrorCode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CapiNative+ErrorCode", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    BadData: -2146893819, 
    BadAlgorithmId: -2146893816, 
    ProviderTypeNotDefined: -2146893801, 
    KeysetNotDefined: -2146893799, 
    Success: 0, 
    MoreData: 234, 
    NoMoreItems: 259, 
  }
);

/* enum System.Security.Cryptography.CapiNative+HashParameter */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CapiNative+HashParameter", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    AlgorithmId: 1, 
    HashValue: 2, 
    HashSize: 4, 
  }
);

/* enum System.Security.Cryptography.CapiNative+KeyBlobType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CapiNative+KeyBlobType", 
    BaseType: $asm02.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    PlainText: 8, 
  }
);

/* enum System.Security.Cryptography.CapiNative+KeyFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CapiNative+KeyFlags", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Exportable: 1, 
  }
);

/* enum System.Security.Cryptography.CapiNative+KeyParameter */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CapiNative+KeyParameter", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    IV: 1, 
    Mode: 4, 
    ModeBits: 5, 
  }
);

/* class System.Security.Cryptography.CapiNative+ProviderNames */ 

(function ProviderNames$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Security.Cryptography.CapiNative+ProviderNames", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "MicrosoftEnhancedRsaAes", $.String, "Microsoft Enhanced RSA and AES Cryptographic Provider");

    $.Constant({Static:true , Public:true }, "MicrosoftEnhancedRsaAesPrototype", $.String, "Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.CapiNative+ProviderParameter */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CapiNative+ProviderParameter", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    EnumerateAlgorithms: 1, 
  }
);

/* enum System.Security.Cryptography.CapiNative+ProviderParameterFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CapiNative+ProviderParameterFlags", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    RestartEnumeration: 1, 
  }
);

/* enum System.Security.Cryptography.CapiNative+ProviderType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CapiNative+ProviderType", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    RsaAes: 24, 
  }
);

/* struct System.Security.Cryptography.CapiNative+BLOBHEADER */ 

(function BLOBHEADER$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CapiNative+BLOBHEADER", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "bType", $asm07.TypeRef("System.Security.Cryptography.CapiNative+KeyBlobType"));

    $.Field({Static:false, Public:true }, "bVersion", $.Byte);

    $.Field({Static:false, Public:true }, "reserved", $.Int16);

    $.Field({Static:false, Public:true }, "aiKeyAlg", $asm07.TypeRef("System.Security.Cryptography.CapiNative+AlgorithmId"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CapiNative+CRYPTOAPI_BLOB */ 

(function CRYPTOAPI_BLOB$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CapiNative+CRYPTOAPI_BLOB", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "cbData", $.Int32);

    $.Field({Static:false, Public:true }, "pbData", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CapiNative+CERT_DSS_PARAMETERS */ 

(function CERT_DSS_PARAMETERS$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CapiNative+CERT_DSS_PARAMETERS", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "p", $asm07.TypeRef("System.Security.Cryptography.CapiNative+CRYPTOAPI_BLOB"));

    $.Field({Static:false, Public:true }, "q", $asm07.TypeRef("System.Security.Cryptography.CapiNative+CRYPTOAPI_BLOB"));

    $.Field({Static:false, Public:true }, "g", $asm07.TypeRef("System.Security.Cryptography.CapiNative+CRYPTOAPI_BLOB"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CapiNative+PROV_ENUMALGS */ 

(function PROV_ENUMALGS$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CapiNative+PROV_ENUMALGS", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "aiAlgId", $asm07.TypeRef("System.Security.Cryptography.CapiNative+AlgorithmId"));

    $.Field({Static:false, Public:true }, "dwBitLen", $.Int32);

    $.Field({Static:false, Public:true }, "dwNameLen", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CapiNative+CRYPT_OID_INFO */ 

(function CRYPT_OID_INFO$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CapiNative+CRYPT_OID_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "cbSize", $.UInt32);

    $.Field({Static:false, Public:false}, "pszOID", $.String);

    $.Field({Static:false, Public:false}, "pwszName", $.String);

    $.Field({Static:false, Public:false}, "dwGroupId", $.UInt32);

    $.Field({Static:false, Public:false}, "Algid", $.UInt32);

    $.Field({Static:false, Public:false}, "ExtraInfo", $asm07.TypeRef("System.Security.Cryptography.CapiNative+CRYPTOAPI_BLOB"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CapiNative+UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;




















  JSIL.MakeStaticClass("System.Security.Cryptography.CapiNative+UnsafeNativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:true }, "_AxlPublicKeyBlobToPublicKeyToken", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Security.Cryptography.CapiNative+CRYPTOAPI_BLOB")]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeAxlBufferHandle")])]), 
      {
        Module: "clr", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CryptAcquireContext", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle")]), $.String, 
          $.String, $asm07.TypeRef("System.Security.Cryptography.CapiNative+ProviderType"), 
          $asm07.TypeRef("System.Security.Cryptography.CapiNative+CryptAcquireContextFlags")
        ]), 
      {
        Module: "advapi32", 
        CharSet: 'unicode',
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CryptCreateHash", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm07.TypeRef("System.Security.Cryptography.CapiNative+AlgorithmId"), 
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle")])
        ]), 
      {
        Module: "advapi32", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptDecodeObject", 
      new JSIL.MethodSignature($.Boolean, [
          $.UInt32, $.IntPtr, 
          $.IntPtr, $.UInt32, 
          $.UInt32, $asm07.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle"), 
          $.IntPtr
        ]), 
      {
        Module: "Crypt32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptDecodeObject", 
      new JSIL.MethodSignature($.Boolean, [
          $.UInt32, $.IntPtr, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.UInt32, 
          $.UInt32, $asm07.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle"), 
          $.IntPtr
        ]), 
      {
        Module: "Crypt32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CryptDecrypt", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"), 
          $.Boolean, $.Int32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "advapi32", 
        Parameters: [
          {
            NativeType: "Boolean"
          }, null
          , null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CryptDuplicateKey", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $.IntPtr, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle")])
        ]), 
      {
        Module: "advapi32", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm02.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.PInvokeMethod({Static:true , Public:true }, "CryptEncrypt", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"), 
          $.Boolean, $.Int32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.Int32
        ]), 
      {
        Module: "advapi32", 
        Parameters: [
          {
            NativeType: "Boolean"
          }, null
          , null
          , null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CryptExportKey", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "advapi32", 
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }, null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptFindOIDInfo", 
      new JSIL.MethodSignature($.IntPtr, [
          $.UInt32, $.IntPtr, 
          $asm05.TypeRef("System.Security.Cryptography.OidGroup")
        ]), 
      {
        Module: "Crypt32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptFindOIDInfo", 
      new JSIL.MethodSignature($.IntPtr, [
          $.UInt32, $asm07.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle"), 
          $asm05.TypeRef("System.Security.Cryptography.OidGroup")
        ]), 
      {
        Module: "Crypt32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CryptGenKey", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm07.TypeRef("System.Security.Cryptography.CapiNative+AlgorithmId"), 
          $asm07.TypeRef("System.Security.Cryptography.CapiNative+KeyFlags"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle")])
        ]), 
      {
        Module: "advapi32", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CryptGenRandom", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "advapi32", 
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }
        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CryptGetHashParam", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"), $asm07.TypeRef("System.Security.Cryptography.CapiNative+HashParameter"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.Int32
        ]), 
      {
        Module: "advapi32", 
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }, null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CryptGetProvParam", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm07.TypeRef("System.Security.Cryptography.CapiNative+ProviderParameter"), 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm07.TypeRef("System.Security.Cryptography.CapiNative+ProviderParameterFlags")
        ]), 
      {
        Module: "advapi32", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CryptHashData", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ]), 
      {
        Module: "advapi32", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CryptImportKey", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), 
          $asm07.TypeRef("System.Security.Cryptography.CapiNative+KeyFlags"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle")])
        ]), 
      {
        Module: "advapi32", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , null
          , null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CryptSetKeyParam", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm07.TypeRef("System.Security.Cryptography.CapiNative+KeyParameter"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32
        ]), 
      {
        Module: "advapi32", 
        Parameters: [
          {
            NativeType: "Array"
          }, null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "LocalAlloc", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle"), [$.UInt32, $.IntPtr]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; })
    .Attribute($asm02.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* class System.Security.Cryptography.SafeLocalAllocHandle */ 

(function SafeLocalAllocHandle$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.Security.Cryptography.SafeLocalAllocHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidHandle", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "LocalFree", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.ExternalMethod({Static:false, Public:false}, "Read", 
      new JSIL.MethodSignature("!!0", [$.Int32], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Property({Static:true , Public:false}, "InvalidHandle", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.X509Utils */ 

(function X509Utils$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.X509Utils", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToAnsiPtr", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.SafeLocalAllocHandle"), [$.String])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.EncryptionMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.EncryptionMode", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Encrypt: 0, 
    Decrypt: 1, 
  }
);

/* class System.Security.Cryptography.CapiSymmetricAlgorithm */ 

(function CapiSymmetricAlgorithm$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CapiSymmetricAlgorithm", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm02.TypeRef("System.Security.Cryptography.CipherMode"), 
          $asm02.TypeRef("System.Security.Cryptography.PaddingMode"), $asm07.TypeRef("System.Security.Cryptography.EncryptionMode")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "DecryptBlocks", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "DepadBlock", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EncryptBlocks", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReuseTransform", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTransformMultipleBlocks", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InputBlockSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OutputBlockSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "PadBlock", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ProcessIV", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $asm02.TypeRef("System.Security.Cryptography.CipherMode")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RawDecryptBlocks", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetupKey", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm02.TypeRef("System.Security.Cryptography.CipherMode"), $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TransformBlock", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TransformFinalBlock", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_blockSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_depadBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "m_encryptionMode", $asm07.TypeRef("System.Security.Cryptography.EncryptionMode"));

    $.Field({Static:false, Public:false}, "m_key", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_paddingMode", $asm02.TypeRef("System.Security.Cryptography.PaddingMode"));

    $.Field({Static:false, Public:false}, "m_provider", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReuseTransform", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTransformMultipleBlocks", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "InputBlockSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "OutputBlockSize", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"), 
      /* 1 */ $asm02.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.DSACng */ 

(function DSACng$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Security.Cryptography.DSA"), 
      Name: "System.Security.Cryptography.DSACng", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.CngKey"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "AdjustHashSizeIfNecessary", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputeQLength", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateSignature", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExportParameters", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.DSAParameters"), [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromBigEndian", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateV1DsaBlob", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.BinaryWriter"), $asm02.TypeRef("System.Security.Cryptography.DSAParameters"), 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateV2DsaBlob", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.IO.BinaryWriter"), $asm02.TypeRef("System.Security.Cryptography.DSAParameters"), 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Key", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.CngKey"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeyExchangeAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LegalKeySizes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Security.Cryptography.KeySizes")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SignatureAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Security.Cryptography.HashAlgorithmName")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Security.Cryptography.HashAlgorithmName")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ImportParameters", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Security.Cryptography.DSAParameters"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Key", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.CngKey"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ToBigEndian", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "VerifySignature", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "_key", $asm07.TypeRef("System.Security.Cryptography.CngKey"));

    $.Field({Static:true , Public:false}, "s_legalKeySizes", $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Security.Cryptography.KeySizes")]));

    $.Field({Static:true , Public:false}, "s_cngAlgorithmDsa", $asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Constant({Static:true , Public:false}, "MaxV1KeySize", $.Int32, 1024);

    $.Constant({Static:true , Public:false}, "Sha1HashOutputSize", $.Int32, 20);

    $.Constant({Static:true , Public:false}, "Sha256HashOutputSize", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "Sha512HashOutputSize", $.Int32, 64);

    $.Property({Static:false, Public:true }, "Key", $asm07.TypeRef("System.Security.Cryptography.CngKey"));

    $.Property({Static:false, Public:true , Virtual:true }, "LegalKeySizes", $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Security.Cryptography.KeySizes")]));

    $.Property({Static:false, Public:true , Virtual:true }, "SignatureAlgorithm", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "KeyExchangeAlgorithm", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.ECDiffieHellman */ 

(function ECDiffieHellman$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"), 
      Name: "System.Security.Cryptography.ECDiffieHellman", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DerivedClassMustOverride", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, "DeriveKeyFromHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"), $asm02.TypeRef("System.Security.Cryptography.HashAlgorithmName")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeriveKeyFromHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"), $asm02.TypeRef("System.Security.Cryptography.HashAlgorithmName"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DeriveKeyFromHmac", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"), $asm02.TypeRef("System.Security.Cryptography.HashAlgorithmName"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeriveKeyFromHmac", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"), $asm02.TypeRef("System.Security.Cryptography.HashAlgorithmName"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeriveKeyMaterial", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeriveKeyTls", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeyExchangeAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PublicKey", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SignatureAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "KeyExchangeAlgorithm", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SignatureAlgorithm", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "PublicKey", $asm07.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.ECDiffieHellmanPublicKey */ 

(function ECDiffieHellmanPublicKey$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.ECDiffieHellmanPublicKey", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToByteArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXmlString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "m_keyBlob", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Hash: 0, 
    Hmac: 1, 
    Tls: 2, 
  }
);

/* class System.Security.Cryptography.ECDiffieHellmanCng */ 

(function ECDiffieHellmanCng$Members () {
  var $, $thisType;


































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.Cryptography.ECDiffieHellman"), 
      Name: "System.Security.Cryptography.ECDiffieHellmanCng", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.CngKey"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeriveKeyFromHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"), $asm02.TypeRef("System.Security.Cryptography.HashAlgorithmName"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeriveKeyFromHmac", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"), $asm02.TypeRef("System.Security.Cryptography.HashAlgorithmName"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeriveKeyMaterial", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey")])
    );

    $.ExternalMethod({Static:false, Public:true }, "DeriveKeyMaterial", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.CngKey")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeriveKeyTls", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "DeriveSecretAgreementHandle", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), [$asm07.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey")])
    );

    $.ExternalMethod({Static:false, Public:true }, "DeriveSecretAgreementHandle", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), [$asm07.TypeRef("System.Security.Cryptography.CngKey")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FromXmlString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "FromXmlString", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Security.Cryptography.ECKeyXmlFormat")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HashAlgorithm", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HmacKey", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Key", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.CngKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyDerivationFunction", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Label", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PublicKey", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecretAppend", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecretPrepend", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Seed", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseSecretAgreementAsHmacKey", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HashAlgorithm", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HmacKey", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Key", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.CngKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyDerivationFunction", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Label", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecretAppend", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecretPrepend", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Seed", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXmlString", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToXmlString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Security.Cryptography.ECKeyXmlFormat")])
    );

    $.Field({Static:true , Public:false}, "s_legalKeySizes", $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Security.Cryptography.KeySizes")]));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Field({Static:false, Public:false}, "m_hmacKey", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "m_key", $asm07.TypeRef("System.Security.Cryptography.CngKey"));

    $.Field({Static:false, Public:false}, "m_kdf", $asm07.TypeRef("System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction"));

    $.Field({Static:false, Public:false}, "m_label", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "m_secretAppend", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "m_secretPrepend", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "m_seed", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "HashAlgorithm", $asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Property({Static:false, Public:true }, "HmacKey", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "KeyDerivationFunction", $asm07.TypeRef("System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction"));

    $.Property({Static:false, Public:true }, "Label", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "SecretAppend", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "SecretPrepend", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "Seed", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "Key", $asm07.TypeRef("System.Security.Cryptography.CngKey"));

    $.Property({Static:false, Public:true , Virtual:true }, "PublicKey", $asm07.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"));

    $.Property({Static:false, Public:true }, "UseSecretAgreementAsHmacKey", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.ECDiffieHellmanCngPublicKey */ 

(function ECDiffieHellmanCngPublicKey$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"), 
      Name: "System.Security.Cryptography.ECDiffieHellmanCngPublicKey", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.CngKey"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "FromByteArray", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm07.TypeRef("System.Security.Cryptography.CngKeyBlobFormat")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FromXmlString", 
      new JSIL.MethodSignature($.Type, [$.String])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_BlobFormat", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Import", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.CngKey"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXmlString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "m_key", $asm07.TypeRef("System.Security.Cryptography.CngKey"));

    $.Field({Static:false, Public:false}, "m_format", $asm07.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"));

    $.Property({Static:false, Public:true }, "BlobFormat", $asm07.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.ECDsa */ 

(function ECDsa$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"), 
      Name: "System.Security.Cryptography.ECDsa", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DerivedClassMustOverride", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeyExchangeAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SignatureAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "HashAlgorithmNameNullOrEmpty", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Security.Cryptography.HashAlgorithmName")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Security.Cryptography.HashAlgorithmName")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SignData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm02.TypeRef("System.Security.Cryptography.HashAlgorithmName")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SignData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Security.Cryptography.HashAlgorithmName")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SignData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Security.Cryptography.HashAlgorithmName")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SignHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true }, "VerifyData", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm02.TypeRef("System.Security.Cryptography.HashAlgorithmName")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "VerifyData", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm02.TypeRef("System.Security.Cryptography.HashAlgorithmName")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "VerifyData", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm02.TypeRef("System.Security.Cryptography.HashAlgorithmName")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "VerifyHash", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "KeyExchangeAlgorithm", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SignatureAlgorithm", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.ECDsaCng */ 

(function ECDsaCng$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.Cryptography.ECDsa"), 
      Name: "System.Security.Cryptography.ECDsaCng", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.CngKey"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FromXmlString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "FromXmlString", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Security.Cryptography.ECKeyXmlFormat")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HashAlgorithm", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Key", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.CngKey"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KeyHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Security.Cryptography.HashAlgorithmName")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Security.Cryptography.HashAlgorithmName")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEccAlgorithmGroup", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Security.Cryptography.CngAlgorithmGroup")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HashAlgorithm", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Key", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.CngKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SignData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true }, "SignData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "SignData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm02.TypeRef("System.IO.Stream")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SignHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXmlString", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToXmlString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Security.Cryptography.ECKeyXmlFormat")])
    );

    $.ExternalMethod({Static:false, Public:true }, "VerifyData", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true }, "VerifyData", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "VerifyData", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "VerifyHash", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:true , Public:false}, "s_legalKeySizes", $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Security.Cryptography.KeySizes")]));

    $.Field({Static:false, Public:false}, "m_key", $asm07.TypeRef("System.Security.Cryptography.CngKey"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Property({Static:false, Public:true }, "HashAlgorithm", $asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Property({Static:false, Public:true }, "Key", $asm07.TypeRef("System.Security.Cryptography.CngKey"));

    $.Property({Static:false, Public:false}, "KeyHandle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.ECKeyXmlFormat */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.ECKeyXmlFormat", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Rfc4050: 0, 
  }
);

/* class System.Security.Cryptography.ManifestSignatureInformation */ 

(function ManifestSignatureInformation$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.ManifestSignatureInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.ManifestKinds"), $asm07.TypeRef("System.Security.Cryptography.StrongNameSignatureInformation"), 
          $asm07.TypeRef("System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AuthenticodeSignature", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Manifest", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.ManifestKinds"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StrongNameSignature", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.StrongNameSignatureInformation"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetManifestXml", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Xml.XmlDocument"), [$asm02.TypeRef("System.ActivationContext"), $asm07.TypeRef("System.Security.ManifestKinds")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "VerifySignature", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.ManifestSignatureInformationCollection"), [$asm02.TypeRef("System.ActivationContext")])
    );

    $.ExternalMethod({Static:true , Public:true }, "VerifySignature", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.ManifestSignatureInformationCollection"), [$asm02.TypeRef("System.ActivationContext"), $asm07.TypeRef("System.Security.ManifestKinds")])
    );

    $.ExternalMethod({Static:true , Public:true }, "VerifySignature", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.ManifestSignatureInformationCollection"), [
          $asm02.TypeRef("System.ActivationContext"), $asm07.TypeRef("System.Security.ManifestKinds"), 
          $asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), $asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_manifest", $asm07.TypeRef("System.Security.ManifestKinds"));

    $.Field({Static:false, Public:false}, "m_strongNameSignature", $asm07.TypeRef("System.Security.Cryptography.StrongNameSignatureInformation"));

    $.Field({Static:false, Public:false}, "m_authenticodeSignature", $asm07.TypeRef("System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation"));

    $.Property({Static:false, Public:true }, "AuthenticodeSignature", $asm07.TypeRef("System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation"));

    $.Property({Static:false, Public:true }, "Manifest", $asm07.TypeRef("System.Security.ManifestKinds"));

    $.Property({Static:false, Public:true }, "StrongNameSignature", $asm07.TypeRef("System.Security.Cryptography.StrongNameSignatureInformation"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.ManifestSignatureInformationCollection */ 

(function ManifestSignatureInformationCollection$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Security.Cryptography.ManifestSignatureInformation")]), 
      Name: "System.Security.Cryptography.ManifestSignatureInformationCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Security.Cryptography.ManifestSignatureInformation")]))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.MD5Cng */ 

(function MD5Cng$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Security.Cryptography.MD5"), 
      Name: "System.Security.Cryptography.MD5Cng", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm07.TypeRef("System.Security.Cryptography.BCryptHashAlgorithm"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.CngExportPolicies */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CngExportPolicies", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    AllowExport: 1, 
    AllowPlaintextExport: 2, 
    AllowArchiving: 4, 
    AllowPlaintextArchiving: 8, 
  }
);

/* enum System.Security.Cryptography.CngKeyCreationOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CngKeyCreationOptions", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    MachineKey: 32, 
    OverwriteExistingKey: 128, 
  }
);

/* enum System.Security.Cryptography.CngKeyOpenOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CngKeyOpenOptions", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    UserKey: 0, 
    None: 0, 
    MachineKey: 32, 
    Silent: 64, 
  }
);

/* enum System.Security.Cryptography.CngKeyTypes */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CngKeyTypes", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    MachineKey: 32, 
  }
);

/* enum System.Security.Cryptography.CngKeyUsages */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CngKeyUsages", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Decryption: 1, 
    Signing: 2, 
    KeyAgreement: 4, 
    AllUsages: 16777215, 
  }
);

/* enum System.Security.Cryptography.CngPropertyOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CngPropertyOptions", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    Persist: -2147483648, 
    None: 0, 
    CustomProperty: 1073741824, 
  }
);

/* enum System.Security.Cryptography.CngUIProtectionLevels */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CngUIProtectionLevels", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    ProtectKey: 1, 
    ForceHighProtection: 2, 
  }
);

/* class System.Security.Cryptography.NCryptNative */ 

(function NCryptNative$Members () {
  var $, $thisType;













































  JSIL.MakeStaticClass("System.Security.Cryptography.NCryptNative", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "BuildEccPublicBlob", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.String, $asm08.TypeRef("System.Numerics.BigInteger"), 
          $asm08.TypeRef("System.Numerics.BigInteger")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreatePersistedKey", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $.String, 
          $.String, $asm07.TypeRef("System.Security.Cryptography.CngKeyCreationOptions")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DecryptData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", ["!!0"]), $asm07.TypeRef("System.Security.Cryptography.AsymmetricPaddingMode"), 
          $asm07.TypeRef("System.Security.Cryptography.NCryptNative+NCryptDecryptor`1", ["!!0"])
        ], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DecryptDataOaep", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DecryptDataPkcs1", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeleteKey", 
      JSIL.MethodSignature.Action($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeriveKeyMaterial", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm07.TypeRef("System.Security.Cryptography.NCryptNative+SecretAgreementFlags")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeriveKeyMaterial", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Security.Cryptography.NCryptNative+NCryptBuffer")]), $asm07.TypeRef("System.Security.Cryptography.NCryptNative+SecretAgreementFlags")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeriveKeyMaterialHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm07.TypeRef("System.Security.Cryptography.NCryptNative+SecretAgreementFlags")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeriveKeyMaterialHmac", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm07.TypeRef("System.Security.Cryptography.NCryptNative+SecretAgreementFlags")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeriveKeyMaterialTls", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm07.TypeRef("System.Security.Cryptography.NCryptNative+SecretAgreementFlags")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeriveSecretAgreement", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EncryptData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", ["!!0"]), $asm07.TypeRef("System.Security.Cryptography.AsymmetricPaddingMode"), 
          $asm07.TypeRef("System.Security.Cryptography.NCryptNative+NCryptEncryptor`1", ["!!0"])
        ], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EncryptDataOaep", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EncryptDataPkcs1", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ExportKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $.String])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "FillKeyParameter", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "FinalizeKey", 
      JSIL.MethodSignature.Action($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_NCryptSupported", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetProperty", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $asm07.TypeRef("System.Security.Cryptography.CngPropertyOptions"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetPropertyAsDWord", 
      new JSIL.MethodSignature($.Int32, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $asm07.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetPropertyAsIntPtr", 
      new JSIL.MethodSignature($.IntPtr, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $asm07.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:true , Public:false}, "GetPropertyAsString", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $asm07.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetPropertyAsStruct", 
      new JSIL.MethodSignature("!!0", [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $asm07.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ImportKey", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "OpenKey", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $.String, 
          $asm07.TypeRef("System.Security.Cryptography.CngKeyOpenOptions")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "OpenStorageProvider", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), [$.String])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ReverseBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReverseBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReverseBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetProperty", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $.Int32, $asm07.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetProperty", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $.String, $asm07.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetProperty", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          "!!0", $asm07.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetProperty", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm07.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SignHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", ["!!0"]), $asm07.TypeRef("System.Security.Cryptography.AsymmetricPaddingMode"), 
          $asm07.TypeRef("System.Security.Cryptography.NCryptNative+NCryptHashSigner`1", ["!!0"])
        ], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SignHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SignHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SignHashPkcs1", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SignHashPss", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String, $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "UnpackEccPublicBlob", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.BigInteger")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.BigInteger")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifySignature", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", ["!!0"]), 
          $asm07.TypeRef("System.Security.Cryptography.AsymmetricPaddingMode"), $asm07.TypeRef("System.Security.Cryptography.NCryptNative+NCryptSignatureVerifier`1", ["!!0"])
        ], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "VerifySignature", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "VerifySignaturePkcs1", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "VerifySignaturePss", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:true , Public:false}, "s_haveNcryptSupported", $asm02.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false}, "s_ncryptSupported", $asm02.TypeRef("System.Boolean"));

    $.Property({Static:true , Public:false}, "NCryptSupported", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.NCryptNative+BufferType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.NCryptNative+BufferType", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    KdfHashAlgorithm: 0, 
    KdfSecretPrepend: 1, 
    KdfSecretAppend: 2, 
    KdfHmacKey: 3, 
    KdfTlsLabel: 4, 
    KdfTlsSeed: 5, 
  }
);

/* enum System.Security.Cryptography.NCryptNative+ErrorCode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.NCryptNative+ErrorCode", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    BadSignature: -2146893818, 
    NotFound: -2146893807, 
    KeyDoesNotExist: -2146893802, 
    BufferTooSmall: -2146893784, 
    NoMoreItems: -2146893782, 
    Success: 0, 
  }
);

/* class System.Security.Cryptography.NCryptNative+KeyPropertyName */ 

(function KeyPropertyName$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Security.Cryptography.NCryptNative+KeyPropertyName", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Algorithm", $.String, "Algorithm Name");

    $.Constant({Static:true , Public:false}, "AlgorithmGroup", $.String, "Algorithm Group");

    $.Constant({Static:true , Public:false}, "ExportPolicy", $.String, "Export Policy");

    $.Constant({Static:true , Public:false}, "KeyType", $.String, "Key Type");

    $.Constant({Static:true , Public:false}, "KeyUsage", $.String, "Key Usage");

    $.Constant({Static:true , Public:false}, "Length", $.String, "Length");

    $.Constant({Static:true , Public:false}, "Name", $.String, "Name");

    $.Constant({Static:true , Public:false}, "ParentWindowHandle", $.String, "HWND Handle");

    $.Constant({Static:true , Public:false}, "ProviderHandle", $.String, "Provider Handle");

    $.Constant({Static:true , Public:false}, "UIPolicy", $.String, "UI Policy");

    $.Constant({Static:true , Public:false}, "UniqueName", $.String, "Unique Name");

    $.Constant({Static:true , Public:false}, "UseContext", $.String, "Use Context");

    $.Constant({Static:true , Public:false}, "ClrIsEphemeral", $.String, "CLR IsEphemeral");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.NCryptNative+ProviderPropertyName */ 

(function ProviderPropertyName$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Security.Cryptography.NCryptNative+ProviderPropertyName", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Name", $.String, "Name");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.NCryptNative+SecretAgreementFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.NCryptNative+SecretAgreementFlags", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    UseSecretAsHmacKey: 1, 
  }
);

/* struct System.Security.Cryptography.NCryptNative+NCRYPT_UI_POLICY */ 

(function NCRYPT_UI_POLICY$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.NCryptNative+NCRYPT_UI_POLICY", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "dwVersion", $.Int32);

    $.Field({Static:false, Public:true }, "dwFlags", $asm07.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"));

    $.Field({Static:false, Public:true }, "pszCreationTitle", $.String);

    $.Field({Static:false, Public:true }, "pszFriendlyName", $.String);

    $.Field({Static:false, Public:true }, "pszDescription", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.NCryptNative+NCryptBuffer */ 

(function NCryptBuffer$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.NCryptNative+NCryptBuffer", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "cbBuffer", $.Int32);

    $.Field({Static:false, Public:true }, "BufferType", $asm07.TypeRef("System.Security.Cryptography.NCryptNative+BufferType"));

    $.Field({Static:false, Public:true }, "pvBuffer", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.NCryptNative+NCryptBufferDesc */ 

(function NCryptBufferDesc$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.NCryptNative+NCryptBufferDesc", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "ulVersion", $.Int32);

    $.Field({Static:false, Public:true }, "cBuffers", $.Int32);

    $.Field({Static:false, Public:true }, "pBuffers", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.NCryptNative+UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;

























  JSIL.MakeStaticClass("System.Security.Cryptography.NCryptNative+UnsafeNativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "NCryptCreatePersistedKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")]), 
          $.String, $.String, 
          $.Int32, $asm07.TypeRef("System.Security.Cryptography.CngKeyCreationOptions")
        ]), 
      {
        Module: "ncrypt.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptDecrypt", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Security.Cryptography.BCryptNative+BCRYPT_OAEP_PADDING_INFO")]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm07.TypeRef("System.Security.Cryptography.AsymmetricPaddingMode")
        ]), 
      {
        Module: "ncrypt.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , null
          , 
          {
            NativeType: "Array", 
            Out: true
          }, null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptDecrypt", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Security.Cryptography.BCryptNative+BCRYPT_PKCS1_PADDING_INFO")]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm07.TypeRef("System.Security.Cryptography.AsymmetricPaddingMode")
        ]), 
      {
        Module: "ncrypt.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , null
          , 
          {
            NativeType: "Array", 
            Out: true
          }, null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptDeleteKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $.Int32]), 
      {
        Module: "ncrypt.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptDeriveKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Security.Cryptography.NCryptNative+NCryptBufferDesc")]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm07.TypeRef("System.Security.Cryptography.NCryptNative+SecretAgreementFlags")
        ]), 
      {
        Module: "ncrypt.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }, null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptEncrypt", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Security.Cryptography.BCryptNative+BCRYPT_OAEP_PADDING_INFO")]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm07.TypeRef("System.Security.Cryptography.AsymmetricPaddingMode")
        ]), 
      {
        Module: "ncrypt.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , null
          , 
          {
            NativeType: "Array", 
            Out: true
          }, null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptEncrypt", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Security.Cryptography.BCryptNative+BCRYPT_PKCS1_PADDING_INFO")]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm07.TypeRef("System.Security.Cryptography.AsymmetricPaddingMode")
        ]), 
      {
        Module: "ncrypt.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , null
          , 
          {
            NativeType: "Array", 
            Out: true
          }, null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptExportKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $.IntPtr, 
          $.String, $.IntPtr, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
        ]), 
      {
        Module: "ncrypt.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }, null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptFinalizeKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $.Int32]), 
      {
        Module: "ncrypt.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptGetProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm07.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ]), 
      {
        Module: "ncrypt.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }, null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptGetProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm07.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ]), 
      {
        Module: "ncrypt.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.PInvokeMethod({Static:true , Public:false}, "NCryptImportKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $.IntPtr, 
          $.String, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ]), 
      {
        Module: "ncrypt.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptOpenKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")]), 
          $.String, $.Int32, 
          $asm07.TypeRef("System.Security.Cryptography.CngKeyOpenOptions")
        ]), 
      {
        Module: "ncrypt.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptOpenStorageProvider", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle")]), $.String, 
          $.Int32
        ]), 
      {
        Module: "ncrypt.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptSecretAgreement", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle")]), $.Int32
        ]), 
      {
        Module: "ncrypt.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptSetProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $asm07.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ]), 
      {
        Module: "ncrypt.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptSetProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $.String, $.Int32, 
          $asm07.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ]), 
      {
        Module: "ncrypt.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptSetProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $.IntPtr, $.Int32, 
          $asm07.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ]), 
      {
        Module: "ncrypt.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptSignHash", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $.IntPtr, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
        ]), 
      {
        Module: "ncrypt.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , 
          {
            NativeType: "Array"
          }, null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptSignHash", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Security.Cryptography.BCryptNative+BCRYPT_PKCS1_PADDING_INFO")]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm07.TypeRef("System.Security.Cryptography.AsymmetricPaddingMode")
        ]), 
      {
        Module: "ncrypt.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , 
          {
            NativeType: "Array", 
            Out: true
          }, null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptSignHash", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Security.Cryptography.BCryptNative+BCRYPT_PSS_PADDING_INFO")]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm07.TypeRef("System.Security.Cryptography.AsymmetricPaddingMode")
        ]), 
      {
        Module: "ncrypt.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , 
          {
            NativeType: "Array", 
            Out: true
          }, null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptVerifySignature", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $.IntPtr, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ]), 
      {
        Module: "ncrypt.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , 
          {
            NativeType: "Array"
          }, null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptVerifySignature", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Security.Cryptography.BCryptNative+BCRYPT_PKCS1_PADDING_INFO")]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $asm07.TypeRef("System.Security.Cryptography.AsymmetricPaddingMode")
        ]), 
      {
        Module: "ncrypt.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , 
          {
            NativeType: "Array"
          }, null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptVerifySignature", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Security.Cryptography.BCryptNative+BCRYPT_PSS_PADDING_INFO")]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $asm07.TypeRef("System.Security.Cryptography.AsymmetricPaddingMode")
        ]), 
      {
        Module: "ncrypt.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , 
          {
            NativeType: "Array"
          }, null
          , null

        ]
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* delegate System.Security.Cryptography.NCryptNative+NCryptDecryptor`1 */ 

JSIL.MakeDelegate("System.Security.Cryptography.NCryptNative+NCryptDecryptor`1", false, ["T"], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
      $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Byte")]), 
      $asm02.TypeRef("System.Int32"), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Security.Cryptography.NCryptNative+NCryptDecryptor`1")]), 
      $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Byte")]), $asm02.TypeRef("System.Int32"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Int32")]), $asm07.TypeRef("System.Security.Cryptography.AsymmetricPaddingMode")
    ]));

/* delegate System.Security.Cryptography.NCryptNative+NCryptEncryptor`1 */ 

JSIL.MakeDelegate("System.Security.Cryptography.NCryptNative+NCryptEncryptor`1", false, ["T"], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
      $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Byte")]), 
      $asm02.TypeRef("System.Int32"), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Security.Cryptography.NCryptNative+NCryptEncryptor`1")]), 
      $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Byte")]), $asm02.TypeRef("System.Int32"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Int32")]), $asm07.TypeRef("System.Security.Cryptography.AsymmetricPaddingMode")
    ]));

/* delegate System.Security.Cryptography.NCryptNative+NCryptHashSigner`1 */ 

JSIL.MakeDelegate("System.Security.Cryptography.NCryptNative+NCryptHashSigner`1", false, ["T"], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
      $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Security.Cryptography.NCryptNative+NCryptHashSigner`1")]), 
      $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Byte")]), $asm02.TypeRef("System.Int32"), 
      $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Byte")]), $asm02.TypeRef("System.Int32"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Int32")]), $asm07.TypeRef("System.Security.Cryptography.AsymmetricPaddingMode")
    ]));

/* delegate System.Security.Cryptography.NCryptNative+NCryptSignatureVerifier`1 */ 

JSIL.MakeDelegate("System.Security.Cryptography.NCryptNative+NCryptSignatureVerifier`1", false, ["T"], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
      $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Security.Cryptography.NCryptNative+NCryptSignatureVerifier`1")]), 
      $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Byte")]), $asm02.TypeRef("System.Int32"), 
      $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Byte")]), $asm02.TypeRef("System.Int32"), 
      $asm07.TypeRef("System.Security.Cryptography.AsymmetricPaddingMode")
    ]));

/* class System.Security.Cryptography.Rfc4050KeyFormatter */ 

(function Rfc4050KeyFormatter$Members () {
  var $, $thisType;









  JSIL.MakeStaticClass("System.Security.Cryptography.Rfc4050KeyFormatter", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "FromXml", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.CngKey"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCurveUrn", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Security.Cryptography.CngAlgorithm")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetKeySize", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadAlgorithm", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.CngAlgorithm"), [$asm09.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadPublicKey", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Xml.XPath.XPathNavigator"), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.BigInteger")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("System.Numerics.BigInteger")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToXml", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Security.Cryptography.CngKey")])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteDomainParameters", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Xml.XmlWriter"), $asm07.TypeRef("System.Security.Cryptography.CngKey")])
    );

    $.ExternalMethod({Static:true , Public:false}, "WritePublicKeyValue", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Xml.XmlWriter"), $asm07.TypeRef("System.Security.Cryptography.CngKey")])
    );

    $.Constant({Static:true , Public:false}, "DomainParametersRoot", $.String, "DomainParameters");

    $.Constant({Static:true , Public:false}, "ECDHRoot", $.String, "ECDHKeyValue");

    $.Constant({Static:true , Public:false}, "ECDsaRoot", $.String, "ECDSAKeyValue");

    $.Constant({Static:true , Public:false}, "NamedCurveElement", $.String, "NamedCurve");

    $.Constant({Static:true , Public:false}, "Namespace", $.String, "http://www.w3.org/2001/04/xmldsig-more#");

    $.Constant({Static:true , Public:false}, "PublicKeyRoot", $.String, "PublicKey");

    $.Constant({Static:true , Public:false}, "UrnAttribute", $.String, "URN");

    $.Constant({Static:true , Public:false}, "ValueAttribute", $.String, "Value");

    $.Constant({Static:true , Public:false}, "XElement", $.String, "X");

    $.Constant({Static:true , Public:false}, "YElement", $.String, "Y");

    $.Constant({Static:true , Public:false}, "XsiTypeAttribute", $.String, "type");

    $.Constant({Static:true , Public:false}, "XsiTypeAttributeValue", $.String, "PrimeFieldElemType");

    $.Constant({Static:true , Public:false}, "XsiNamespace", $.String, "http://www.w3.org/2001/XMLSchema-instance");

    $.Constant({Static:true , Public:false}, "XsiNamespacePrefix", $.String, "xsi");

    $.Constant({Static:true , Public:false}, "Prime256CurveUrn", $.String, "urn:oid:1.2.840.10045.3.1.7");

    $.Constant({Static:true , Public:false}, "Prime384CurveUrn", $.String, "urn:oid:1.3.132.0.34");

    $.Constant({Static:true , Public:false}, "Prime521CurveUrn", $.String, "urn:oid:1.3.132.0.35");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.RSACng */ 

(function RSACng$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Security.Cryptography.RSA"), 
      Name: "System.Security.Cryptography.RSACng", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.CngKey"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckMagicValueOfKey", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Decrypt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm02.TypeRef("System.Security.Cryptography.RSAEncryptionPadding")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DecryptValue", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Encrypt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm02.TypeRef("System.Security.Cryptography.RSAEncryptionPadding")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EncryptValue", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExportParameters", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.RSAParameters"), [$.Boolean])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Key", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.CngKey"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeyExchangeAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KeyHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SignatureAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Security.Cryptography.HashAlgorithmName")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm02.TypeRef("System.IO.Stream"), $asm02.TypeRef("System.Security.Cryptography.HashAlgorithmName")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ImportParameters", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Security.Cryptography.RSAParameters"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_Key", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.CngKey"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SignHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm02.TypeRef("System.Security.Cryptography.HashAlgorithmName"), 
          $asm02.TypeRef("System.Security.Cryptography.RSASignaturePadding")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "VerifyHash", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm02.TypeRef("System.Security.Cryptography.HashAlgorithmName"), $asm02.TypeRef("System.Security.Cryptography.RSASignaturePadding")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:true , Public:false}, "s_legalKeySizes", $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Security.Cryptography.KeySizes")]));

    $.Field({Static:true , Public:false}, "s_rsaFullPrivateBlob", $asm07.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"));

    $.Field({Static:true , Public:false}, "s_rsaPrivateBlob", $asm07.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"));

    $.Field({Static:true , Public:false}, "s_rsaPublicBlob", $asm07.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"));

    $.Field({Static:false, Public:false}, "_key", $asm07.TypeRef("System.Security.Cryptography.CngKey"));

    $.Property({Static:false, Public:true }, "Key", $asm07.TypeRef("System.Security.Cryptography.CngKey"));

    $.Property({Static:false, Public:false}, "KeyHandle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "KeyExchangeAlgorithm", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SignatureAlgorithm", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.SHA1Cng */ 

(function SHA1Cng$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Security.Cryptography.SHA1"), 
      Name: "System.Security.Cryptography.SHA1Cng", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm07.TypeRef("System.Security.Cryptography.BCryptHashAlgorithm"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.SHA256Cng */ 

(function SHA256Cng$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Security.Cryptography.SHA256"), 
      Name: "System.Security.Cryptography.SHA256Cng", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm07.TypeRef("System.Security.Cryptography.BCryptHashAlgorithm"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.SHA256CryptoServiceProvider */ 

(function SHA256CryptoServiceProvider$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Security.Cryptography.SHA256"), 
      Name: "System.Security.Cryptography.SHA256CryptoServiceProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm07.TypeRef("System.Security.Cryptography.CapiHashAlgorithm"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.SHA384Cng */ 

(function SHA384Cng$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Security.Cryptography.SHA384"), 
      Name: "System.Security.Cryptography.SHA384Cng", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm07.TypeRef("System.Security.Cryptography.BCryptHashAlgorithm"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.SHA384CryptoServiceProvider */ 

(function SHA384CryptoServiceProvider$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Security.Cryptography.SHA384"), 
      Name: "System.Security.Cryptography.SHA384CryptoServiceProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm07.TypeRef("System.Security.Cryptography.CapiHashAlgorithm"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.SHA512Cng */ 

(function SHA512Cng$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Security.Cryptography.SHA512"), 
      Name: "System.Security.Cryptography.SHA512Cng", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm07.TypeRef("System.Security.Cryptography.BCryptHashAlgorithm"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.SHA512CryptoServiceProvider */ 

(function SHA512CryptoServiceProvider$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Security.Cryptography.SHA512"), 
      Name: "System.Security.Cryptography.SHA512CryptoServiceProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm07.TypeRef("System.Security.Cryptography.CapiHashAlgorithm"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.SignatureVerificationResult */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.SignatureVerificationResult", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    SystemError: -2146869247, 
    InvalidSignerCertificate: -2146869246, 
    InvalidCountersignature: -2146869245, 
    InvalidCertificateSignature: -2146869244, 
    InvalidTimestamp: -2146869243, 
    BadDigest: -2146869232, 
    BasicConstraintsNotObserved: -2146869223, 
    UnknownTrustProvider: -2146762751, 
    UnknownVerificationAction: -2146762750, 
    BadSignatureFormat: -2146762749, 
    CertificateNotExplicitlyTrusted: -2146762748, 
    MissingSignature: -2146762496, 
    CertificateExpired: -2146762495, 
    InvalidTimePeriodNesting: -2146762494, 
    InvalidCertificateRole: -2146762493, 
    PathLengthConstraintViolated: -2146762492, 
    UnknownCriticalExtension: -2146762491, 
    CertificateUsageNotAllowed: -2146762490, 
    IssuerChainingError: -2146762489, 
    CertificateMalformed: -2146762488, 
    UntrustedRootCertificate: -2146762487, 
    CouldNotBuildChain: -2146762486, 
    GenericTrustFailure: -2146762485, 
    CertificateRevoked: -2146762484, 
    UntrustedTestRootCertificate: -2146762483, 
    RevocationCheckFailure: -2146762482, 
    InvalidCertificateUsage: -2146762480, 
    CertificateExplicitlyDistrusted: -2146762479, 
    UntrustedCertificationAuthority: -2146762478, 
    InvalidCertificatePolicy: -2146762477, 
    InvalidCertificateName: -2146762476, 
    Valid: 0, 
    AssemblyIdentityMismatch: 1, 
    ContainingSignatureInvalid: 2, 
    PublicKeyTokenMismatch: 3, 
    PublisherMismatch: 4, 
  }
);

/* class System.Security.Cryptography.StrongNameSignatureInformation */ 

(function StrongNameSignatureInformation$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.StrongNameSignatureInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.SignatureVerificationResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HashAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HResult", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsValid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PublicKey", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VerificationResult", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.SignatureVerificationResult"))
    );

    $.Field({Static:false, Public:false}, "m_verificationResult", $asm07.TypeRef("System.Security.Cryptography.SignatureVerificationResult"));

    $.Field({Static:false, Public:false}, "m_publicKey", $asm02.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "StrongNameHashAlgorithm", $.String);

    $.Property({Static:false, Public:true }, "HashAlgorithm", $.String);

    $.Property({Static:false, Public:true }, "HResult", $.Int32);

    $.Property({Static:false, Public:true }, "IsValid", $.Boolean);

    $.Property({Static:false, Public:true }, "PublicKey", $asm02.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"));

    $.Property({Static:false, Public:true }, "VerificationResult", $asm07.TypeRef("System.Security.Cryptography.SignatureVerificationResult"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.TripleDESCng */ 

(function TripleDESCng$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Security.Cryptography.TripleDES"), 
      Name: "System.Security.Cryptography.TripleDESCng", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Security.Cryptography.CngProvider")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Security.Cryptography.CngProvider"), 
          $asm07.TypeRef("System.Security.Cryptography.CngKeyOpenOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDecryptor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDecryptor", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEncryptor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEncryptor", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateIV", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateKey", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Key", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeySize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Internal.Cryptography.ICngSymmetricAlgorithm.get_BaseKey", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Overrides($asm07.TypeRef("Internal.Cryptography.ICngSymmetricAlgorithm"), "get_BaseKey");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Internal.Cryptography.ICngSymmetricAlgorithm.get_BaseKeySize", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("Internal.Cryptography.ICngSymmetricAlgorithm"), "get_BaseKeySize");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Internal.Cryptography.ICngSymmetricAlgorithm.IsWeakKey", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Overrides($asm07.TypeRef("Internal.Cryptography.ICngSymmetricAlgorithm"), "IsWeakKey");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Internal.Cryptography.ICngSymmetricAlgorithm.set_BaseKey", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Overrides($asm07.TypeRef("Internal.Cryptography.ICngSymmetricAlgorithm"), "set_BaseKey");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Internal.Cryptography.ICngSymmetricAlgorithm.set_BaseKeySize", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Overrides($asm07.TypeRef("Internal.Cryptography.ICngSymmetricAlgorithm"), "set_BaseKeySize");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Key", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_KeySize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetLegalKeySizesValue", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "AlgorithmName", $.String, "3DES");

    $.Field({Static:false, Public:false}, "_core", $asm07.TypeRef("Internal.Cryptography.CngSymmetricAlgorithmCore"));

    $.Property({Static:false, Public:true , Virtual:true }, "Key", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "KeySize", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "Internal.Cryptography.ICngSymmetricAlgorithm.BaseKey", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false, Virtual:true }, "Internal.Cryptography.ICngSymmetricAlgorithm.BaseKeySize", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm07.TypeRef("Internal.Cryptography.ICngSymmetricAlgorithm")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Security.Cryptography.Xml");
/* class System.Security.Cryptography.Xml.ManifestSignedXml */ 

(function ManifestSignedXml$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.Security.Cryptography.Xml.SignedXml"), 
      Name: "System.Security.Cryptography.Xml.ManifestSignedXml", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Xml.XmlDocument"), $asm07.TypeRef("System.Security.ManifestKinds")])
    );

    $.ExternalMethod({Static:true , Public:false}, "BackwardHexToBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildSignatureChain", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"), [
          $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+AXL_AUTHENTICODE_SIGNER_INFO"), $asm09.TypeRef("System.Xml.XmlElement"), 
          $asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), $asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CalculateManifestPublicKeyToken", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:true , Public:false}, "CalculateSignerPublicKeyToken", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm02.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CompareBytes", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetIdElement", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Xml.XmlElement"), [$asm09.TypeRef("System.Xml.XmlDocument"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTimestampInformation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.X509Certificates.TimestampInformation"), [$asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+AXL_AUTHENTICODE_TIMESTAMPER_INFO"), $asm09.TypeRef("System.Xml.XmlElement")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "HexStringToBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "HexToByte", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Byte]), [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "MapRevocationFlags", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+AxlVerificationFlags"), [$asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), $asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyAuthenticodeExpectedHash", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [$asm09.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyAuthenticodePublisher", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [$asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "VerifyAuthenticodeSignature", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation"), [
          $asm09.TypeRef("System.Xml.XmlElement"), $asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), 
          $asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "VerifyAuthenticodeSignatureIdentity", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [$asm09.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "VerifySignature", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.ManifestSignatureInformation"), [$asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), $asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyStrongNameSignature", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.StrongNameSignatureInformation"), [$asm09.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyStrongNameSignatureId", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [$asm09.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyStrongNameSignatureTransforms", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [$asm0B.TypeRef("System.Security.Cryptography.Xml.SignedInfo")])
    );

    $.Field({Static:false, Public:false}, "m_manifest", $asm07.TypeRef("System.Security.ManifestKinds"));

    $.Field({Static:false, Public:false}, "m_manifestXml", $asm09.TypeRef("System.Xml.XmlDocument"));

    $.Field({Static:false, Public:false}, "m_namespaceManager", $asm09.TypeRef("System.Xml.XmlNamespaceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Security.Cryptography.X509Certificates");
/* class System.Security.Cryptography.X509Certificates.DSACertificateExtensions */ 

(function DSACertificateExtensions$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("System.Security.Cryptography.X509Certificates.DSACertificateExtensions", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CopyCspParameters", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.CspParameters"), [$asm02.TypeRef("System.Security.Cryptography.ICspAsymmetricAlgorithm")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDSAPrivateKey", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.DSA"), [$asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetDSAPublicKey", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.DSA"), [$asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsDSA", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToBigEndianByteArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.CapiNative+CRYPTOAPI_BLOB")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation */ 

(function AuthenticodeSignatureInformation$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+AXL_AUTHENTICODE_SIGNER_INFO"), $asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"), 
          $asm07.TypeRef("System.Security.Cryptography.X509Certificates.TimestampInformation")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.SignatureVerificationResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DescriptionUrl", 
      JSIL.MethodSignature.Return($asm05.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HashAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HResult", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SignatureChain", 
      JSIL.MethodSignature.Return($asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_SigningCertificate", 
      JSIL.MethodSignature.Return($asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Timestamp", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.X509Certificates.TimestampInformation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrustStatus", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.X509Certificates.TrustStatus"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VerificationResult", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.SignatureVerificationResult"))
    );

    $.Field({Static:false, Public:false}, "m_description", $.String);

    $.Field({Static:false, Public:false}, "m_descriptionUrl", $asm05.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithmId", $asm07.TypeRef("System.Security.Cryptography.CapiNative+AlgorithmId"));

    $.Field({Static:false, Public:false}, "m_signatureChain", $asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"));

    $.Field({Static:false, Public:false}, "m_timestamp", $asm07.TypeRef("System.Security.Cryptography.X509Certificates.TimestampInformation"));

    $.Field({Static:false, Public:false}, "m_verificationResult", $asm07.TypeRef("System.Security.Cryptography.SignatureVerificationResult"));

    $.Field({Static:false, Public:false}, "m_signingCertificate", $asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:true }, "DescriptionUrl", $asm05.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "HashAlgorithm", $.String);

    $.Property({Static:false, Public:true }, "HResult", $.Int32);

    $.Property({Static:false, Public:true }, "SignatureChain", $asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"));

    $.Property({Static:false, Public:true }, "SigningCertificate", $asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Property({Static:false, Public:true }, "Timestamp", $asm07.TypeRef("System.Security.Cryptography.X509Certificates.TimestampInformation"));

    $.Property({Static:false, Public:true }, "TrustStatus", $asm07.TypeRef("System.Security.Cryptography.X509Certificates.TrustStatus"));

    $.Property({Static:false, Public:true }, "VerificationResult", $asm07.TypeRef("System.Security.Cryptography.SignatureVerificationResult"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.X509Certificates.RSACertificateExtensions */ 

(function RSACertificateExtensions$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.Security.Cryptography.X509Certificates.RSACertificateExtensions", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "GetRSAPrivateKey", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.RSA"), [$asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetRSAPublicKey", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.RSA"), [$asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsRSA", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OidToAlgorithmId", 
      new JSIL.MethodSignature($.UInt32, [$asm05.TypeRef("System.Security.Cryptography.Oid")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions */ 

(function ECDsaCertificateExtensions$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "BCryptHandleToNCryptHandle", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.CngKey"), [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptKeyHandle")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetECDsaPrivateKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.ECDsa"), [$asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetECDsaPublicKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.ECDsa"), [$asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsECDsa", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Security.Cryptography.X509Certificates.TimestampInformation */ 

(function TimestampInformation$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.X509Certificates.TimestampInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+AXL_AUTHENTICODE_TIMESTAMPER_INFO"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.SignatureVerificationResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HashAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HResult", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsValid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SignatureChain", 
      JSIL.MethodSignature.Return($asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_SigningCertificate", 
      JSIL.MethodSignature.Return($asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Timestamp", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VerificationResult", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.SignatureVerificationResult"))
    );

    $.Field({Static:false, Public:false}, "m_hashAlgorithmId", $asm07.TypeRef("System.Security.Cryptography.CapiNative+AlgorithmId"));

    $.Field({Static:false, Public:false}, "m_timestamp", $asm02.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_timestampChain", $asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"));

    $.Field({Static:false, Public:false}, "m_verificationResult", $asm07.TypeRef("System.Security.Cryptography.SignatureVerificationResult"));

    $.Field({Static:false, Public:false}, "m_timestamper", $asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Property({Static:false, Public:true }, "HashAlgorithm", $.String);

    $.Property({Static:false, Public:true }, "HResult", $.Int32);

    $.Property({Static:false, Public:true }, "IsValid", $.Boolean);

    $.Property({Static:false, Public:true }, "SignatureChain", $asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"));

    $.Property({Static:false, Public:true }, "SigningCertificate", $asm05.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Property({Static:false, Public:true }, "Timestamp", $asm02.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "VerificationResult", $asm07.TypeRef("System.Security.Cryptography.SignatureVerificationResult"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.X509Certificates.TrustStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.X509Certificates.TrustStatus", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Untrusted: 0, 
    UnknownIdentity: 1, 
    KnownIdentity: 2, 
    Trusted: 3, 
  }
);

/* class System.Security.Cryptography.X509Certificates.X509Native */ 

(function X509Native$Members () {
  var $, $thisType;







  JSIL.MakeStaticClass("System.Security.Cryptography.X509Certificates.X509Native", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "DuplicateCertContext", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.X509Certificates.SafeCertContextHandle"), [$.IntPtr])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetCertificateContext", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.X509Certificates.SafeCertContextHandle"), [$asm02.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetCertificateProperty", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.X509Certificates.SafeCertContextHandle"), $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+CertificateProperty")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetCertificateProperty", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Security.Cryptography.X509Certificates.SafeCertContextHandle"), $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+CertificateProperty")], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "HasCertificateProperty", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Security.Cryptography.X509Certificates.SafeCertContextHandle"), $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+CertificateProperty")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TryAcquireCngPrivateKey", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), [$asm07.TypeRef("System.Security.Cryptography.X509Certificates.SafeCertContextHandle")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Constant({Static:true , Public:false}, "X509_ASN_ENCODING", $.UInt32, 1);

    $.Constant({Static:true , Public:false}, "szOID_ECC_PUBLIC_KEY", $.String, "1.2.840.10045.2.1");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.X509Certificates.X509Native+AxlVerificationFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.X509Certificates.X509Native+AxlVerificationFlags", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    NoRevocationCheck: 1, 
    RevocationCheckEndCertOnly: 2, 
    RevocationCheckEntireChain: 4, 
    UrlOnlyCacheRetrieval: 8, 
    LifetimeSigning: 16, 
    TrustMicrosoftRootOnly: 32, 
  }
);

/* struct System.Security.Cryptography.X509Certificates.X509Native+CERT_CONTEXT */ 

(function CERT_CONTEXT$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.X509Certificates.X509Native+CERT_CONTEXT", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "dwCertEncodingType", $.UInt32);

    $.Field({Static:false, Public:false}, "pbCertEncoded", $.IntPtr);

    $.Field({Static:false, Public:false}, "cbCertEncoded", $.UInt32);

    $.Field({Static:false, Public:false}, "pCertInfo", $.IntPtr);

    $.Field({Static:false, Public:false}, "hCertStore", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.X509Certificates.X509Native+CERT_PUBLIC_KEY_INFO */ 

(function CERT_PUBLIC_KEY_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.X509Certificates.X509Native+CERT_PUBLIC_KEY_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "Algorithm", $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+CRYPT_ALGORITHM_IDENTIFIER"));

    $.Field({Static:false, Public:false}, "PublicKey", $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+CRYPT_BIT_BLOB"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.X509Certificates.X509Native+CERT_INFO */ 

(function CERT_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.X509Certificates.X509Native+CERT_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "dwVersion", $.UInt32);

    $.Field({Static:false, Public:false}, "SerialNumber", $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+CRYPTOAPI_BLOB"));

    $.Field({Static:false, Public:false}, "SignatureAlgorithm", $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+CRYPT_ALGORITHM_IDENTIFIER"));

    $.Field({Static:false, Public:false}, "Issuer", $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+CRYPTOAPI_BLOB"));

    $.Field({Static:false, Public:false}, "NotBefore", $asm02.TypeRef("System.Runtime.InteropServices.ComTypes.FILETIME"));

    $.Field({Static:false, Public:false}, "NotAfter", $asm02.TypeRef("System.Runtime.InteropServices.ComTypes.FILETIME"));

    $.Field({Static:false, Public:false}, "Subject", $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+CRYPTOAPI_BLOB"));

    $.Field({Static:false, Public:false}, "SubjectPublicKeyInfo", $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+CERT_PUBLIC_KEY_INFO"));

    $.Field({Static:false, Public:false}, "IssuerUniqueId", $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+CRYPT_BIT_BLOB"));

    $.Field({Static:false, Public:false}, "SubjectUniqueId", $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+CRYPT_BIT_BLOB"));

    $.Field({Static:false, Public:false}, "cExtension", $.UInt32);

    $.Field({Static:false, Public:false}, "rgExtension", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.X509Certificates.X509Native+CRYPT_ALGORITHM_IDENTIFIER */ 

(function CRYPT_ALGORITHM_IDENTIFIER$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.X509Certificates.X509Native+CRYPT_ALGORITHM_IDENTIFIER", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "pszObjId", $.String);

    $.Field({Static:false, Public:false}, "Parameters", $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+CRYPTOAPI_BLOB"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.X509Certificates.X509Native+CRYPT_BIT_BLOB */ 

(function CRYPT_BIT_BLOB$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.X509Certificates.X509Native+CRYPT_BIT_BLOB", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "cbData", $.UInt32);

    $.Field({Static:false, Public:false}, "pbData", $.IntPtr);

    $.Field({Static:false, Public:false}, "cUnusedBits", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.X509Certificates.X509Native+CRYPTOAPI_BLOB */ 

(function CRYPTOAPI_BLOB$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.X509Certificates.X509Native+CRYPTOAPI_BLOB", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "cbData", $.UInt32);

    $.Field({Static:false, Public:false}, "pbData", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.X509Certificates.X509Native+AcquireCertificateKeyOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.X509Certificates.X509Native+AcquireCertificateKeyOptions", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    AcquireOnlyNCryptKeys: 262144, 
  }
);

/* enum System.Security.Cryptography.X509Certificates.X509Native+CertificateProperty */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.X509Certificates.X509Native+CertificateProperty", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    KeyProviderInfo: 2, 
    KeyContext: 5, 
  }
);

/* enum System.Security.Cryptography.X509Certificates.X509Native+ErrorCode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.X509Certificates.X509Native+ErrorCode", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Success: 0, 
    MoreData: 234, 
  }
);

/* struct System.Security.Cryptography.X509Certificates.X509Native+CRYPT_KEY_PROV_INFO */ 

(function CRYPT_KEY_PROV_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.X509Certificates.X509Native+CRYPT_KEY_PROV_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "pwszContainerName", $.String);

    $.Field({Static:false, Public:false}, "pwszProvName", $.String);

    $.Field({Static:false, Public:false}, "dwProvType", $.Int32);

    $.Field({Static:false, Public:false}, "dwFlags", $.Int32);

    $.Field({Static:false, Public:false}, "cProvParam", $.Int32);

    $.Field({Static:false, Public:false}, "rgProvParam", $.IntPtr);

    $.Field({Static:false, Public:false}, "dwKeySpec", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.X509Certificates.X509Native+AXL_AUTHENTICODE_SIGNER_INFO */ 

(function AXL_AUTHENTICODE_SIGNER_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.X509Certificates.X509Native+AXL_AUTHENTICODE_SIGNER_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "cbSize", $.Int32);

    $.Field({Static:false, Public:true }, "dwError", $.Int32);

    $.Field({Static:false, Public:true }, "algHash", $asm07.TypeRef("System.Security.Cryptography.CapiNative+AlgorithmId"));

    $.Field({Static:false, Public:true }, "pwszHash", $.IntPtr);

    $.Field({Static:false, Public:true }, "pwszDescription", $.IntPtr);

    $.Field({Static:false, Public:true }, "pwszDescriptionUrl", $.IntPtr);

    $.Field({Static:false, Public:true }, "pChainContext", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.X509Certificates.X509Native+AXL_AUTHENTICODE_TIMESTAMPER_INFO */ 

(function AXL_AUTHENTICODE_TIMESTAMPER_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.X509Certificates.X509Native+AXL_AUTHENTICODE_TIMESTAMPER_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "cbsize", $.Int32);

    $.Field({Static:false, Public:true }, "dwError", $.Int32);

    $.Field({Static:false, Public:true }, "algHash", $asm07.TypeRef("System.Security.Cryptography.CapiNative+AlgorithmId"));

    $.Field({Static:false, Public:true }, "ftTimestamp", $asm02.TypeRef("System.Runtime.InteropServices.ComTypes.FILETIME"));

    $.Field({Static:false, Public:true }, "pChainContext", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.X509Certificates.X509Native+UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("System.Security.Cryptography.X509Certificates.X509Native+UnsafeNativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:true }, "_AxlGetIssuerPublicKeyHash", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeAxlBufferHandle")])]), 
      {
        Module: "clr", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertDuplicateCertificateContext", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.X509Certificates.SafeCertContextHandle"), [$.IntPtr]), 
      {
        Module: "Crypt32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CertFreeAuthenticodeSignerInfo", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+AXL_AUTHENTICODE_SIGNER_INFO")])]), 
      {
        Module: "clr", 
      }
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:true }, "CertFreeAuthenticodeTimestamperInfo", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+AXL_AUTHENTICODE_TIMESTAMPER_INFO")])]), 
      {
        Module: "clr", 
      }
    )
      .Attribute($asm02.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm02.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm02.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "CertGetCertificateContextProperty", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Security.Cryptography.X509Certificates.SafeCertContextHandle"), $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+CertificateProperty"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "Crypt32.dll", 
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }, null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CertVerifyAuthenticodeLicense", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Security.Cryptography.CapiNative+CRYPTOAPI_BLOB")]), $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+AxlVerificationFlags"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+AXL_AUTHENTICODE_SIGNER_INFO")]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+AXL_AUTHENTICODE_TIMESTAMPER_INFO")])
        ]), 
      {
        Module: "clr", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptAcquireCertificatePrivateKey", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Security.Cryptography.X509Certificates.SafeCertContextHandle"), $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+AcquireCertificateKeyOptions"), 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ]), 
      {
        Module: "Crypt32.dll", 
        Parameters: [
          {
            NativeType: "Boolean", 
            Out: true
          }
        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Security.Cryptography.X509Certificates.SafeCertContextHandle */ 

(function SafeCertContextHandle$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.Security.Cryptography.X509Certificates.SafeCertContextHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "CertFreeCertificateContext", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "Crypt32.dll", 
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidHandle", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Property({Static:true , Public:false}, "InvalidHandle", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Runtime");
JSIL.DeclareNamespace("System.Runtime.InteropServices");
/* class System.Runtime.InteropServices.ComAwareEventInfo */ 

(function ComAwareEventInfo$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Reflection.EventInfo"), 
      Name: "System.Runtime.InteropServices.ComAwareEventInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $.String])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddEventHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm02.TypeRef("System.Delegate")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.EventAttributes"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DeclaringType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReflectedType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAddMethod", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.MethodInfo"), [$.Boolean])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm02.TypeRef("System.Type"), $.Boolean])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.Boolean])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetDataForComInvocation", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.EventInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Guid")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetRaiseMethod", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.MethodInfo"), [$.Boolean])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetRemoveMethod", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.MethodInfo"), [$.Boolean])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDefined", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type"), $.Boolean])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveEventHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm02.TypeRef("System.Delegate")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "_innerEventInfo", $asm02.TypeRef("System.Reflection.EventInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm02.TypeRef("System.Reflection.EventAttributes"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "DeclaringType", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReflectedType", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

JSIL.DeclareNamespace("System.Runtime.CompilerServices");
/* class System.Runtime.CompilerServices.ExecutionScope */ 

(function ExecutionScope$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.ExecutionScope", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateDelegate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Delegate"), [$.Int32, $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateHoistedLocals", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:true }, "IsolateExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.Field({Static:false, Public:true }, "Parent", $.Type);

    $.Field({Static:false, Public:true }, "Globals", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:true }, "Locals", $jsilcore.TypeRef("System.Array", [$.Object]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this type", true]; });

})();

/* class System.Runtime.CompilerServices.DynamicAttribute */ 

(function DynamicAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Attribute"), 
      Name: "System.Runtime.CompilerServices.DynamicAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Boolean]))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_TransformFlags", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IList`1", [$.Boolean]))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_transformFlags", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Property({Static:false, Public:true }, "TransformFlags", $asm02.TypeRef("System.Collections.Generic.IList`1", [$.Boolean]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.$Flags(
          "Class", "Field", "Parameter", "Property", 
          "ReturnValue", "Struct"
      )]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

JSIL.MakeTypeAlias($jsilcore, "System.Runtime.CompilerServices.CallSite");

JSIL.MakeTypeAlias($jsilcore, "System.Runtime.CompilerServices.CallSite`1");

/* class System.Runtime.CompilerServices.CallSite`1+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.CallSite`1+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateCustomNoMatchDelegate$gb__19_0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm02.TypeRef("System.Reflection.ParameterInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateCustomUpdateDelegate$gb__20_0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm02.TypeRef("System.Reflection.ParameterInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateCustomUpdateDelegate$gb__20_1", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $asm07.TypeRef("System.Runtime.CompilerServices.CallSite`1+<>c", [$.GenericParameter("T")]));

    $.Field({Static:true , Public:true }, "$l$g9__19_0", $asm02.TypeRef("System.Func`2", [$asm02.TypeRef("System.Reflection.ParameterInfo"), $asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Field({Static:true , Public:true }, "$l$g9__20_0", $asm02.TypeRef("System.Func`2", [$asm02.TypeRef("System.Reflection.ParameterInfo"), $asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Field({Static:true , Public:true }, "$l$g9__20_1", $asm02.TypeRef("System.Func`2", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm07.TypeRef("System.Linq.Expressions.Expression")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Runtime.CompilerServices.CallSiteHelpers */ 

(function CallSiteHelpers$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Runtime.CompilerServices.CallSiteHelpers", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "IsInternalFrame", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Reflection.MethodBase")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:true , Public:false}, "_knownNonDynamicMethodType", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Runtime.CompilerServices.CallSiteOps */ 

(function CallSiteOps$Members () {
  var $, $thisType;












  JSIL.MakeStaticClass("System.Runtime.CompilerServices.CallSiteOps", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "AddRule", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.CompilerServices.CallSite`1", ["!!0"]), "!!0"], ["T"])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm05.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm05.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Bind", 
      new JSIL.MethodSignature("!!0", [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm07.TypeRef("System.Runtime.CompilerServices.CallSite`1", ["!!0"]), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ], ["T"])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm05.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm05.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ClearMatch", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Runtime.CompilerServices.CallSite"))
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm05.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm05.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateMatchmaker", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Runtime.CompilerServices.CallSite`1", ["!!0"]), [$asm07.TypeRef("System.Runtime.CompilerServices.CallSite`1", ["!!0"])], ["T"])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm05.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm05.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetCachedRules", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm07.TypeRef("System.Runtime.CompilerServices.RuleCache`1", ["!!0"])], ["T"])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm05.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm05.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetMatch", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Runtime.CompilerServices.CallSite")])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm05.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm05.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetRuleCache", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Runtime.CompilerServices.RuleCache`1", ["!!0"]), [$asm07.TypeRef("System.Runtime.CompilerServices.CallSite`1", ["!!0"])], ["T"])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm05.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm05.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetRules", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm07.TypeRef("System.Runtime.CompilerServices.CallSite`1", ["!!0"])], ["T"])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm05.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm05.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MoveRule", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.CompilerServices.RuleCache`1", ["!!0"]), "!!0", 
          $.Int32
        ], ["T"])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm05.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm05.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SetNotMatched", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Runtime.CompilerServices.CallSite")])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm05.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm05.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "UpdateRules", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.CompilerServices.CallSite`1", ["!!0"]), $.Int32], ["T"])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm05.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm05.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm05.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm05.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Runtime.CompilerServices.RuntimeOps */ 

(function RuntimeOps$Members () {
  var $, $thisType;










  JSIL.MakeStaticClass("System.Runtime.CompilerServices.RuntimeOps", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "CreateRuntimeVariables", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), [$jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.Int64])])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm05.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm05.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateRuntimeVariables", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"))
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm05.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm05.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ExpandoCheckVersion", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Dynamic.ExpandoObject"), $.Object])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm05.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm05.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ExpandoPromoteClass", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Dynamic.ExpandoObject"), $.Object, 
          $.Object
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm05.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm05.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ExpandoTryDeleteValue", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Dynamic.ExpandoObject"), $.Object, 
          $.Int32, $.String, 
          $.Boolean
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm05.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm05.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ExpandoTryGetValue", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Dynamic.ExpandoObject"), $.Object, 
          $.Int32, $.String, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm05.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm05.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ExpandoTrySetValue", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Dynamic.ExpandoObject"), $.Object, 
          $.Int32, $.Object, 
          $.String, $.Boolean
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm05.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm05.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MergeRuntimeVariables", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), [
          $asm07.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), $asm07.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm05.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm05.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Quote", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $.Object, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm05.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm05.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm05.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm05.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

JSIL.DeclareNamespace("System.Linq");
JSIL.DeclareNamespace("System.Linq.Expressions");
/* class System.Linq.Expressions.ExpressionVisitor */ 

(function ExpressionVisitor$Members () {
  var $, $thisType;














































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.ExpressionVisitor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ValidateBinary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm07.TypeRef("System.Linq.Expressions.BinaryExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateChildType", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateSwitch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.SwitchExpression"), [$asm07.TypeRef("System.Linq.Expressions.SwitchExpression"), $asm07.TypeRef("System.Linq.Expressions.SwitchExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateUnary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), $asm07.TypeRef("System.Linq.Expressions.UnaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Visit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Visit", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), [$asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Visit", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), [$asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!0"])], ["T"])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "VisitAndConvert", 
      new JSIL.MethodSignature("!!0", ["!!0", $.String], ["T"])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "VisitAndConvert", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), [$asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), $.String], ["T"])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "VisitArguments", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), [$asm07.TypeRef("System.Linq.Expressions.IArgumentProvider")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBinary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.BinaryExpression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBlock", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.BlockExpression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCatchBlock", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm07.TypeRef("System.Linq.Expressions.CatchBlock")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConditional", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ConditionalExpression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConstant", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ConstantExpression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDebugInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.DebugInfoExpression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDefault", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.DefaultExpression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDynamic", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.DynamicExpression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitElementInit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ElementInit"), [$asm07.TypeRef("System.Linq.Expressions.ElementInit")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitExtension", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitGoto", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.GotoExpression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.IndexExpression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitInvocation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.InvocationExpression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLabel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.LabelExpression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLabelTarget", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.LabelTarget"), [$asm07.TypeRef("System.Linq.Expressions.LabelTarget")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitListInit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ListInitExpression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLoop", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.LoopExpression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.MemberExpression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberAssignment", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm07.TypeRef("System.Linq.Expressions.MemberAssignment")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberBinding", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberBinding"), [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberInit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.MemberInitExpression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberListBinding", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm07.TypeRef("System.Linq.Expressions.MemberListBinding")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberMemberBinding", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm07.TypeRef("System.Linq.Expressions.MemberMemberBinding")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMethodCall", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.MethodCallExpression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNew", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.NewExpression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNewArray", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.NewArrayExpression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitRuntimeVariables", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSwitch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.SwitchExpression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSwitchCase", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.SwitchCase"), [$asm07.TypeRef("System.Linq.Expressions.SwitchCase")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTry", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.TryExpression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTypeBinary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.TypeBinaryExpression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitUnary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.UnaryExpression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Runtime.CompilerServices.RuntimeOps+ExpressionQuoter */ 

(function ExpressionQuoter$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor"), 
      Name: "System.Runtime.CompilerServices.RuntimeOps+ExpressionQuoter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBox", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Runtime.CompilerServices.IStrongBox"), [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBlock", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.BlockExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCatchBlock", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm07.TypeRef("System.Linq.Expressions.CatchBlock")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitRuntimeVariables", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_scope", $asm07.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_locals", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_shadowedVars", $asm05.TypeRef("System.Collections.Generic.Stack`1", [$asm07.TypeRef("System.Linq.Expressions.Set`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.RuntimeOps+RuntimeVariables */ 

(function RuntimeVariables$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.RuntimeOps+RuntimeVariables", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Runtime.CompilerServices.IStrongBox")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IRuntimeVariables.get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IRuntimeVariables.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IRuntimeVariables.set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), "set_Item");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_boxes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Runtime.CompilerServices.IStrongBox")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IRuntimeVariables.Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IRuntimeVariables.Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.RuntimeOps+MergedRuntimeVariables */ 

(function MergedRuntimeVariables$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.RuntimeOps+MergedRuntimeVariables", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), $asm07.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_first", $asm07.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_second", $asm07.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_indexes", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Runtime.CompilerServices.RuntimeOps+EmptyRuntimeVariables */ 

(function EmptyRuntimeVariables$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.RuntimeOps+EmptyRuntimeVariables", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IRuntimeVariables.get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IRuntimeVariables.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IRuntimeVariables.set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), "set_Item");

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IRuntimeVariables.Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IRuntimeVariables.Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.RuntimeOps+RuntimeVariableList */ 

(function RuntimeVariableList$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.RuntimeOps+RuntimeVariableList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.Int64])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStrongBox", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Runtime.CompilerServices.IStrongBox"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_data", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_indexes", $jsilcore.TypeRef("System.Array", [$.Int64]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Runtime.CompilerServices.RuleCache`1 */ 

(function RuleCache$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.RuleCache`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AddOrInsert", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRule", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRules", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveRule", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplaceRule", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T"), $.GenericParameter("T")])
    );

    $.Field({Static:false, Public:false}, "_rules", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "cacheLock", $.Object);

    $.Constant({Static:true , Public:false}, "MaxRules", $.Int32, 128);

    $.Constant({Static:true , Public:false}, "InsertPosition", $.Int32, 64);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm05.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm05.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Runtime.CompilerServices.Closure */ 

(function Closure$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.Closure", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true , ReadOnly:true }, "Constants", $jsilcore.TypeRef("System.Array", [$.Object]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true , ReadOnly:true }, "Locals", $jsilcore.TypeRef("System.Array", [$.Object]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm05.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm05.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Runtime.CompilerServices.DebugInfoGenerator */ 

(function DebugInfoGenerator$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.DebugInfoGenerator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "CreatePdbGenerator", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MarkSequencePoint", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), $.Int32, 
          $asm07.TypeRef("System.Linq.Expressions.DebugInfoExpression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MarkSequencePoint", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), $asm02.TypeRef("System.Reflection.MethodBase"), 
          $asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Linq.Expressions.DebugInfoExpression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetLocalName", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.SymbolDocumentGenerator */ 

(function SymbolDocumentGenerator$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator"), 
      Name: "System.Runtime.CompilerServices.SymbolDocumentGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSymbolWriter", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Diagnostics.SymbolStore.ISymbolDocumentWriter"), [$asm02.TypeRef("System.Reflection.Emit.MethodBuilder"), $asm07.TypeRef("System.Linq.Expressions.SymbolDocumentInfo")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MarkSequencePoint", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), $asm02.TypeRef("System.Reflection.MethodBase"), 
          $asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Linq.Expressions.DebugInfoExpression")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MarkSequencePoint", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), $.Int32, 
          $asm07.TypeRef("System.Linq.Expressions.DebugInfoExpression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetLocalName", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), $.String])
    );

    $.Field({Static:false, Public:false}, "_symbolWriters", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), $asm02.TypeRef("System.Diagnostics.SymbolStore.ISymbolDocumentWriter")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Runtime.CompilerServices.IRuntimeVariables */ 

JSIL.MakeInterface(
  "System.Runtime.CompilerServices.IRuntimeVariables", true, [], function ($) {
    $.Method({}, "get_Count", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_Item", new JSIL.MethodSignature($.Object, [$.Int32]));
    $.Method({}, "set_Item", new JSIL.MethodSignature(null, [$.Int32, $.Object]));
    $.Property({}, "Count");
    $.Property({}, "Item");
  }, [])
  .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
  .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

/* class System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1 */ 

(function ReadOnlyCollectionBuilder$b1$Members () {
  var $, $thisType;








































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Capacity", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCompatibleObject", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Reverse", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Reverse", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Capacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm02.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Add", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm02.TypeRef("System.Collections.IList"), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Overrides($asm02.TypeRef("System.Collections.IList"), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_IsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IList"), "get_IsFixedSize");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IList"), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    )
      .Overrides($asm02.TypeRef("System.Collections.IList"), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm02.TypeRef("System.Collections.IList"), "IndexOf");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    )
      .Overrides($asm02.TypeRef("System.Collections.IList"), "Insert");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Remove", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IList"), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    )
      .Overrides($asm02.TypeRef("System.Collections.IList"), "set_Item");

    $.ExternalMethod({Static:true , Public:false}, "ThrowInvalidTypeException", 
      new JSIL.MethodSignature(null, [$.Object, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToReadOnlyCollection", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateNullValue", 
      new JSIL.MethodSignature(null, [$.Object, $.String])
    );

    $.Constant({Static:true , Public:false}, "DefaultCapacity", $.Int32, 4);

    $.Field({Static:false, Public:false}, "_items", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "_size", $.Int32);

    $.Field({Static:false, Public:false}, "_version", $.Int32);

    $.Field({Static:false, Public:false}, "_syncRoot", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_emptyArray", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true }, "Capacity", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Item", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 3 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IList"), 
      /* 5 */ $asm02.TypeRef("System.Collections.ICollection")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1+Enumerator */ 

(function Enumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1+Enumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_builder", $asm07.TypeRef("System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_version", $.Int32);

    $.Field({Static:false, Public:false}, "_index", $.Int32);

    $.Field({Static:false, Public:false}, "_current", $.GenericParameter("T"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm02.TypeRef("System.IDisposable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.StrongBox`1 */ 

(function StrongBox$b1$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.StrongBox`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IStrongBox.get_Value", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Runtime.CompilerServices.IStrongBox"), "get_Value")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IStrongBox.set_Value", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Overrides($asm07.TypeRef("System.Runtime.CompilerServices.IStrongBox"), "set_Value")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "Value", $.GenericParameter("T"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IStrongBox.Value", $.Object)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Runtime.CompilerServices.IStrongBox")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* interface System.Runtime.CompilerServices.IStrongBox */ 

JSIL.MakeInterface(
  "System.Runtime.CompilerServices.IStrongBox", true, [], function ($) {
    $.Method({}, "get_Value", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "set_Value", JSIL.MethodSignature.Action($.Object));
    $.Property({}, "Value");
  }, [])
  .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

/* class System.Runtime.CompilerServices.TrueReadOnlyCollection`1 */ 

(function TrueReadOnlyCollection$b1$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.TrueReadOnlyCollection`1")]), 
      Name: "System.Runtime.CompilerServices.TrueReadOnlyCollection`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Linq.IQueryable */ 

JSIL.MakeInterface(
  "System.Linq.IQueryable", true, [], function ($) {
    $.Method({}, "get_Expression", JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression")));
    $.Method({}, "get_ElementType", JSIL.MethodSignature.Return($asm02.TypeRef("System.Type")));
    $.Method({}, "get_Provider", JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.IQueryProvider")));
    $.Property({}, "Expression");
    $.Property({}, "ElementType");
    $.Property({}, "Provider");
  }, [$asm02.TypeRef("System.Collections.IEnumerable")])
  .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

/* interface System.Linq.IQueryable`1 */ 

JSIL.MakeInterface(
  "System.Linq.IQueryable`1", true, ["out T"], function ($) {
  }, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.IQueryable`1").out()]), $asm02.TypeRef("System.Collections.IEnumerable"), $asm07.TypeRef("System.Linq.IQueryable")])
  .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

/* interface System.Linq.IQueryProvider */ 

JSIL.MakeInterface(
  "System.Linq.IQueryProvider", true, [], function ($) {
    $.Method({}, "CreateQuery", new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable"), [$asm07.TypeRef("System.Linq.Expressions.Expression")]));
    $.Method({}, "CreateQuery", new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.Expressions.Expression")], ["TElement"]));
    $.Method({}, "Execute", new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Linq.Expressions.Expression")]));
    $.Method({}, "Execute", new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.Expressions.Expression")], ["TResult"]));
  }, [])
  .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

/* interface System.Linq.IOrderedQueryable */ 

JSIL.MakeInterface(
  "System.Linq.IOrderedQueryable", true, [], function ($) {
  }, [$asm07.TypeRef("System.Linq.IQueryable"), $asm02.TypeRef("System.Collections.IEnumerable")])
  .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

/* interface System.Linq.IOrderedQueryable`1 */ 

JSIL.MakeInterface(
  "System.Linq.IOrderedQueryable`1", true, ["out T"], function ($) {
  }, [$asm07.TypeRef("System.Linq.IQueryable`1", [new JSIL.GenericParameter("T", "System.Linq.IOrderedQueryable`1").out()]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.IOrderedQueryable`1").out()]), $asm02.TypeRef("System.Collections.IEnumerable"), $asm07.TypeRef("System.Linq.IQueryable"), $asm07.TypeRef("System.Linq.IOrderedQueryable")])
  .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

/* class System.Linq.Queryable */ 

(function Queryable$Members () {
  var $, $thisType;



































































































































  JSIL.MakeStaticClass("System.Linq.Queryable", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`3", [
              "!!0", "!!0", 
              "!!0"
            ])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!1", [
          $asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!1", 
          $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`3", [
                "!!1", "!!0", 
                "!!1"
              ])])
        ], ["TSource", "TAccumulate"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!2", [
          $asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!1", 
          $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`3", [
                "!!1", "!!0", 
                "!!1"
              ])]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!1", "!!2"])])
        ], ["TSource", "TAccumulate", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "All", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsQueryable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TElement"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsQueryable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable"), [$asm02.TypeRef("System.Collections.IEnumerable")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.Linq.IQueryable`1", [$.Int32])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm07.TypeRef("System.Linq.IQueryable`1", [$asm02.TypeRef("System.Nullable`1", [$.Int32])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.Linq.IQueryable`1", [$.Int64])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm07.TypeRef("System.Linq.IQueryable`1", [$asm02.TypeRef("System.Nullable`1", [$.Int64])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Single, [$asm07.TypeRef("System.Linq.IQueryable`1", [$.Single])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Single]), [$asm07.TypeRef("System.Linq.IQueryable`1", [$asm02.TypeRef("System.Nullable`1", [$.Single])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.Linq.IQueryable`1", [$.Double])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm07.TypeRef("System.Linq.IQueryable`1", [$asm02.TypeRef("System.Nullable`1", [$.Double])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$asm07.TypeRef("System.Linq.IQueryable`1", [$asm02.TypeRef("System.Decimal")])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), [$asm07.TypeRef("System.Linq.IQueryable`1", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $.Int32])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Int32])])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Single, [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $.Single])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Single]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Single])])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $.Int64])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Int64])])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $.Double])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Double])])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Cast", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.IQueryable")], ["TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Concat", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!0", 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Distinct", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Distinct", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ElementAt", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ElementAtOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [
          $asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetMethodInfo", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.MethodInfo"), [$asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), "!!0"], ["T1", "T2"])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodInfo", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.MethodInfo"), [
          $asm02.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ]), "!!0", 
          "!!1"
        ], ["T1", "T2", "T3"])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodInfo", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.MethodInfo"), [
          $asm02.TypeRef("System.Func`4", [
              "!!0", "!!1", 
              "!!2", "!!3"
            ]), "!!0", 
          "!!1", "!!2"
        ], ["T1", "T2", "T3", "T4"])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodInfo", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.MethodInfo"), [
          $asm02.TypeRef("System.Func`5", [
              "!!0", "!!1", 
              "!!2", "!!3", 
              "!!4"
            ]), "!!0", 
          "!!1", "!!2", 
          "!!3"
        ], [
          "T1", "T2", "T3", "T4", 
          "T5"
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodInfo", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.MethodInfo"), [
          $asm02.TypeRef("System.Func`6", [
              "!!0", "!!1", 
              "!!2", "!!3", 
              "!!4", "!!5"
            ]), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4"
        ], [
          "T1", "T2", "T3", "T4", 
          "T5", "T6"
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodInfo", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.MethodInfo"), [
          $asm02.TypeRef("System.Func`7", [
              "!!0", "!!1", 
              "!!2", "!!3", 
              "!!4", "!!5", 
              "!!6"
            ]), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5"
        ], [
          "T1", "T2", "T3", "T4", 
          "T5", "T6", "T7"
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSourceExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", [$asm07.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", [$asm07.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
          $asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!2"])])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", [$asm07.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [
          $asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", [$asm07.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
          $asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`3", [
                "!!1", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
                "!!3"
              ])])
        ], ["TSource", "TKey", "TElement", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
          $asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`3", [
                "!!1", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
                "!!2"
              ])])
        ], ["TSource", "TKey", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
          $asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`3", [
                "!!1", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
                "!!2"
              ])]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`3", [
                "!!1", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
                "!!3"
              ])]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!1", "!!2"])]), 
          $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`3", [
                "!!0", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
                "!!3"
              ])])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!1", "!!2"])]), 
          $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`3", [
                "!!0", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
                "!!3"
              ])]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [
          $asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!1", "!!2"])]), 
          $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`3", [
                "!!0", "!!1", 
                "!!3"
              ])])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!1", "!!2"])]), 
          $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`3", [
                "!!0", "!!1", 
                "!!3"
              ])]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LongCount", 
      new JSIL.MethodSignature($.Int64, [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LongCount", 
      new JSIL.MethodSignature($.Int64, [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("!!1", [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("!!1", [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OfType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.IQueryable")], ["TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [
          $asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm02.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [
          $asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm02.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Reverse", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!1"]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!1"]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              "!!1"
            ])])], ["TSource", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!1"]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])])], ["TSource", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!1"]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
            ])])], ["TSource", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
          $asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`3", [
                "!!0", $.Int32, 
                $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
              ])]), 
          $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`3", [
                "!!0", "!!1", 
                "!!2"
              ])])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
          $asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])]), 
          $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`3", [
                "!!0", "!!1", 
                "!!2"
              ])])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Single", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Single", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Skip", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $.Boolean
            ])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Linq.IQueryable`1", [$.Int32])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int32]), [$asm07.TypeRef("System.Linq.IQueryable`1", [$asm02.TypeRef("System.Nullable`1", [$.Int32])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int64, [$asm07.TypeRef("System.Linq.IQueryable`1", [$.Int64])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int64]), [$asm07.TypeRef("System.Linq.IQueryable`1", [$asm02.TypeRef("System.Nullable`1", [$.Int64])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Single, [$asm07.TypeRef("System.Linq.IQueryable`1", [$.Single])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Single]), [$asm07.TypeRef("System.Linq.IQueryable`1", [$asm02.TypeRef("System.Nullable`1", [$.Single])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.Linq.IQueryable`1", [$.Double])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm07.TypeRef("System.Linq.IQueryable`1", [$asm02.TypeRef("System.Nullable`1", [$.Double])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$asm07.TypeRef("System.Linq.IQueryable`1", [$asm02.TypeRef("System.Decimal")])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), [$asm07.TypeRef("System.Linq.IQueryable`1", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $.Int32])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int32]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Int32])])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int64, [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $.Int64])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int64]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Int64])])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Single, [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $.Single])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Single]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Single])])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $.Double])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Double])])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Take", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $.Boolean
            ])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [
          $asm07.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm02.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [
          $asm07.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm02.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [
          $asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $.Boolean
            ])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Zip", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
          $asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm07.TypeRef("System.Linq.Expressions.Expression`1", [$asm02.TypeRef("System.Func`3", [
                "!!0", "!!1", 
                "!!2"
              ])])
        ], ["TFirst", "TSecond", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Enumerable */ 

(function Enumerable$Members () {
  var $, $thisType;












































































































































































































  JSIL.MakeStaticClass("System.Linq.Enumerable", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!0", [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`3", [
            "!!0", "!!0", 
            "!!0"
          ])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!1", [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!1", 
          $asm02.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ])
        ], ["TSource", "TAccumulate"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!2", [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!1", 
          $asm02.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ]), $asm02.TypeRef("System.Func`2", ["!!1", "!!2"])
        ], ["TSource", "TAccumulate", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "All", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsEnumerable", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Int32])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Int64])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Single, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Single]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Single])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Double])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Decimal")])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Single, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Single]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Cast", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.IEnumerable")], ["TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CastIterator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.IEnumerable")], ["TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Enumerable_$lCastIterator$gd__94$b1.__Type__]; });

    $.ExternalMethod({Static:true , Public:false}, "CombinePredicates", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Func`2", ["!!0", $.Boolean]), [$asm02.TypeRef("System.Func`2", ["!!0", $.Boolean]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:false}, "CombineSelectors", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Func`2", ["!!0", "!!2"]), [$asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), $asm02.TypeRef("System.Func`2", ["!!1", "!!2"])], ["TSource", "TMiddle", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Concat", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ConcatIterator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Enumerable_$lConcatIterator$gd__58$b1.__Type__]; });

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0", 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DefaultIfEmptyIterator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Enumerable_$lDefaultIfEmptyIterator$gd__90$b1.__Type__]; });

    $.ExternalMethod({Static:true , Public:true }, "Distinct", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Distinct", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DistinctIterator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Enumerable_$lDistinctIterator$gd__63$b1.__Type__]; });

    $.ExternalMethod({Static:true , Public:true }, "ElementAt", 
      new JSIL.MethodSignature("!!0", [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ElementAtOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Empty", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), null, ["TResult"])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ExceptIterator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Enumerable_$lExceptIterator$gd__72$b1.__Type__]; });

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Func`3", [
              "!!1", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
              "!!2"
            ])
        ], ["TSource", "TKey", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm02.TypeRef("System.Func`3", [
              "!!1", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
              "!!3"
            ])
        ], ["TSource", "TKey", "TElement", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Func`3", [
              "!!1", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
              "!!2"
            ]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm02.TypeRef("System.Func`3", [
              "!!1", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
              "!!3"
            ]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm02.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm02.TypeRef("System.Func`3", [
              "!!0", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm02.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm02.TypeRef("System.Func`3", [
              "!!0", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GroupJoinIterator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm02.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm02.TypeRef("System.Func`3", [
              "!!0", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Enumerable_$lGroupJoinIterator$gd__40$b4.__Type__]; });

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IntersectIterator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Enumerable_$lIntersectIterator$gd__69$b1.__Type__]; });

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm02.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm02.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm02.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm02.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "JoinIterator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm02.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm02.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Enumerable_$lJoinIterator$gd__37$b4.__Type__]; });

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LongCount", 
      new JSIL.MethodSignature($.Int64, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LongCount", 
      new JSIL.MethodSignature($.Int64, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int32, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int32]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Int32])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int64, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int64]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Int64])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Double, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Double])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Single, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Single]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Single])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Decimal")])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("!!0", [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int32, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int32]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int64, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int64]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Single, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Single]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Double, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("!!1", [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int32, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int32]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Int32])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int64, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int64]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Int64])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Single, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Single]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Single])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Double, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Double])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Decimal")])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("!!0", [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int32, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int32]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int64, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int64]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Single, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Single]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Double, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("!!1", [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OfType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.IEnumerable")], ["TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "OfTypeIterator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.IEnumerable")], ["TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Enumerable_$lOfTypeIterator$gd__92$b1.__Type__]; });

    $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Range", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]), [$.Int32, $.Int32])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "RangeIterator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]), [$.Int32, $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Enumerable_$lRangeIterator$gd__110.__Type__]; });

    $.ExternalMethod({Static:true , Public:true }, "Repeat", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), ["!!0", $.Int32], ["TResult"])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "RepeatIterator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), ["!!0", $.Int32], ["TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Enumerable_$lRepeatIterator$gd__112$b1.__Type__]; });

    $.ExternalMethod({Static:true , Public:true }, "Reverse", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ReverseIterator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Enumerable_$lReverseIterator$gd__74$b1.__Type__]; });

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            "!!1"
          ])], ["TSource", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SelectIterator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            "!!1"
          ])], ["TSource", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Enumerable_$lSelectIterator$gd__5$b2.__Type__]; });

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])], ["TSource", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
          ])], ["TSource", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
            ]), 
          $asm02.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])]), 
          $asm02.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SelectManyIterator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])], ["TSource", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Enumerable_$lSelectManyIterator$gd__16$b2.__Type__]; });

    $.ExternalMethod({Static:true , Public:false}, "SelectManyIterator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
          ])], ["TSource", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Enumerable_$lSelectManyIterator$gd__18$b2.__Type__]; });

    $.ExternalMethod({Static:true , Public:false}, "SelectManyIterator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
            ]), 
          $asm02.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Enumerable_$lSelectManyIterator$gd__20$b3.__Type__]; });

    $.ExternalMethod({Static:true , Public:false}, "SelectManyIterator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])]), 
          $asm02.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Enumerable_$lSelectManyIterator$gd__22$b3.__Type__]; });

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Single", 
      new JSIL.MethodSignature("!!0", [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Single", 
      new JSIL.MethodSignature("!!0", [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Skip", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SkipIterator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Enumerable_$lSkipIterator$gd__30$b1.__Type__]; });

    $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SkipWhileIterator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Enumerable_$lSkipWhileIterator$gd__32$b1.__Type__]; });

    $.ExternalMethod({Static:true , Public:false}, "SkipWhileIterator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Enumerable_$lSkipWhileIterator$gd__34$b1.__Type__]; });

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int32, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int32]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Int32])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int64, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int64]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Int64])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Single, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Single]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Single])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Double])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Decimal")])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int32, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int32]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int64, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int64]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Single, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Single]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Take", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TakeIterator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Enumerable_$lTakeIterator$gd__24$b1.__Type__]; });

    $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TakeWhileIterator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Enumerable_$lTakeWhileIterator$gd__26$b1.__Type__]; });

    $.ExternalMethod({Static:true , Public:false}, "TakeWhileIterator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Enumerable_$lTakeWhileIterator$gd__28$b1.__Type__]; });

    $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [
          $asm07.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [
          $asm07.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!0"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!2"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!2"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToList", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.List`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ILookup`2", ["!!1", "!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ILookup`2", ["!!1", "!!0"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ILookup`2", ["!!1", "!!2"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ILookup`2", ["!!1", "!!2"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "UnionIterator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Enumerable_$lUnionIterator$gd__66$b1.__Type__]; });

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WhereIterator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Enumerable_$lWhereIterator$gd__2$b1.__Type__]; });

    $.ExternalMethod({Static:true , Public:true }, "Zip", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm02.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TFirst", "TSecond", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ZipIterator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm02.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TFirst", "TSecond", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Enumerable_$lZipIterator$gd__60$b3.__Type__]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Enumerable+Iterator`1 */ 

(function Iterator$b1$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+Iterator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), "!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "threadId", $.Int32);

    $.Field({Static:false, Public:false}, "state", $.Int32);

    $.Field({Static:false, Public:false}, "current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+WhereEnumerableIterator`1 */ 

(function WhereEnumerableIterator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Enumerable+Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable+WhereEnumerableIterator`1")]), 
      Name: "System.Linq.Enumerable+WhereEnumerableIterator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), "!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "predicate", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "enumerator", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+WhereArrayIterator`1 */ 

(function WhereArrayIterator$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Enumerable+Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable+WhereArrayIterator`1")]), 
      Name: "System.Linq.Enumerable+WhereArrayIterator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), "!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "source", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "predicate", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+WhereListIterator`1 */ 

(function WhereListIterator$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Enumerable+Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable+WhereListIterator`1")]), 
      Name: "System.Linq.Enumerable+WhereListIterator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TSource")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), "!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "source", $asm02.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "predicate", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "enumerator", $asm02.TypeRef("System.Collections.Generic.List`1+Enumerator", [$.GenericParameter("TSource")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+WhereSelectEnumerableIterator`2 */ 

(function WhereSelectEnumerableIterator$b2$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Enumerable+Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable+WhereSelectEnumerableIterator`2")]), 
      Name: "System.Linq.Enumerable+WhereSelectEnumerableIterator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]), 
          $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TResult")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Func`2", [$.GenericParameter("TResult"), "!!0"])], ["TResult2"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), [$asm02.TypeRef("System.Func`2", [$.GenericParameter("TResult"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "predicate", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "selector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")]));

    $.Field({Static:false, Public:false}, "enumerator", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+WhereSelectArrayIterator`2 */ 

(function WhereSelectArrayIterator$b2$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Enumerable+Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable+WhereSelectArrayIterator`2")]), 
      Name: "System.Linq.Enumerable+WhereSelectArrayIterator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]), 
          $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TResult")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Func`2", [$.GenericParameter("TResult"), "!!0"])], ["TResult2"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), [$asm02.TypeRef("System.Func`2", [$.GenericParameter("TResult"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "source", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "predicate", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "selector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")]));

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+WhereSelectListIterator`2 */ 

(function WhereSelectListIterator$b2$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Enumerable+Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable+WhereSelectListIterator`2")]), 
      Name: "System.Linq.Enumerable+WhereSelectListIterator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TSource")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]), 
          $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TResult")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Func`2", [$.GenericParameter("TResult"), "!!0"])], ["TResult2"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), [$asm02.TypeRef("System.Func`2", [$.GenericParameter("TResult"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "source", $asm02.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "predicate", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "selector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")]));

    $.Field({Static:false, Public:false}, "enumerator", $asm02.TypeRef("System.Collections.Generic.List`1+Enumerator", [$.GenericParameter("TSource")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+<WhereIterator>d__2`1 */ 

(function $lWhereIterator$gd__2$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<WhereIterator>d__2`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lindex$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "predicate", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__predicate", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<SelectIterator>d__5`2 */ 

(function $lSelectIterator$gd__5$b2$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<SelectIterator>d__5`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lindex$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "selector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__selector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<>c__DisplayClass6_0`1 */ 

(function $l$gc__DisplayClass6_0$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<>c__DisplayClass6_0`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCombinePredicates$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TSource")])
    );

    $.Field({Static:false, Public:true }, "predicate1", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:true }, "predicate2", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<>c__DisplayClass7_0`3 */ 

(function $l$gc__DisplayClass7_0$b3$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<>c__DisplayClass7_0`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TMiddle", "TResult"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCombineSelectors$gb__0", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), [$.GenericParameter("TSource")])
    );

    $.Field({Static:false, Public:true }, "selector2", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TMiddle"), $.GenericParameter("TResult")]));

    $.Field({Static:false, Public:true }, "selector1", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TMiddle")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<SelectManyIterator>d__16`2 */ 

(function $lSelectManyIterator$gd__16$b2$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<SelectManyIterator>d__16`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "selector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])]));

    $.Field({Static:false, Public:true }, "$l$g3__selector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap2", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<SelectManyIterator>d__18`2 */ 

(function $lSelectManyIterator$gd__18$b2$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<SelectManyIterator>d__18`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lindex$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "selector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__selector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])
        ]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap2", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<SelectManyIterator>d__20`3 */ 

(function $lSelectManyIterator$gd__20$b3$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<SelectManyIterator>d__20`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TCollection", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lindex$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "collectionSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TCollection")])
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__collectionSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TCollection")])
        ]));

    $.Field({Static:false, Public:false}, "resultSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.GenericParameter("TCollection"), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__resultSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.GenericParameter("TCollection"), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:false}, "$lelement$g5__2", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap2", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TCollection")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<SelectManyIterator>d__22`3 */ 

(function $lSelectManyIterator$gd__22$b3$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<SelectManyIterator>d__22`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TCollection", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "collectionSelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TCollection")])]));

    $.Field({Static:false, Public:true }, "$l$g3__collectionSelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TCollection")])]));

    $.Field({Static:false, Public:false}, "resultSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.GenericParameter("TCollection"), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__resultSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.GenericParameter("TCollection"), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:false}, "$lelement$g5__1", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap2", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TCollection")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<TakeIterator>d__24`1 */ 

(function $lTakeIterator$gd__24$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<TakeIterator>d__24`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__count", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<TakeWhileIterator>d__26`1 */ 

(function $lTakeWhileIterator$gd__26$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<TakeWhileIterator>d__26`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "predicate", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:true }, "$l$g3__predicate", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<TakeWhileIterator>d__28`1 */ 

(function $lTakeWhileIterator$gd__28$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<TakeWhileIterator>d__28`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lindex$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "predicate", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__predicate", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<SkipIterator>d__30`1 */ 

(function $lSkipIterator$gd__30$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<SkipIterator>d__30`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__count", $.Int32);

    $.Field({Static:false, Public:false}, "$le$g5__1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<SkipWhileIterator>d__32`1 */ 

(function $lSkipWhileIterator$gd__32$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<SkipWhileIterator>d__32`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lyielding$g5__1", $.Boolean);

    $.Field({Static:false, Public:false}, "predicate", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:true }, "$l$g3__predicate", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<SkipWhileIterator>d__34`1 */ 

(function $lSkipWhileIterator$gd__34$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<SkipWhileIterator>d__34`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lindex$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "$lyielding$g5__2", $.Boolean);

    $.Field({Static:false, Public:false}, "predicate", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__predicate", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<JoinIterator>d__37`4 */ 

(function $lJoinIterator$gd__37$b4$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<JoinIterator>d__37`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOuter", "TInner", "TKey", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "inner", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")]));

    $.Field({Static:false, Public:true }, "$l$g3__inner", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")]));

    $.Field({Static:false, Public:false}, "innerKeySelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInner"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "$l$g3__innerKeySelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInner"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "$l$g3__comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "outer", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOuter")]));

    $.Field({Static:false, Public:true }, "$l$g3__outer", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOuter")]));

    $.Field({Static:false, Public:false}, "$llookup$g5__1", $asm07.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TInner")]));

    $.Field({Static:false, Public:false}, "outerKeySelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TOuter"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "$l$g3__outerKeySelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TOuter"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "resultSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TOuter"), $.GenericParameter("TInner"), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__resultSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TOuter"), $.GenericParameter("TInner"), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:false}, "$litem$g5__2", $.GenericParameter("TOuter"));

    $.Field({Static:false, Public:false}, "$lg$g5__3", $asm07.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TInner")]));

    $.Field({Static:false, Public:false}, "$li$g5__4", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOuter")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<GroupJoinIterator>d__40`4 */ 

(function $lGroupJoinIterator$gd__40$b4$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<GroupJoinIterator>d__40`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOuter", "TInner", "TKey", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "inner", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")]));

    $.Field({Static:false, Public:true }, "$l$g3__inner", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")]));

    $.Field({Static:false, Public:false}, "innerKeySelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInner"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "$l$g3__innerKeySelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInner"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "$l$g3__comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "outer", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOuter")]));

    $.Field({Static:false, Public:true }, "$l$g3__outer", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOuter")]));

    $.Field({Static:false, Public:false}, "resultSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TOuter"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")]), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__resultSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TOuter"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")]), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:false}, "$llookup$g5__1", $asm07.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TInner")]));

    $.Field({Static:false, Public:false}, "outerKeySelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TOuter"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "$l$g3__outerKeySelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TOuter"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOuter")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<ConcatIterator>d__58`1 */ 

(function $lConcatIterator$gd__58$b1$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<ConcatIterator>d__58`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "first", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__first", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "second", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__second", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<ZipIterator>d__60`3 */ 

(function $lZipIterator$gd__60$b3$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<ZipIterator>d__60`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TFirst", "TSecond", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "first", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TFirst")]));

    $.Field({Static:false, Public:true }, "$l$g3__first", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TFirst")]));

    $.Field({Static:false, Public:false}, "second", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSecond")]));

    $.Field({Static:false, Public:true }, "$l$g3__second", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSecond")]));

    $.Field({Static:false, Public:false}, "resultSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TFirst"), $.GenericParameter("TSecond"), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__resultSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TFirst"), $.GenericParameter("TSecond"), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:false}, "$le1$g5__1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TFirst")]));

    $.Field({Static:false, Public:false}, "$le2$g5__2", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSecond")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<DistinctIterator>d__63`1 */ 

(function $lDistinctIterator$gd__63$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<DistinctIterator>d__63`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lset$g5__1", $asm07.TypeRef("System.Linq.Set`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<UnionIterator>d__66`1 */ 

(function $lUnionIterator$gd__66$b1$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<UnionIterator>d__66`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "first", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__first", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lset$g5__1", $asm07.TypeRef("System.Linq.Set`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "second", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__second", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<IntersectIterator>d__69`1 */ 

(function $lIntersectIterator$gd__69$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<IntersectIterator>d__69`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "second", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__second", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "first", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__first", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lset$g5__1", $asm07.TypeRef("System.Linq.Set`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<ExceptIterator>d__72`1 */ 

(function $lExceptIterator$gd__72$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<ExceptIterator>d__72`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "second", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__second", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "first", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__first", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lset$g5__1", $asm07.TypeRef("System.Linq.Set`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<ReverseIterator>d__74`1 */ 

(function $lReverseIterator$gd__74$b1$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<ReverseIterator>d__74`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$lbuffer$g5__1", $asm07.TypeRef("System.Linq.Buffer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$li$g5__2", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<DefaultIfEmptyIterator>d__90`1 */ 

(function $lDefaultIfEmptyIterator$gd__90$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<DefaultIfEmptyIterator>d__90`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "$le$g5__1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "defaultValue", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:true }, "$l$g3__defaultValue", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<OfTypeIterator>d__92`1 */ 

(function $lOfTypeIterator$gd__92$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<OfTypeIterator>d__92`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm02.TypeRef("System.Collections.IEnumerable"));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm02.TypeRef("System.Collections.IEnumerable"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm02.TypeRef("System.Collections.IEnumerator"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<CastIterator>d__94`1 */ 

(function $lCastIterator$gd__94$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<CastIterator>d__94`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm02.TypeRef("System.Collections.IEnumerable"));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm02.TypeRef("System.Collections.IEnumerable"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm02.TypeRef("System.Collections.IEnumerator"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<RangeIterator>d__110 */ 

(function $lRangeIterator$gd__110$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<RangeIterator>d__110", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Int32$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Int32]))
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Int32")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Int32$g.get_Current", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm02.TypeRef("System.Int32")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "start", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__start", $.Int32);

    $.Field({Static:false, Public:false}, "$li$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Int32$g.Current", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Int32]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<RepeatIterator>d__112`1 */ 

(function $lRepeatIterator$gd__112$b1$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<RepeatIterator>d__112`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "element", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:true }, "$l$g3__element", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$li$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.EmptyEnumerable`1 */ 

(function EmptyEnumerable$b1$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.EmptyEnumerable`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.IdentityFunction`1 */ 

(function IdentityFunction$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.IdentityFunction`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TElement")]), null)
    );

    $.GenericProperty({Static:true , Public:true }, "Instance", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TElement")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.IdentityFunction`1+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.IdentityFunction`1+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lget_Instance$gb__1_0", 
      new JSIL.MethodSignature($.GenericParameter("TElement"), [$.GenericParameter("TElement")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $asm07.TypeRef("System.Linq.IdentityFunction`1+<>c", [$.GenericParameter("TElement")]));

    $.Field({Static:true , Public:true }, "$l$g9__1_0", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TElement")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* interface System.Linq.IOrderedEnumerable`1 */ 

JSIL.MakeInterface(
  "System.Linq.IOrderedEnumerable`1", true, ["TElement"], function ($) {
    $.Method({}, "CreateOrderedEnumerable", new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IOrderedEnumerable`1", [$.GenericParameter("TElement")]), [
          $asm02.TypeRef("System.Func`2", [$.GenericParameter("TElement"), "!!0"]), $asm02.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"]), 
          $.Boolean
        ], ["TKey"]));
  }, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.IOrderedEnumerable`1")]), $asm02.TypeRef("System.Collections.IEnumerable")])
  .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

/* interface System.Linq.IGrouping`2 */ 

JSIL.MakeInterface(
  "System.Linq.IGrouping`2", true, ["out TKey", "out TElement"], function ($) {
    $.Method({}, "get_Key", new JSIL.MethodSignature($.GenericParameter("TKey").out(), null));
    $.Property({}, "Key");
  }, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.IGrouping`2").out()]), $asm02.TypeRef("System.Collections.IEnumerable")])
  .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

/* interface System.Linq.ILookup`2 */ 

JSIL.MakeInterface(
  "System.Linq.ILookup`2", true, ["TKey", "TElement"], function ($) {
    $.Method({}, "get_Count", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_Item", new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), [$.GenericParameter("TKey")]));
    $.Method({}, "Contains", new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey")]));
    $.Property({}, "Count");
    $.Property({}, "Item");
  }, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.ILookup`2"), new JSIL.GenericParameter("TElement", "System.Linq.ILookup`2")])]), $asm02.TypeRef("System.Collections.IEnumerable")])
  .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
  .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

/* class System.Linq.Lookup`2 */ 

(function Lookup$b2$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Lookup`2", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "ApplyResultSelector", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Func`3", [
            $.GenericParameter("TKey"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
            "!!0"
          ])], ["TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Lookup$b2_$lApplyResultSelector$gd__13$b1.__Type__]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.GenericParameter("TKey")]), 
          $asm02.TypeRef("System.Func`2", ["!!0", $.GenericParameter("TElement")]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])
        ], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateForJoin", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), [$.GenericParameter("TKey")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), null)
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Lookup$b2_$lGetEnumerator$gd__12.__Type__]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetGrouping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]), [$.GenericParameter("TKey"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Resize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "groupings", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]));

    $.Field({Static:false, Public:false}, "lastGrouping", $asm07.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Linq.ILookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Lookup`2+Grouping */ 

(function Grouping$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Lookup`2+Grouping", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TElement")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Key", 
      new JSIL.MethodSignature($.GenericParameter("TKey"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), null)
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Lookup$b2_Grouping_$lGetEnumerator$gd__7.__Type__]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TElement")])
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TElement")]), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.Clear", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TElement")]), "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TElement")])
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TElement")]), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]), $.Int32])
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TElement")]), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TElement")]), "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TElement")]), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TElement")])
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TElement")]), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.get_Item", 
      new JSIL.MethodSignature($.GenericParameter("TElement"), [$.Int32])
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("TElement")]), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("TElement")])
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("TElement")]), "IndexOf");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("TElement")])
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("TElement")]), "Insert");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("TElement")]), "RemoveAt");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("TElement")])
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("TElement")]), "set_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "key", $.GenericParameter("TKey"));

    $.Field({Static:false, Public:false}, "hashCode", $.Int32);

    $.Field({Static:false, Public:false}, "elements", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "hashNext", $asm07.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "next", $asm07.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Key", $.GenericParameter("TKey"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.Item", $.GenericParameter("TElement"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 3 */ $asm02.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("TElement")]), 
      /* 4 */ $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TElement")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Lookup`2+Grouping+<GetEnumerator>d__7 */ 

(function $lGetEnumerator$gd__7$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Lookup`2+Grouping+<GetEnumerator>d__7", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TElement"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TElement"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "$li$g5__1", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.Current", $.GenericParameter("TElement"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), 
      /* 1 */ $asm02.TypeRef("System.IDisposable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Lookup`2+<GetEnumerator>d__12 */ 

(function $lGetEnumerator$gd__12$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Lookup`2+<GetEnumerator>d__12", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.IGrouping$lTKey$cmTElement$g$g.get_Current", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "$lg$g5__1", $asm07.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.IGrouping$lTKey$cmTElement$g$g.Current", $asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), 
      /* 1 */ $asm02.TypeRef("System.IDisposable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Lookup`2+<ApplyResultSelector>d__13`1 */ 

(function $lApplyResultSelector$gd__13$b1$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Lookup`2+<ApplyResultSelector>d__13`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "$lg$g5__1", $asm07.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "resultSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__resultSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
          $.GenericParameter("TResult")
        ]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Set`1 */ 

(function Set$b1$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Set`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TElement")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Find", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TElement"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("TElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Resize", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "buckets", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "slots", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Set`1+Slot", [$.GenericParameter("TElement")])]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "freeList", $.Int32);

    $.Field({Static:false, Public:false}, "comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TElement")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Set`1+Slot */ 

(function Slot$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Linq.Set`1+Slot", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "hashCode", $.Int32);

    $.Field({Static:false, Public:false}, "value", $.GenericParameter("TElement"));

    $.Field({Static:false, Public:false}, "next", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.GroupedEnumerable`4 */ 

(function GroupedEnumerable$b4$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.GroupedEnumerable`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey", "TElement", "TResult"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]), 
          $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")]), $asm02.TypeRef("System.Func`3", [
              $.GenericParameter("TKey"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
              $.GenericParameter("TResult")
            ]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "keySelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "elementSelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "resultSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
          $.GenericParameter("TResult")
        ]));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.GroupedEnumerable`3 */ 

(function GroupedEnumerable$b3$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.GroupedEnumerable`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey", "TElement"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]), 
          $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "keySelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "elementSelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.OrderedEnumerable`1 */ 

(function OrderedEnumerable$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.OrderedEnumerable`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumerableSorter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.EnumerableSorter`1", [$.GenericParameter("TElement")]), [$asm07.TypeRef("System.Linq.EnumerableSorter`1", [$.GenericParameter("TElement")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), null)
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.OrderedEnumerable$b1_$lGetEnumerator$gd__1.__Type__]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IOrderedEnumerable$lTElement$g.CreateOrderedEnumerable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IOrderedEnumerable`1", [$.GenericParameter("TElement")]), [
          $asm02.TypeRef("System.Func`2", [$.GenericParameter("TElement"), "!!0"]), $asm02.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"]), 
          $.Boolean
        ], ["TKey"])
    )
      .Overrides($asm07.TypeRef("System.Linq.IOrderedEnumerable`1", [$.GenericParameter("TElement")]), "CreateOrderedEnumerable");

    $.Field({Static:false, Public:false}, "source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Linq.IOrderedEnumerable`1", [$.GenericParameter("TElement")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.OrderedEnumerable`1+<GetEnumerator>d__1 */ 

(function $lGetEnumerator$gd__1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.OrderedEnumerable`1+<GetEnumerator>d__1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TElement"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TElement"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Linq.OrderedEnumerable`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "$lbuffer$g5__1", $asm07.TypeRef("System.Linq.Buffer`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "$lmap$g5__2", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "$li$g5__3", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.Current", $.GenericParameter("TElement"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), 
      /* 1 */ $asm02.TypeRef("System.IDisposable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.OrderedEnumerable`2 */ 

(function OrderedEnumerable$b2$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.OrderedEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`2")]), 
      Name: "System.Linq.OrderedEnumerable`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement", "TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")]), 
          $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumerableSorter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.EnumerableSorter`1", [$.GenericParameter("TElement")]), [$asm07.TypeRef("System.Linq.EnumerableSorter`1", [$.GenericParameter("TElement")])])
    );

    $.Field({Static:false, Public:false}, "parent", $asm07.TypeRef("System.Linq.OrderedEnumerable`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "keySelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "comparer", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "descending", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableSorter`1 */ 

(function EnumerableSorter$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.EnumerableSorter`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompareKeys", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ComputeKeys", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "QuickSort", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Sort", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int32]), [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]), $.Int32])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableSorter`2 */ 

(function EnumerableSorter$b2$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.EnumerableSorter`1", [new JSIL.GenericParameter("TElement", "System.Linq.EnumerableSorter`2")]), 
      Name: "System.Linq.EnumerableSorter`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement", "TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")]), $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]), 
          $.Boolean, $asm07.TypeRef("System.Linq.EnumerableSorter`1", [$.GenericParameter("TElement")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompareKeys", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ComputeKeys", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]), $.Int32])
    );

    $.Field({Static:false, Public:false}, "keySelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "comparer", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "descending", $.Boolean);

    $.Field({Static:false, Public:false}, "next", $asm07.TypeRef("System.Linq.EnumerableSorter`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "keys", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Buffer`1 */ 

(function Buffer$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Linq.Buffer`1", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]), null)
    );

    $.Field({Static:false, Public:false}, "items", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.SystemCore_EnumerableDebugView`1 */ 

(function SystemCore_EnumerableDebugView$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.SystemCore_EnumerableDebugView`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.Field({Static:false, Public:false}, "enumerable", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]))
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm02.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "cachedCollection", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]))
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm02.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "count", $.Int32)
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm02.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]))
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm02.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.SystemCore_EnumerableDebugViewEmptyException */ 

(function SystemCore_EnumerableDebugViewEmptyException$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Exception"), 
      Name: "System.Linq.SystemCore_EnumerableDebugViewEmptyException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Empty", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:true }, "Empty", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.SystemCore_EnumerableDebugView */ 

(function SystemCore_EnumerableDebugView$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.SystemCore_EnumerableDebugView", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.IEnumerable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.Field({Static:false, Public:false}, "enumerable", $asm02.TypeRef("System.Collections.IEnumerable"))
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm02.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "cachedCollection", $jsilcore.TypeRef("System.Array", [$.Object]))
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm02.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "count", $.Int32)
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm02.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [$.Object]))
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm02.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableQuery */ 

(function EnumerableQuery$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.EnumerableQuery", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable"), [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.IEnumerable")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable"), [$asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Enumerable", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerable"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Expression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.Property({Static:false, Public:false, Virtual:true }, "Expression", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "Enumerable", $asm02.TypeRef("System.Collections.IEnumerable"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.EnumerableQuery`1 */ 

(function EnumerableQuery$b1$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.EnumerableQuery"), 
      Name: "System.Linq.EnumerableQuery`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Enumerable", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerable"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Expression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.get_ElementType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Overrides($asm07.TypeRef("System.Linq.IQueryable"), "get_ElementType")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.get_Expression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Overrides($asm07.TypeRef("System.Linq.IQueryable"), "get_Expression")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.get_Provider", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.IQueryProvider"))
    )
      .Overrides($asm07.TypeRef("System.Linq.IQueryable"), "get_Provider")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryProvider.CreateQuery", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable"), [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    )
      .Overrides($asm07.TypeRef("System.Linq.IQueryProvider"), "CreateQuery")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryProvider.CreateQuery", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.Expressions.Expression")], ["S"])
    )
      .Overrides($asm07.TypeRef("System.Linq.IQueryProvider"), "CreateQuery")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryProvider.Execute", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    )
      .Overrides($asm07.TypeRef("System.Linq.IQueryProvider"), "Execute")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryProvider.Execute", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.Expressions.Expression")], ["S"])
    )
      .Overrides($asm07.TypeRef("System.Linq.IQueryProvider"), "Execute")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "expression", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false}, "enumerable", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.Provider", $asm07.TypeRef("System.Linq.IQueryProvider"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "Expression", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "Enumerable", $asm02.TypeRef("System.Collections.IEnumerable"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.Expression", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.ElementType", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Linq.IOrderedQueryable`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm07.TypeRef("System.Linq.IQueryable`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 3 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 4 */ $asm07.TypeRef("System.Linq.IQueryable"), 
      /* 5 */ $asm07.TypeRef("System.Linq.IOrderedQueryable"), 
      /* 6 */ $asm07.TypeRef("System.Linq.IQueryProvider")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.EnumerableExecutor */ 

(function EnumerableExecutor$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.EnumerableExecutor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExecuteBoxed", 
      JSIL.MethodSignature.Return($.Object)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.EnumerableExecutor`1 */ 

(function EnumerableExecutor$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.EnumerableExecutor"), 
      Name: "System.Linq.EnumerableExecutor`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Execute", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExecuteBoxed", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:false}, "expression", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false}, "func", $asm02.TypeRef("System.Func`1", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.OldExpressionVisitor */ 

(function OldExpressionVisitor$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.OldExpressionVisitor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Visit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBinary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.BinaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBinding", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberBinding"), [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBindingList", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")]), [$asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConditional", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ConditionalExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConstant", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ConstantExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitElementInitializer", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ElementInit"), [$asm07.TypeRef("System.Linq.Expressions.ElementInit")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitElementInitializerList", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.ElementInit")]), [$asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ElementInit")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitExpressionList", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), [$asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitInvocation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.InvocationExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.LambdaExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitListInit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ListInitExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberAccess", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.MemberExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberAssignment", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm07.TypeRef("System.Linq.Expressions.MemberAssignment")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberInit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.MemberInitExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberListBinding", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm07.TypeRef("System.Linq.Expressions.MemberListBinding")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberMemberBinding", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm07.TypeRef("System.Linq.Expressions.MemberMemberBinding")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMethodCall", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.MethodCallExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNew", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.NewExpression"), [$asm07.TypeRef("System.Linq.Expressions.NewExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNewArray", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.NewArrayExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTypeIs", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.TypeBinaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitUnary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.UnaryExpression")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableRewriter */ 

(function EnumerableRewriter$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.OldExpressionVisitor"), 
      Name: "System.Linq.EnumerableRewriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgsMatch", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindEnumerableMethod", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.MethodInfo"), [
          $.String, $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")])
        ])
    )
      .Parameter(2, "typeArgs", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "FindMethod", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.MethodInfo"), [
          $asm02.TypeRef("System.Type"), $.String, 
          $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]), 
          $asm02.TypeRef("System.Reflection.BindingFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FixupQuotedArgs", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), [$asm02.TypeRef("System.Reflection.MethodInfo"), $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "FixupQuotedExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPublicType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "StripExpression", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConstant", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ConstantExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.LambdaExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMethodCall", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.MethodCallExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.Field({Static:true , Public:false}, "_seqMethods", $asm07.TypeRef("System.Linq.ILookup`2"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableRewriter+<>c__DisplayClass9_0 */ 

(function $l$gc__DisplayClass9_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.EnumerableRewriter+<>c__DisplayClass9_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lFindEnumerableMethod$gb__1", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Reflection.MethodInfo")])
    );

    $.Field({Static:false, Public:true }, "args", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]));

    $.Field({Static:false, Public:true }, "typeArgs", $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.EnumerableRewriter+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.EnumerableRewriter+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lFindEnumerableMethod$gb__9_0", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.Reflection.MethodInfo")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__9_0", $asm02.TypeRef("System.Func`2", [$asm02.TypeRef("System.Reflection.MethodInfo"), $.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.EnumerableRewriter+<>c__DisplayClass10_0 */ 

(function $l$gc__DisplayClass10_0$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.EnumerableRewriter+<>c__DisplayClass10_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lFindMethod$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lFindMethod$gb__1", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Reflection.MethodInfo")])
    );

    $.Field({Static:false, Public:true }, "$name", $.String);

    $.Field({Static:false, Public:true }, "args", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]));

    $.Field({Static:false, Public:true }, "typeArgs", $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.TypeHelper */ 

(function TypeHelper$Members () {
  var $, $thisType;







  JSIL.MakeStaticClass("System.Linq.TypeHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "FindGenericType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetElementType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNonNullableType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEnumerableType", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsKindOfGeneric", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullableType", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Strings */ 

(function Strings$Members () {
  var $, $thisType;














































































  JSIL.MakeStaticClass("System.Linq.Strings", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Argument_InvalidId", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Argument_InvalidSerializedString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentArrayHasTooManyElements", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotIEnumerableGeneric", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotLambda", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotSequence", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotValid", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "event_ParallelQueryBegin", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "event_ParallelQueryEnd", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "event_ParallelQueryFork", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "event_ParallelQueryJoin", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_AdjustmentRulesAmbiguousOverlap", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_AdjustmentRulesInvalidOverlap", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_AdjustmentRulesNoNulls", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_AdjustmentRulesOutOfOrder", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_AdjustmentRulesrDaylightSavingTimeOverlap", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_AdjustmentRulesrDaylightSavingTimeOverlapNonRuleRange", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_ConvertMismatch", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_DateTimeHasTicks", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_DateTimeHasTimeOfDay", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_DateTimeIsInvalid", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_DateTimeIsNotAmbiguous", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_DateTimeKindMustBeUnspecified", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_DateTimeOffsetIsNotAmbiguous", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_InvalidREG_TZI_FORMAT", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_OutOfOrderDateTimes", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_TimeSpanHasSeconds", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_TimeZoneInfoBadTZif", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_TimeZoneInfoInvalidTZif", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_TransitionTimesAreIdentical", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_DateTimeBadTicks", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_DayOfWeek", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_DayParam", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_MonthParam", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_UtcOffset", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_UtcOffsetAndDaylightDelta", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_Week", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EmptyEnumerable", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncompatibleElementTypes", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidTimeZone_InvalidWin32APIData", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MoreThanOneElement", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MoreThanOneMatch", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoElements", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoMatch", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OwningTeam", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelEnumerable_BinaryOpMustUseAsParallel", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelEnumerable_ToArray_DimensionRequired", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelEnumerable_WithCancellation_TokenSourceDisposed", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelEnumerable_WithMergeOptions_InvalidOptions", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelEnumerable_WithQueryExecutionMode_InvalidMode", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelPartitionable_IncorretElementCount", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelPartitionable_NullElement", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelPartitionable_NullReturn", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_DuplicateDOP", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_DuplicateExecutionMode", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_DuplicateMergeOptions", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_DuplicateTaskScheduler", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_DuplicateWithCancellation", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_InvalidAsOrderedCall", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_InvalidNonGenericAsOrderedCall", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_PartitionerNotOrderable", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PartitionerQueryOperator_NullPartition", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PartitionerQueryOperator_NullPartitionList", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PartitionerQueryOperator_WrongNumberOfPartitions", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PLINQ_CommonEnumerator_Current_NotStarted", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PLINQ_DisposeRequested", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PLINQ_EnumerationPreviouslyFailed", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PLINQ_ExternalCancellationRequested", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidTimeZone_InvalidRegistryData", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoArgumentMatchingMethodsInQueryable", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMethodOnType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMethodOnTypeMatchingArguments", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoNameMatchingMethodsInQueryable", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Security_CannotReadRegistryData", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Serialization_CorruptField", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Serialization_InvalidEscapeSequence", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimeZoneNotFound_MissingRegistryData", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.Property({Static:true , Public:false}, "OwningTeam", $.String);

    $.Property({Static:true , Public:false}, "IncompatibleElementTypes", $.String);

    $.Property({Static:true , Public:false}, "MoreThanOneElement", $.String);

    $.Property({Static:true , Public:false}, "MoreThanOneMatch", $.String);

    $.Property({Static:true , Public:false}, "NoElements", $.String);

    $.Property({Static:true , Public:false}, "NoMatch", $.String);

    $.Property({Static:true , Public:false}, "EmptyEnumerable", $.String);

    $.Property({Static:true , Public:false}, "Argument_AdjustmentRulesNoNulls", $.String);

    $.Property({Static:true , Public:false}, "Argument_AdjustmentRulesOutOfOrder", $.String);

    $.Property({Static:true , Public:false}, "Argument_AdjustmentRulesAmbiguousOverlap", $.String);

    $.Property({Static:true , Public:false}, "Argument_AdjustmentRulesrDaylightSavingTimeOverlap", $.String);

    $.Property({Static:true , Public:false}, "Argument_AdjustmentRulesrDaylightSavingTimeOverlapNonRuleRange", $.String);

    $.Property({Static:true , Public:false}, "Argument_AdjustmentRulesInvalidOverlap", $.String);

    $.Property({Static:true , Public:false}, "Argument_ConvertMismatch", $.String);

    $.Property({Static:true , Public:false}, "Argument_DateTimeHasTimeOfDay", $.String);

    $.Property({Static:true , Public:false}, "Argument_DateTimeIsInvalid", $.String);

    $.Property({Static:true , Public:false}, "Argument_DateTimeIsNotAmbiguous", $.String);

    $.Property({Static:true , Public:false}, "Argument_DateTimeOffsetIsNotAmbiguous", $.String);

    $.Property({Static:true , Public:false}, "Argument_DateTimeKindMustBeUnspecified", $.String);

    $.Property({Static:true , Public:false}, "Argument_DateTimeHasTicks", $.String);

    $.Property({Static:true , Public:false}, "Argument_InvalidREG_TZI_FORMAT", $.String);

    $.Property({Static:true , Public:false}, "Argument_OutOfOrderDateTimes", $.String);

    $.Property({Static:true , Public:false}, "Argument_TimeSpanHasSeconds", $.String);

    $.Property({Static:true , Public:false}, "Argument_TimeZoneInfoBadTZif", $.String);

    $.Property({Static:true , Public:false}, "Argument_TimeZoneInfoInvalidTZif", $.String);

    $.Property({Static:true , Public:false}, "Argument_TransitionTimesAreIdentical", $.String);

    $.Property({Static:true , Public:false}, "ArgumentOutOfRange_DayParam", $.String);

    $.Property({Static:true , Public:false}, "ArgumentOutOfRange_DayOfWeek", $.String);

    $.Property({Static:true , Public:false}, "ArgumentOutOfRange_MonthParam", $.String);

    $.Property({Static:true , Public:false}, "ArgumentOutOfRange_UtcOffset", $.String);

    $.Property({Static:true , Public:false}, "ArgumentOutOfRange_UtcOffsetAndDaylightDelta", $.String);

    $.Property({Static:true , Public:false}, "ArgumentOutOfRange_Week", $.String);

    $.Property({Static:true , Public:false}, "InvalidTimeZone_InvalidWin32APIData", $.String);

    $.Property({Static:true , Public:false}, "ArgumentOutOfRange_DateTimeBadTicks", $.String);

    $.Property({Static:true , Public:false}, "PLINQ_CommonEnumerator_Current_NotStarted", $.String);

    $.Property({Static:true , Public:false}, "PLINQ_ExternalCancellationRequested", $.String);

    $.Property({Static:true , Public:false}, "PLINQ_DisposeRequested", $.String);

    $.Property({Static:true , Public:false}, "PLINQ_EnumerationPreviouslyFailed", $.String);

    $.Property({Static:true , Public:false}, "ParallelPartitionable_NullReturn", $.String);

    $.Property({Static:true , Public:false}, "ParallelPartitionable_NullElement", $.String);

    $.Property({Static:true , Public:false}, "ParallelPartitionable_IncorretElementCount", $.String);

    $.Property({Static:true , Public:false}, "ParallelEnumerable_ToArray_DimensionRequired", $.String);

    $.Property({Static:true , Public:false}, "ParallelEnumerable_WithQueryExecutionMode_InvalidMode", $.String);

    $.Property({Static:true , Public:false}, "ParallelEnumerable_WithMergeOptions_InvalidOptions", $.String);

    $.Property({Static:true , Public:false}, "ParallelEnumerable_BinaryOpMustUseAsParallel", $.String);

    $.Property({Static:true , Public:false}, "ParallelEnumerable_WithCancellation_TokenSourceDisposed", $.String);

    $.Property({Static:true , Public:false}, "ParallelQuery_InvalidAsOrderedCall", $.String);

    $.Property({Static:true , Public:false}, "ParallelQuery_InvalidNonGenericAsOrderedCall", $.String);

    $.Property({Static:true , Public:false}, "ParallelQuery_PartitionerNotOrderable", $.String);

    $.Property({Static:true , Public:false}, "ParallelQuery_DuplicateTaskScheduler", $.String);

    $.Property({Static:true , Public:false}, "ParallelQuery_DuplicateDOP", $.String);

    $.Property({Static:true , Public:false}, "ParallelQuery_DuplicateWithCancellation", $.String);

    $.Property({Static:true , Public:false}, "ParallelQuery_DuplicateExecutionMode", $.String);

    $.Property({Static:true , Public:false}, "ParallelQuery_DuplicateMergeOptions", $.String);

    $.Property({Static:true , Public:false}, "PartitionerQueryOperator_NullPartitionList", $.String);

    $.Property({Static:true , Public:false}, "PartitionerQueryOperator_WrongNumberOfPartitions", $.String);

    $.Property({Static:true , Public:false}, "PartitionerQueryOperator_NullPartition", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Error */ 

(function Error$Members () {
  var $, $thisType;



















  JSIL.MakeStaticClass("System.Linq.Error", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ArgumentArrayHasTooManyElements", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotIEnumerableGeneric", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotLambda", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotSequence", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotValid", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNull", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentOutOfRange", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncompatibleElementTypes", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MoreThanOneElement", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MoreThanOneMatch", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NoArgumentMatchingMethodsInQueryable", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoElements", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMatch", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMethodOnType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMethodOnTypeMatchingArguments", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoNameMatchingMethodsInQueryable", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotImplemented", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSupported", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.ParallelEnumerable */ 

(function ParallelEnumerable$Members () {
  var $, $thisType;



















































































































































































































  JSIL.MakeStaticClass("System.Linq.ParallelEnumerable", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`3", [
            "!!0", "!!0", 
            "!!0"
          ])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Aggregate", 
      new JSIL.MethodSignature("!!0", [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`3", [
              "!!0", "!!0", 
              "!!0"
            ]), 
          $asm07.TypeRef("System.Linq.Parallel.QueryAggregationOptions")
        ], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!1", [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!1", 
          $asm02.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ])
        ], ["TSource", "TAccumulate"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Aggregate", 
      new JSIL.MethodSignature("!!1", [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!1", 
          $asm02.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ]), $asm07.TypeRef("System.Linq.Parallel.QueryAggregationOptions")
        ], ["TSource", "TAccumulate"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!2", [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!1", 
          $asm02.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ]), $asm02.TypeRef("System.Func`2", ["!!1", "!!2"])
        ], ["TSource", "TAccumulate", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!2", [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!1", 
          $asm02.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ]), $asm02.TypeRef("System.Func`3", [
              "!!1", "!!1", 
              "!!1"
            ]), 
          $asm02.TypeRef("System.Func`2", ["!!1", "!!2"])
        ], ["TSource", "TAccumulate", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!2", [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`1", ["!!1"]), 
          $asm02.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ]), $asm02.TypeRef("System.Func`3", [
              "!!1", "!!1", 
              "!!1"
            ]), 
          $asm02.TypeRef("System.Func`2", ["!!1", "!!2"])
        ], ["TSource", "TAccumulate", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "All", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsEnumerable", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsOrdered", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsOrdered", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery"), [$asm07.TypeRef("System.Linq.ParallelQuery")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsParallel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsParallel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Concurrent.Partitioner`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsParallel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery"), [$asm02.TypeRef("System.Collections.IEnumerable")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsSequential", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsUnordered", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$.Int32])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm02.TypeRef("System.Nullable`1", [$.Int32])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$.Int64])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm02.TypeRef("System.Nullable`1", [$.Int64])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Single, [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$.Single])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Single]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm02.TypeRef("System.Nullable`1", [$.Single])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$.Double])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm02.TypeRef("System.Nullable`1", [$.Double])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm02.TypeRef("System.Decimal")])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Single, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Single]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Cast", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery")], ["TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Concat", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Concat", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!0", 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DisposeEnumerator", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerator`1", ["!!0"]), $asm07.TypeRef("System.Linq.Parallel.CancellationState")], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Distinct", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Distinct", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ElementAt", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ElementAtOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Empty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), null, ["TResult"])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ForAll", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Action`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetOneWithPossibleDefault", 
      new JSIL.MethodSignature("!!0", [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", ["!!0"]), $.Boolean, 
          $.Boolean
        ], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm07.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm07.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm07.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm07.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!2"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Func`3", [
              "!!1", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
              "!!2"
            ])
        ], ["TSource", "TKey", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!2"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Func`3", [
              "!!1", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
              "!!2"
            ]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm02.TypeRef("System.Func`3", [
              "!!1", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
              "!!3"
            ])
        ], ["TSource", "TKey", "TElement", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm02.TypeRef("System.Func`3", [
              "!!1", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
              "!!3"
            ]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm02.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm02.TypeRef("System.Func`3", [
              "!!0", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm02.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm02.TypeRef("System.Func`3", [
              "!!0", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm02.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm02.TypeRef("System.Func`3", [
              "!!0", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm02.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm02.TypeRef("System.Func`3", [
              "!!0", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm02.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm02.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm02.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm02.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm02.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm02.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm02.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm02.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LongCount", 
      new JSIL.MethodSignature($.Int64, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LongCount", 
      new JSIL.MethodSignature($.Int64, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$.Int32])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int32]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm02.TypeRef("System.Nullable`1", [$.Int32])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int64, [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$.Int64])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int64]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm02.TypeRef("System.Nullable`1", [$.Int64])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Single, [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$.Single])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Single]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm02.TypeRef("System.Nullable`1", [$.Single])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$.Double])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm02.TypeRef("System.Nullable`1", [$.Double])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm02.TypeRef("System.Decimal")])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int32]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int64, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int64]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Single, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Single]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("!!1", [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$.Int32])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int32]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm02.TypeRef("System.Nullable`1", [$.Int32])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int64, [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$.Int64])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int64]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm02.TypeRef("System.Nullable`1", [$.Int64])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Single, [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$.Single])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Single]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm02.TypeRef("System.Nullable`1", [$.Single])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$.Double])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm02.TypeRef("System.Nullable`1", [$.Double])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm02.TypeRef("System.Decimal")])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int32]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int64, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int64]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Single, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Single]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("!!1", [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OfType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery")], ["TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "PerformAggregation", 
      new JSIL.MethodSignature("!!0", [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`3", [
              "!!0", "!!0", 
              "!!0"
            ]), 
          "!!0", $.Boolean, 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.QueryAggregationOptions")
        ], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "PerformSequentialAggregation", 
      new JSIL.MethodSignature("!!1", [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!1", 
          $.Boolean, $asm02.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ])
        ], ["TSource", "TAccumulate"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Range", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", [$.Int32]), [$.Int32, $.Int32])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Repeat", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), ["!!0", $.Int32], ["TResult"])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Reverse", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            "!!1"
          ])], ["TSource", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])], ["TSource", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
          ])], ["TSource", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!2"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])]), 
          $asm02.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!2"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
            ]), 
          $asm02.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Single", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Single", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Skip", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$.Int32])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int32]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm02.TypeRef("System.Nullable`1", [$.Int32])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int64, [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$.Int64])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int64]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm02.TypeRef("System.Nullable`1", [$.Int64])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Single, [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$.Single])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Single]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm02.TypeRef("System.Nullable`1", [$.Single])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$.Double])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm02.TypeRef("System.Nullable`1", [$.Double])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm02.TypeRef("System.Decimal")])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])])])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int32]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int64, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int64]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Single, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Single]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Take", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [
          $asm07.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [
          $asm07.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!0"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!2"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!2"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToList", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.List`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ILookup`2", ["!!1", "!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ILookup`2", ["!!1", "!!0"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ILookup`2", ["!!1", "!!2"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ILookup`2", ["!!1", "!!2"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "WithCancellation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Threading.CancellationToken")], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "WithDegreeOfParallelism", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "WithExecutionMode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm07.TypeRef("System.Linq.ParallelExecutionMode")], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "WithMergeOptions", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm07.TypeRef("System.Linq.ParallelMergeOptions")], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WithTaskScheduler", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Threading.Tasks.TaskScheduler")], ["TSource"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Zip", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!2"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), 
          $asm02.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TFirst", "TSecond", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Zip", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!2"]), [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm02.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TFirst", "TSecond", "TResult"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Constant({Static:true , Public:false}, "RIGHT_SOURCE_NOT_PARALLEL_STR", $.String, "The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.");


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.ParallelEnumerable+<>c__10`1 */ 

(function $l$gc__10$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.ParallelEnumerable+<>c__10`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lWithCancellation$gb__10_0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $asm07.TypeRef("System.Linq.ParallelEnumerable+<>c__10`1", [$.GenericParameter("TSource")]));

    $.Field({Static:true , Public:true }, "$l$g9__10_0", $asm02.TypeRef("System.Action"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.ParallelEnumerable+<>c__DisplayClass47_0`3 */ 

(function $l$gc__DisplayClass47_0$b3$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.ParallelEnumerable+<>c__DisplayClass47_0`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey", "TResult"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGroupBy$gb__0", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), [$asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TSource")])])
    );

    $.Field({Static:false, Public:true }, "resultSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
          $.GenericParameter("TResult")
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.ParallelEnumerable+<>c__DisplayClass48_0`3 */ 

(function $l$gc__DisplayClass48_0$b3$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.ParallelEnumerable+<>c__DisplayClass48_0`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey", "TResult"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGroupBy$gb__0", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), [$asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TSource")])])
    );

    $.Field({Static:false, Public:true }, "resultSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
          $.GenericParameter("TResult")
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.ParallelEnumerable+<>c__DisplayClass49_0`4 */ 

(function $l$gc__DisplayClass49_0$b4$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.ParallelEnumerable+<>c__DisplayClass49_0`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey", "TElement", "TResult"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGroupBy$gb__0", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), [$asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])])
    );

    $.Field({Static:false, Public:true }, "resultSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
          $.GenericParameter("TResult")
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.ParallelEnumerable+<>c__DisplayClass50_0`4 */ 

(function $l$gc__DisplayClass50_0$b4$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.ParallelEnumerable+<>c__DisplayClass50_0`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey", "TElement", "TResult"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGroupBy$gb__0", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), [$asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])])
    );

    $.Field({Static:false, Public:true }, "resultSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
          $.GenericParameter("TResult")
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.ParallelEnumerable+<>c__51`1 */ 

(function $l$gc__51$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.ParallelEnumerable+<>c__51`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lPerformAggregation$gb__51_0", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.GenericParameter("T")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $asm07.TypeRef("System.Linq.ParallelEnumerable+<>c__51`1", [$.GenericParameter("T")]));

    $.Field({Static:true , Public:true }, "$l$g9__51_0", $asm02.TypeRef("System.Func`2", [$.GenericParameter("T"), $.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.ParallelEnumerable+<>c__149`1 */ 

(function $l$gc__149$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.ParallelEnumerable+<>c__149`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lAny$gb__149_0", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TSource")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $asm07.TypeRef("System.Linq.ParallelEnumerable+<>c__149`1", [$.GenericParameter("TSource")]));

    $.Field({Static:true , Public:true }, "$l$g9__149_0", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* enum System.Linq.ParallelMergeOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.ParallelMergeOptions", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Default: 0, 
    NotBuffered: 1, 
    AutoBuffered: 2, 
    FullyBuffered: 3, 
  }
);

/* enum System.Linq.ParallelExecutionMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.ParallelExecutionMode", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Default: 0, 
    ForceParallelism: 1, 
  }
);

/* class System.Linq.AggregationMinMaxHelpers`1 */ 

(function AggregationMinMaxHelpers$b1$Members () {
  var $, $thisType;







  JSIL.MakeStaticClass("System.Linq.AggregationMinMaxHelpers`1", false, ["T"], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "MakeFinalReduceFunction", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Func`3", [
            $asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, $.GenericParameter("T")]), $asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, $.GenericParameter("T")]), 
            $asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, $.GenericParameter("T")])
          ]), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeIntermediateReduceFunction", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Func`3", [
            $asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, $.GenericParameter("T")]), $.GenericParameter("T"), 
            $asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, $.GenericParameter("T")])
          ]), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeResultSelectorFunction", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Func`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, $.GenericParameter("T")]), $.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:true , Public:false}, "Reduce", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReduceMax", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReduceMin", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.AggregationMinMaxHelpers`1+<>c__DisplayClass3_0 */ 

(function $l$gc__DisplayClass3_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.AggregationMinMaxHelpers`1+<>c__DisplayClass3_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lMakeIntermediateReduceFunction$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, $.GenericParameter("T")]), [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, $.GenericParameter("T")]), $.GenericParameter("T")])
    );

    $.Field({Static:false, Public:true }, "comparer", $asm02.TypeRef("System.Collections.Generic.Comparer`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:true }, "sign", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.AggregationMinMaxHelpers`1+<>c__DisplayClass4_0 */ 

(function $l$gc__DisplayClass4_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.AggregationMinMaxHelpers`1+<>c__DisplayClass4_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lMakeFinalReduceFunction$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, $.GenericParameter("T")]), [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, $.GenericParameter("T")]), $asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, $.GenericParameter("T")])])
    );

    $.Field({Static:false, Public:true }, "comparer", $asm02.TypeRef("System.Collections.Generic.Comparer`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:true }, "sign", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.AggregationMinMaxHelpers`1+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.AggregationMinMaxHelpers`1+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lMakeResultSelectorFunction$gb__5_0", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, $.GenericParameter("T")])])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $asm07.TypeRef("System.Linq.AggregationMinMaxHelpers`1+<>c", [$.GenericParameter("T")]));

    $.Field({Static:true , Public:true }, "$l$g9__5_0", $asm02.TypeRef("System.Func`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, $.GenericParameter("T")]), $.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.ParallelQuery */ 

(function ParallelQuery$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.ParallelQuery", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Parallel.QuerySettings"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Cast", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), null, ["TCastTo"])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SpecifiedQuerySettings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Parallel.QuerySettings"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumeratorUntyped", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OfType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), null, ["TCastTo"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "m_specifiedSettings", $asm07.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.Property({Static:false, Public:false}, "SpecifiedQuerySettings", $asm07.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.ParallelQuery`1 */ 

(function ParallelQuery$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.ParallelQuery"), 
      Name: "System.Linq.ParallelQuery`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Parallel.QuerySettings"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Cast", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), null, ["TCastTo"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumeratorUntyped", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OfType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), null, ["TCastTo"])
    );

    $.ImplementInterfaces(
      /* 1 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.ParallelQuery`1+<>c__1`1 */ 

(function $l$gc__1$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.ParallelQuery`1+<>c__1`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TCastTo"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCast$gb__1_0", 
      new JSIL.MethodSignature($.GenericParameter("TCastTo"), [$.GenericParameter("TSource")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $asm07.TypeRef("System.Linq.ParallelQuery`1+<>c__1`1", [$.GenericParameter("TSource"), $.GenericParameter("TCastTo")]));

    $.Field({Static:true , Public:true }, "$l$g9__1_0", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TCastTo")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.ParallelQuery`1+<>c__2`1 */ 

(function $l$gc__2$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.ParallelQuery`1+<>c__2`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TCastTo"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lOfType$gb__2_0", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TSource")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lOfType$gb__2_1", 
      new JSIL.MethodSignature($.GenericParameter("TCastTo"), [$.GenericParameter("TSource")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $asm07.TypeRef("System.Linq.ParallelQuery`1+<>c__2`1", [$.GenericParameter("TSource"), $.GenericParameter("TCastTo")]));

    $.Field({Static:true , Public:true }, "$l$g9__2_0", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:true , Public:true }, "$l$g9__2_1", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TCastTo")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.OrderedParallelQuery`1 */ 

(function OrderedParallelQuery$b1$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TSource", "System.Linq.OrderedParallelQuery`1")]), 
      Name: "System.Linq.OrderedParallelQuery`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TSource")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OrderedEnumerable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IOrderedEnumerable`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SortOperator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "m_sortOp", $asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false}, "SortOperator", $asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false}, "OrderedEnumerable", $asm07.TypeRef("System.Linq.IOrderedEnumerable`1", [$.GenericParameter("TSource")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.SRDescriptionAttribute */ 

(function SRDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm05.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.Linq.SRDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.All]; });

})();

/* class System.Linq.SRCategoryAttribute */ 

(function SRCategoryAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm05.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "System.Linq.SRCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.All]; });

})();

/* class System.Linq.SR */ 

(function SR$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Constant({Static:true , Public:false}, "OwningTeam", $.String, "OwningTeam");

    $.Constant({Static:true , Public:false}, "ArgumentArrayHasTooManyElements", $.String, "ArgumentArrayHasTooManyElements");

    $.Constant({Static:true , Public:false}, "ArgumentNotIEnumerableGeneric", $.String, "ArgumentNotIEnumerableGeneric");

    $.Constant({Static:true , Public:false}, "ArgumentNotSequence", $.String, "ArgumentNotSequence");

    $.Constant({Static:true , Public:false}, "ArgumentNotValid", $.String, "ArgumentNotValid");

    $.Constant({Static:true , Public:false}, "IncompatibleElementTypes", $.String, "IncompatibleElementTypes");

    $.Constant({Static:true , Public:false}, "ArgumentNotLambda", $.String, "ArgumentNotLambda");

    $.Constant({Static:true , Public:false}, "MoreThanOneElement", $.String, "MoreThanOneElement");

    $.Constant({Static:true , Public:false}, "MoreThanOneMatch", $.String, "MoreThanOneMatch");

    $.Constant({Static:true , Public:false}, "NoArgumentMatchingMethodsInQueryable", $.String, "NoArgumentMatchingMethodsInQueryable");

    $.Constant({Static:true , Public:false}, "NoElements", $.String, "NoElements");

    $.Constant({Static:true , Public:false}, "NoMatch", $.String, "NoMatch");

    $.Constant({Static:true , Public:false}, "NoMethodOnType", $.String, "NoMethodOnType");

    $.Constant({Static:true , Public:false}, "NoMethodOnTypeMatchingArguments", $.String, "NoMethodOnTypeMatchingArguments");

    $.Constant({Static:true , Public:false}, "NoNameMatchingMethodsInQueryable", $.String, "NoNameMatchingMethodsInQueryable");

    $.Constant({Static:true , Public:false}, "EmptyEnumerable", $.String, "EmptyEnumerable");

    $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesNoNulls", $.String, "Argument_AdjustmentRulesNoNulls");

    $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesOutOfOrder", $.String, "Argument_AdjustmentRulesOutOfOrder");

    $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesAmbiguousOverlap", $.String, "Argument_AdjustmentRulesAmbiguousOverlap");

    $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesrDaylightSavingTimeOverlap", $.String, "Argument_AdjustmentRulesrDaylightSavingTimeOverlap");

    $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesrDaylightSavingTimeOverlapNonRuleRange", $.String, "Argument_AdjustmentRulesrDaylightSavingTimeOverlapNonRuleRange");

    $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesInvalidOverlap", $.String, "Argument_AdjustmentRulesInvalidOverlap");

    $.Constant({Static:true , Public:false}, "Argument_ConvertMismatch", $.String, "Argument_ConvertMismatch");

    $.Constant({Static:true , Public:false}, "Argument_DateTimeHasTimeOfDay", $.String, "Argument_DateTimeHasTimeOfDay");

    $.Constant({Static:true , Public:false}, "Argument_DateTimeIsInvalid", $.String, "Argument_DateTimeIsInvalid");

    $.Constant({Static:true , Public:false}, "Argument_DateTimeIsNotAmbiguous", $.String, "Argument_DateTimeIsNotAmbiguous");

    $.Constant({Static:true , Public:false}, "Argument_DateTimeOffsetIsNotAmbiguous", $.String, "Argument_DateTimeOffsetIsNotAmbiguous");

    $.Constant({Static:true , Public:false}, "Argument_DateTimeKindMustBeUnspecified", $.String, "Argument_DateTimeKindMustBeUnspecified");

    $.Constant({Static:true , Public:false}, "Argument_DateTimeHasTicks", $.String, "Argument_DateTimeHasTicks");

    $.Constant({Static:true , Public:false}, "Argument_InvalidId", $.String, "Argument_InvalidId");

    $.Constant({Static:true , Public:false}, "Argument_InvalidSerializedString", $.String, "Argument_InvalidSerializedString");

    $.Constant({Static:true , Public:false}, "Argument_InvalidREG_TZI_FORMAT", $.String, "Argument_InvalidREG_TZI_FORMAT");

    $.Constant({Static:true , Public:false}, "Argument_OutOfOrderDateTimes", $.String, "Argument_OutOfOrderDateTimes");

    $.Constant({Static:true , Public:false}, "Argument_TimeSpanHasSeconds", $.String, "Argument_TimeSpanHasSeconds");

    $.Constant({Static:true , Public:false}, "Argument_TimeZoneInfoBadTZif", $.String, "Argument_TimeZoneInfoBadTZif");

    $.Constant({Static:true , Public:false}, "Argument_TimeZoneInfoInvalidTZif", $.String, "Argument_TimeZoneInfoInvalidTZif");

    $.Constant({Static:true , Public:false}, "Argument_TransitionTimesAreIdentical", $.String, "Argument_TransitionTimesAreIdentical");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_DayParam", $.String, "ArgumentOutOfRange_DayParam");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_DayOfWeek", $.String, "ArgumentOutOfRange_DayOfWeek");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_MonthParam", $.String, "ArgumentOutOfRange_MonthParam");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_UtcOffset", $.String, "ArgumentOutOfRange_UtcOffset");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_UtcOffsetAndDaylightDelta", $.String, "ArgumentOutOfRange_UtcOffsetAndDaylightDelta");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_Week", $.String, "ArgumentOutOfRange_Week");

    $.Constant({Static:true , Public:false}, "InvalidTimeZone_InvalidRegistryData", $.String, "InvalidTimeZone_InvalidRegistryData");

    $.Constant({Static:true , Public:false}, "InvalidTimeZone_InvalidWin32APIData", $.String, "InvalidTimeZone_InvalidWin32APIData");

    $.Constant({Static:true , Public:false}, "Security_CannotReadRegistryData", $.String, "Security_CannotReadRegistryData");

    $.Constant({Static:true , Public:false}, "Serialization_CorruptField", $.String, "Serialization_CorruptField");

    $.Constant({Static:true , Public:false}, "Serialization_InvalidEscapeSequence", $.String, "Serialization_InvalidEscapeSequence");

    $.Constant({Static:true , Public:false}, "TimeZoneNotFound_MissingRegistryData", $.String, "TimeZoneNotFound_MissingRegistryData");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_DateTimeBadTicks", $.String, "ArgumentOutOfRange_DateTimeBadTicks");

    $.Constant({Static:true , Public:false}, "PLINQ_CommonEnumerator_Current_NotStarted", $.String, "PLINQ_CommonEnumerator_Current_NotStarted");

    $.Constant({Static:true , Public:false}, "PLINQ_ExternalCancellationRequested", $.String, "PLINQ_ExternalCancellationRequested");

    $.Constant({Static:true , Public:false}, "PLINQ_DisposeRequested", $.String, "PLINQ_DisposeRequested");

    $.Constant({Static:true , Public:false}, "PLINQ_EnumerationPreviouslyFailed", $.String, "PLINQ_EnumerationPreviouslyFailed");

    $.Constant({Static:true , Public:false}, "ParallelPartitionable_NullReturn", $.String, "ParallelPartitionable_NullReturn");

    $.Constant({Static:true , Public:false}, "ParallelPartitionable_NullElement", $.String, "ParallelPartitionable_NullElement");

    $.Constant({Static:true , Public:false}, "ParallelPartitionable_IncorretElementCount", $.String, "ParallelPartitionable_IncorretElementCount");

    $.Constant({Static:true , Public:false}, "ParallelEnumerable_ToArray_DimensionRequired", $.String, "ParallelEnumerable_ToArray_DimensionRequired");

    $.Constant({Static:true , Public:false}, "ParallelEnumerable_WithQueryExecutionMode_InvalidMode", $.String, "ParallelEnumerable_WithQueryExecutionMode_InvalidMode");

    $.Constant({Static:true , Public:false}, "ParallelEnumerable_WithMergeOptions_InvalidOptions", $.String, "ParallelEnumerable_WithMergeOptions_InvalidOptions");

    $.Constant({Static:true , Public:false}, "ParallelEnumerable_BinaryOpMustUseAsParallel", $.String, "ParallelEnumerable_BinaryOpMustUseAsParallel");

    $.Constant({Static:true , Public:false}, "ParallelEnumerable_WithCancellation_TokenSourceDisposed", $.String, "ParallelEnumerable_WithCancellation_TokenSourceDisposed");

    $.Constant({Static:true , Public:false}, "ParallelQuery_InvalidAsOrderedCall", $.String, "ParallelQuery_InvalidAsOrderedCall");

    $.Constant({Static:true , Public:false}, "ParallelQuery_InvalidNonGenericAsOrderedCall", $.String, "ParallelQuery_InvalidNonGenericAsOrderedCall");

    $.Constant({Static:true , Public:false}, "ParallelQuery_PartitionerNotOrderable", $.String, "ParallelQuery_PartitionerNotOrderable");

    $.Constant({Static:true , Public:false}, "ParallelQuery_DuplicateTaskScheduler", $.String, "ParallelQuery_DuplicateTaskScheduler");

    $.Constant({Static:true , Public:false}, "ParallelQuery_DuplicateDOP", $.String, "ParallelQuery_DuplicateDOP");

    $.Constant({Static:true , Public:false}, "ParallelQuery_DuplicateWithCancellation", $.String, "ParallelQuery_DuplicateWithCancellation");

    $.Constant({Static:true , Public:false}, "ParallelQuery_DuplicateExecutionMode", $.String, "ParallelQuery_DuplicateExecutionMode");

    $.Constant({Static:true , Public:false}, "ParallelQuery_DuplicateMergeOptions", $.String, "ParallelQuery_DuplicateMergeOptions");

    $.Constant({Static:true , Public:false}, "PartitionerQueryOperator_NullPartitionList", $.String, "PartitionerQueryOperator_NullPartitionList");

    $.Constant({Static:true , Public:false}, "PartitionerQueryOperator_WrongNumberOfPartitions", $.String, "PartitionerQueryOperator_WrongNumberOfPartitions");

    $.Constant({Static:true , Public:false}, "PartitionerQueryOperator_NullPartition", $.String, "PartitionerQueryOperator_NullPartition");

    $.Constant({Static:true , Public:false}, "event_ParallelQueryBegin", $.String, "event_ParallelQueryBegin");

    $.Constant({Static:true , Public:false}, "event_ParallelQueryEnd", $.String, "event_ParallelQueryEnd");

    $.Constant({Static:true , Public:false}, "event_ParallelQueryFork", $.String, "event_ParallelQueryFork");

    $.Constant({Static:true , Public:false}, "event_ParallelQueryJoin", $.String, "event_ParallelQueryJoin");

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm02.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm02.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm02.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Linq.Parallel");
/* class System.Linq.Parallel.AsynchronousChannel`1 */ 

(function AsynchronousChannel$b1$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.AsynchronousChannel`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm02.TypeRef("System.Threading.CancellationToken"), $asm07.TypeRef("System.Linq.Parallel.IntValueEvent")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $asm02.TypeRef("System.Threading.CancellationToken"), 
          $asm07.TypeRef("System.Linq.Parallel.IntValueEvent")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DoneWithDequeueWait", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Enqueue", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnqueueChunk", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushBuffers", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushCachedChunk", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsChunkBufferEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDone", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsFull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalDequeueChunk", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDone", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TryDequeue", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryDequeue", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryDequeueChunk", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryDequeueChunk", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "WaitUntilNonFull", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_buffer", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_index", $.Int32);

    $.Field({Static:false, Public:false}, "m_producerBufferIndex", $asm02.TypeRef("System.Int32"));

    $.Field({Static:false, Public:false}, "m_consumerBufferIndex", $asm02.TypeRef("System.Int32"));

    $.Field({Static:false, Public:false}, "m_done", $asm02.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "m_producerChunk", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "m_producerChunkIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_consumerChunk", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "m_consumerChunkIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_chunkSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_producerEvent", $asm02.TypeRef("System.Threading.ManualResetEventSlim"));

    $.Field({Static:false, Public:false}, "m_consumerEvent", $asm07.TypeRef("System.Linq.Parallel.IntValueEvent"));

    $.Field({Static:false, Public:false}, "m_producerIsWaiting", $asm02.TypeRef("System.Int32"));

    $.Field({Static:false, Public:false}, "m_consumerIsWaiting", $asm02.TypeRef("System.Int32"));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));

    $.Property({Static:false, Public:false}, "IsFull", $.Boolean);

    $.Property({Static:false, Public:false}, "IsChunkBufferEmpty", $.Boolean);

    $.Property({Static:false, Public:false}, "IsDone", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SynchronousChannel`1 */ 

(function SynchronousChannel$b1$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SynchronousChannel`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dequeue", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "Enqueue", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDone", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_queue", $asm05.TypeRef("System.Collections.Generic.Queue`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:false}, "Count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.EmptyEnumerable`1 */ 

(function EmptyEnumerable$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.EmptyEnumerable`1")]), 
      Name: "System.Linq.Parallel.EmptyEnumerable`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Instance", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.EmptyEnumerable`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    );

    $.Field({Static:true , Public:false}, "s_instance", $asm07.TypeRef("System.Linq.Parallel.EmptyEnumerable`1"));

    $.Field({Static:true , Public:false}, "s_enumeratorInstance", $asm07.TypeRef("System.Linq.Parallel.EmptyEnumerator`1"));

    $.GenericProperty({Static:true , Public:false}, "Instance", $asm07.TypeRef("System.Linq.Parallel.EmptyEnumerable`1", [$.GenericParameter("T")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryOperatorEnumerator`2 */ 

(function QueryOperatorEnumerator$b2$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.QueryOperatorEnumerator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement", "TKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AsClassicEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TElement")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryOperatorEnumerator`2+QueryOperatorClassicEnumerator */ 

(function QueryOperatorClassicEnumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.QueryOperatorEnumerator`2+QueryOperatorClassicEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement", "TKey"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TElement"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Field({Static:false, Public:false}, "m_operatorEnumerator", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_current", $.GenericParameter("TElement"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("TElement"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), 
      /* 1 */ $asm02.TypeRef("System.IDisposable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.EmptyEnumerator`1 */ 

(function EmptyEnumerator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.EmptyEnumerator`1"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.EmptyEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm02.TypeRef("System.IDisposable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.EnumerableWrapperWeakToStrong */ 

(function EnumerableWrapperWeakToStrong$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.EnumerableWrapperWeakToStrong", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.IEnumerable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_wrappedEnumerable", $asm02.TypeRef("System.Collections.IEnumerable"));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Object]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.EnumerableWrapperWeakToStrong+WrapperEnumeratorWeakToStrong */ 

(function WrapperEnumeratorWeakToStrong$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.EnumerableWrapperWeakToStrong+WrapperEnumeratorWeakToStrong", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm02.TypeRef("System.Object")]), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "m_wrappedEnumerator", $asm02.TypeRef("System.Collections.IEnumerator"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 1 */ $asm02.TypeRef("System.IDisposable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Linq.Parallel.IParallelPartitionable`1 */ 

JSIL.MakeInterface(
  "System.Linq.Parallel.IParallelPartitionable`1", false, ["T"], function ($) {
    $.Method({}, "GetPartitions", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("T"), $.Int32])]), [$.Int32]));
  }, []);

/* class System.Linq.Parallel.ParallelEnumerableWrapper */ 

(function ParallelEnumerableWrapper$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm02.TypeRef("System.Object")]), 
      Name: "System.Linq.Parallel.ParallelEnumerableWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.IEnumerable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumeratorUntyped", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm02.TypeRef("System.Collections.IEnumerable"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ParallelEnumerableWrapper`1 */ 

(function ParallelEnumerableWrapper$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.ParallelEnumerableWrapper`1")]), 
      Name: "System.Linq.Parallel.ParallelEnumerableWrapper`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WrappedEnumerable", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_wrappedEnumerable", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:false}, "WrappedEnumerable", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Linq.Parallel.QueryAggregationOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Parallel.QueryAggregationOptions", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Associative: 1, 
    Commutative: 2, 
    AssociativeCommutative: 3, 
  }
);

/* class System.Linq.Parallel.RangeEnumerable */ 

(function RangeEnumerable$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.ParallelQuery`1", [$asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.RangeEnumerable", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPartitions", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.Int32])]), [$.Int32])
    );

    $.Field({Static:false, Public:false}, "m_from", $.Int32);

    $.Field({Static:false, Public:false}, "m_count", $.Int32);

    $.ImplementInterfaces(
      /* 2 */ $asm07.TypeRef("System.Linq.Parallel.IParallelPartitionable`1", [$.Int32])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.RangeEnumerable+RangeEnumerator */ 

(function RangeEnumerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Int32"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.RangeEnumerable+RangeEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_from", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_count", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_initialIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentCount", $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.RepeatEnumerable`1 */ 

(function RepeatEnumerable$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.RepeatEnumerable`1")]), 
      Name: "System.Linq.Parallel.RepeatEnumerable`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TResult"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPartitions", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TResult"), $.Int32])]), [$.Int32])
    );

    $.Field({Static:false, Public:false}, "m_element", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "m_count", $.Int32);

    $.ImplementInterfaces(
      /* 2 */ $asm07.TypeRef("System.Linq.Parallel.IParallelPartitionable`1", [$.GenericParameter("TResult")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.RepeatEnumerable`1+RepeatEnumerator */ 

(function RepeatEnumerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.RepeatEnumerable`1+RepeatEnumerator"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.RepeatEnumerable`1+RepeatEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.GenericParameter("TResult"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TResult")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_element", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_count", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_indexOffset", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentIndex", $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.MergeEnumerator`1 */ 

(function MergeEnumerator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.MergeEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TInputOutput"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Field({Static:false, Public:false}, "m_taskGroupState", $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("TInputOutput"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TInputOutput")]), 
      /* 1 */ $asm02.TypeRef("System.IDisposable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.AsynchronousChannelMergeEnumerator`1 */ 

(function AsynchronousChannelMergeEnumerator$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.MergeEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.AsynchronousChannelMergeEnumerator`1")]), 
      Name: "System.Linq.Parallel.AsynchronousChannelMergeEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [$.GenericParameter("T")])]), 
          $asm07.TypeRef("System.Linq.Parallel.IntValueEvent")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveNextSlowPath", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "m_channels", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [$.GenericParameter("T")])]));

    $.Field({Static:false, Public:false}, "m_consumerEvent", $asm07.TypeRef("System.Linq.Parallel.IntValueEvent"));

    $.Field({Static:false, Public:false}, "m_done", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false}, "m_channelIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentElement", $.GenericParameter("T"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("T"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ArrayMergeHelper`1 */ 

(function ArrayMergeHelper$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ArrayMergeHelper`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInputOutput")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TInputOutput")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetResultsAsArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "ToArrayElement", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "m_queryResults", $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_outputArray", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_settings", $asm07.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Linq.Parallel.IMergeHelper`1", [$.GenericParameter("TInputOutput")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DefaultMergeHelper`2 */ 

(function DefaultMergeHelper$b2$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.DefaultMergeHelper`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TIgnoreKey"], 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")]), $.Boolean, 
          $asm07.TypeRef("System.Linq.ParallelMergeOptions"), $asm02.TypeRef("System.Threading.Tasks.TaskScheduler"), 
          $asm07.TypeRef("System.Linq.Parallel.CancellationState"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetResultsAsArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Parallel.IMergeHelper$lTInputOutput$g.Execute", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Linq.Parallel.IMergeHelper`1", [$.GenericParameter("TInputOutput")]), "Execute");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Parallel.IMergeHelper$lTInputOutput$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TInputOutput")]), null)
    )
      .Overrides($asm07.TypeRef("System.Linq.Parallel.IMergeHelper`1", [$.GenericParameter("TInputOutput")]), "GetEnumerator");

    $.Field({Static:false, Public:false}, "m_taskGroupState", $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState"));

    $.Field({Static:false, Public:false}, "m_partitions", $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")]));

    $.Field({Static:false, Public:false}, "m_asyncChannels", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [$.GenericParameter("TInputOutput")])]));

    $.Field({Static:false, Public:false}, "m_syncChannels", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [$.GenericParameter("TInputOutput")])]));

    $.Field({Static:false, Public:false}, "m_channelEnumerator", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_taskScheduler", $asm02.TypeRef("System.Threading.Tasks.TaskScheduler"));

    $.Field({Static:false, Public:false}, "m_ignoreOutput", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Linq.Parallel.IMergeHelper`1", [$.GenericParameter("TInputOutput")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Linq.Parallel.IMergeHelper`1 */ 

JSIL.MakeInterface(
  "System.Linq.Parallel.IMergeHelper`1", false, ["TInputOutput"], function ($) {
    $.Method({}, "Execute", JSIL.MethodSignature.Void);
    $.Method({}, "GetEnumerator", new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TInputOutput")]), null));
    $.Method({}, "GetResultsAsArray", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")]), null));
  }, []);

/* class System.Linq.Parallel.MergeExecutor`1 */ 

(function MergeExecutor$b1$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.MergeExecutor`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Execute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.MergeExecutor`1", [$.GenericParameter("TInputOutput")]), [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!0"]), $.Boolean, 
          $asm07.TypeRef("System.Linq.ParallelMergeOptions"), $asm02.TypeRef("System.Threading.Tasks.TaskScheduler"), 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.CancellationState"), 
          $.Int32
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "Execute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TInputOutput")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetResultsAsArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")]), null)
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeAsynchronousChannels", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [$.GenericParameter("TInputOutput")])]), [
          $.Int32, $asm07.TypeRef("System.Linq.ParallelMergeOptions"), 
          $asm07.TypeRef("System.Linq.Parallel.IntValueEvent"), $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeSynchronousChannels", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [$.GenericParameter("TInputOutput")])]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "m_mergeHelper", $asm07.TypeRef("System.Linq.Parallel.IMergeHelper`1", [$.GenericParameter("TInputOutput")]));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderPreservingMergeHelper`2 */ 

(function OrderPreservingMergeHelper$b2$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderPreservingMergeHelper`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")]), $asm02.TypeRef("System.Threading.Tasks.TaskScheduler"), 
          $asm07.TypeRef("System.Linq.Parallel.CancellationState"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetResultsAsArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Parallel.IMergeHelper$lTInputOutput$g.Execute", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Linq.Parallel.IMergeHelper`1", [$.GenericParameter("TInputOutput")]), "Execute");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Parallel.IMergeHelper$lTInputOutput$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TInputOutput")]), null)
    )
      .Overrides($asm07.TypeRef("System.Linq.Parallel.IMergeHelper`1", [$.GenericParameter("TInputOutput")]), "GetEnumerator");

    $.Field({Static:false, Public:false}, "m_taskGroupState", $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState"));

    $.Field({Static:false, Public:false}, "m_partitions", $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_results", $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")])]));

    $.Field({Static:false, Public:false}, "m_taskScheduler", $asm02.TypeRef("System.Threading.Tasks.TaskScheduler"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Linq.Parallel.IMergeHelper`1", [$.GenericParameter("TInputOutput")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`2 */ 

(function OrderPreservingPipeliningMergeHelper$b2$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOutput", "TKey"], 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TOutput"), $.GenericParameter("TKey")]), $asm02.TypeRef("System.Threading.Tasks.TaskScheduler"), 
          $asm07.TypeRef("System.Linq.Parallel.CancellationState"), $.Boolean, 
          $.Int32, $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetResultsAsArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TOutput")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Parallel.IMergeHelper$lTOutput$g.Execute", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Linq.Parallel.IMergeHelper`1", [$.GenericParameter("TOutput")]), "Execute");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Parallel.IMergeHelper$lTOutput$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")]), null)
    )
      .Overrides($asm07.TypeRef("System.Linq.Parallel.IMergeHelper`1", [$.GenericParameter("TOutput")]), "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_taskGroupState", $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitions", $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TOutput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_taskScheduler", $asm02.TypeRef("System.Threading.Tasks.TaskScheduler"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_autoBuffered", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_buffers", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Collections.Generic.Queue`1", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TKey"), $.GenericParameter("TOutput")])])]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_producerDone", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_producerWaiting", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_consumerWaiting", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_bufferLocks", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "m_producerComparer", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$asm07.TypeRef("System.Linq.Parallel.Producer`1", [$.GenericParameter("TKey")])]));

    $.Constant({Static:true , Public:false}, "INITIAL_BUFFER_SIZE", $.Int32, 128);

    $.Constant({Static:true , Public:false}, "STEAL_BUFFER_SIZE", $.Int32, 1024);

    $.Constant({Static:true , Public:false}, "MAX_BUFFER_SIZE", $.Int32, 8192);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Linq.Parallel.IMergeHelper`1", [$.GenericParameter("TOutput")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`2+ProducerComparer */ 

(function ProducerComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`2+ProducerComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOutput", "TKey"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Linq.Parallel.Producer`1", [$.GenericParameter("TKey")]), $asm07.TypeRef("System.Linq.Parallel.Producer`1", [$.GenericParameter("TKey")])])
    );

    $.Field({Static:false, Public:false}, "_keyComparer", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$asm07.TypeRef("System.Linq.Parallel.Producer`1", [$.GenericParameter("TKey")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`2+OrderedPipeliningMergeEnumerator */ 

(function OrderedPipeliningMergeEnumerator$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.MergeEnumerator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`2+OrderedPipeliningMergeEnumerator")]), 
      Name: "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`2+OrderedPipeliningMergeEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOutput", "TKey"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`2", [$.GenericParameter("TOutput"), $.GenericParameter("TKey")]), $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$asm07.TypeRef("System.Linq.Parallel.Producer`1", [$.GenericParameter("TKey")])])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TOutput"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfInTearDown", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetPrivateElement", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TKey"), $.GenericParameter("TOutput")])])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryWaitForElement", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TKey"), $.GenericParameter("TOutput")])])])
    );

    $.Field({Static:false, Public:false}, "m_mergeHelper", $asm07.TypeRef("System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`2", [$.GenericParameter("TOutput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_producerHeap", $asm07.TypeRef("System.Linq.Parallel.FixedMaxHeap`1", [$asm07.TypeRef("System.Linq.Parallel.Producer`1", [$.GenericParameter("TKey")])]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_producerNextElement", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_privateBuffer", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Collections.Generic.Queue`1", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TKey"), $.GenericParameter("TOutput")])])]));

    $.Field({Static:false, Public:false}, "m_initialized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("TOutput"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Parallel.Producer`1 */ 

(function Producer$b1$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Linq.Parallel.Producer`1", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.Int32])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "MaxKey", $.GenericParameter("TKey"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "ProducerIndex", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ProducerComparerInt */ 

(function ProducerComparerInt$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ProducerComparerInt", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Linq.Parallel.Producer`1", [$.Int32]), $asm07.TypeRef("System.Linq.Parallel.Producer`1", [$.Int32])])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$asm07.TypeRef("System.Linq.Parallel.Producer`1", [$.Int32])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SynchronousChannelMergeEnumerator`1 */ 

(function SynchronousChannelMergeEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.MergeEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.SynchronousChannelMergeEnumerator`1")]), 
      Name: "System.Linq.Parallel.SynchronousChannelMergeEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [$.GenericParameter("T")])])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "m_channels", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [$.GenericParameter("T")])]));

    $.Field({Static:false, Public:false}, "m_channelIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentElement", $.GenericParameter("T"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("T"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.HashRepartitionEnumerator`3 */ 

(function HashRepartitionEnumerator$b3$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.HashRepartitionEnumerator`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.HashRepartitionEnumerator`3")]), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.HashRepartitionEnumerator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "THashKey", "TIgnoreKey"], 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")]), 
          $asm07.TypeRef("System.Linq.Parallel.HashRepartitionStream`3", [
              $.GenericParameter("TInputOutput"), $.GenericParameter("THashKey"), 
              $.Int32
            ]), $asm02.TypeRef("System.Threading.CountdownEvent"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.ListChunk`1", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])]), JSIL.ArrayDimensionParameter(2)]), $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "EnumerateAndRedistributeElements", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Constant({Static:true , Public:false}, "ENUMERATION_NOT_STARTED", $.Int32, -1);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keySelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_repartitionStream", $asm07.TypeRef("System.Linq.Parallel.HashRepartitionStream`3", [
          $.GenericParameter("TInputOutput"), $.GenericParameter("THashKey"), 
          $.Int32
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_valueExchangeMatrix", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.ListChunk`1", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])]), JSIL.ArrayDimensionParameter(2)]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")]));

    $.Field({Static:false, Public:false}, "m_barrier", $asm02.TypeRef("System.Threading.CountdownEvent"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_mutables", $asm07.TypeRef("System.Linq.Parallel.HashRepartitionEnumerator`3+Mutables", [
          $.GenericParameter("TInputOutput"), $.GenericParameter("THashKey"), 
          $.GenericParameter("TIgnoreKey")
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.HashRepartitionEnumerator`3+Mutables */ 

(function Mutables$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.HashRepartitionEnumerator`3+Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "THashKey", "TIgnoreKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_currentBufferIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentBuffer", $asm07.TypeRef("System.Linq.Parallel.ListChunk`1", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])]));

    $.Field({Static:false, Public:false}, "m_currentIndex", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedStream`2 */ 

(function PartitionedStream$b2$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.PartitionedStream`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement", "TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]), 
          $asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KeyComparer", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OrdinalIndexState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PartitionCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")])])
    );

    $.Field({Static:false, Public:false}, "m_partitions", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")])]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_indexState", $asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.Property({Static:false, Public:false}, "Item", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")]));

    $.Property({Static:false, Public:true }, "PartitionCount", $.Int32);

    $.Property({Static:false, Public:false}, "KeyComparer", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]));

    $.Property({Static:false, Public:false}, "OrdinalIndexState", $asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Linq.Parallel.HashRepartitionStream`3 */ 

(function HashRepartitionStream$b3$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.HashRepartitionStream`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.HashRepartitionStream`3")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.HashRepartitionStream`3")]), 
      Name: "System.Linq.Parallel.HashRepartitionStream`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "THashKey", "TOrderKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TOrderKey")]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("THashKey")]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("TInputOutput")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("THashKey")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("THashKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementComparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_distributionMod", $.Int32);

    $.Constant({Static:true , Public:false}, "NULL_ELEMENT_HASH_CODE", $.Int32, 0);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Linq.Parallel.IPartitionedStreamRecipient`1 */ 

JSIL.MakeInterface(
  "System.Linq.Parallel.IPartitionedStreamRecipient`1", false, ["TElement"], function ($) {
    $.Method({}, "Receive", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TElement"), "!!0"])], ["TKey"]));
  }, []);

/* class System.Linq.Parallel.OrderedHashRepartitionEnumerator`3 */ 

(function OrderedHashRepartitionEnumerator$b3$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3")]), 
      Name: "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "THashKey", "TOrderKey"], 
      MaximumConstructorArguments: 9, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TOrderKey")]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")]), 
          $asm07.TypeRef("System.Linq.Parallel.OrderedHashRepartitionStream`3", [
              $.GenericParameter("TInputOutput"), $.GenericParameter("THashKey"), 
              $.GenericParameter("TOrderKey")
            ]), $asm02.TypeRef("System.Threading.CountdownEvent"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.ListChunk`1", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])]), JSIL.ArrayDimensionParameter(2)]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TOrderKey")]), JSIL.ArrayDimensionParameter(2)]), 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "EnumerateAndRedistributeElements", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TOrderKey")])])
    );

    $.Constant({Static:true , Public:false}, "ENUMERATION_NOT_STARTED", $.Int32, -1);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keySelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_repartitionStream", $asm07.TypeRef("System.Linq.Parallel.HashRepartitionStream`3", [
          $.GenericParameter("TInputOutput"), $.GenericParameter("THashKey"), 
          $.GenericParameter("TOrderKey")
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_valueExchangeMatrix", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.ListChunk`1", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])]), JSIL.ArrayDimensionParameter(2)]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyExchangeMatrix", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TOrderKey")]), JSIL.ArrayDimensionParameter(2)]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TOrderKey")]));

    $.Field({Static:false, Public:false}, "m_barrier", $asm02.TypeRef("System.Threading.CountdownEvent"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_mutables", $asm07.TypeRef("System.Linq.Parallel.OrderedHashRepartitionEnumerator`3+Mutables", [
          $.GenericParameter("TInputOutput"), $.GenericParameter("THashKey"), 
          $.GenericParameter("TOrderKey")
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedHashRepartitionEnumerator`3+Mutables */ 

(function Mutables$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3+Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "THashKey", "TOrderKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_currentBufferIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentBuffer", $asm07.TypeRef("System.Linq.Parallel.ListChunk`1", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])]));

    $.Field({Static:false, Public:false}, "m_currentKeyBuffer", $asm07.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TOrderKey")]));

    $.Field({Static:false, Public:false}, "m_currentIndex", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedHashRepartitionStream`3 */ 

(function OrderedHashRepartitionStream$b3$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.HashRepartitionStream`3", [
          new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderedHashRepartitionStream`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.OrderedHashRepartitionStream`3"), 
          new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedHashRepartitionStream`3")
        ]), 
      Name: "System.Linq.Parallel.OrderedHashRepartitionStream`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "THashKey", "TOrderKey"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TOrderKey")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("THashKey")]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]), 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1 */ 

(function PartitionedDataSource$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializePartitions", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakePartitions", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("T"), $.Int32])]), [$asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), $.Int32])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1+ArrayIndexRangeEnumerator */ 

(function ArrayIndexRangeEnumerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1+ArrayIndexRangeEnumerator"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1+ArrayIndexRangeEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveNextSlowPath", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_data", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_maxChunkSize", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sectionCount", $.Int32);

    $.Field({Static:false, Public:false}, "m_mutables", $asm07.TypeRef("System.Linq.Parallel.PartitionedDataSource`1+ArrayIndexRangeEnumerator+Mutables", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1+ArrayIndexRangeEnumerator+Mutables */ 

(function Mutables$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1+ArrayIndexRangeEnumerator+Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_currentSection", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentChunkSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentPositionInChunk", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentChunkOffset", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1+ArrayContiguousIndexRangeEnumerator */ 

(function ArrayContiguousIndexRangeEnumerator$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1+ArrayContiguousIndexRangeEnumerator"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1+ArrayContiguousIndexRangeEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_data", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_startIndex", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_maximumIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentIndex", $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1+ListIndexRangeEnumerator */ 

(function ListIndexRangeEnumerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1+ListIndexRangeEnumerator"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1+ListIndexRangeEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveNextSlowPath", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_data", $asm02.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_maxChunkSize", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sectionCount", $.Int32);

    $.Field({Static:false, Public:false}, "m_mutables", $asm07.TypeRef("System.Linq.Parallel.PartitionedDataSource`1+ListIndexRangeEnumerator+Mutables", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1+ListIndexRangeEnumerator+Mutables */ 

(function Mutables$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1+ListIndexRangeEnumerator+Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_currentSection", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentChunkSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentPositionInChunk", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentChunkOffset", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1+ListContiguousIndexRangeEnumerator */ 

(function ListContiguousIndexRangeEnumerator$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1+ListContiguousIndexRangeEnumerator"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1+ListContiguousIndexRangeEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_data", $asm02.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_startIndex", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_maximumIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentIndex", $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1+ContiguousChunkLazyEnumerator */ 

(function ContiguousChunkLazyEnumerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1+ContiguousChunkLazyEnumerator"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1+ContiguousChunkLazyEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]), 
          $.Object, $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]), 
          $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Constant({Static:true , Public:false}, "chunksPerChunkSize", $.Int32, 7);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sourceSyncLock", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_currentIndex", $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_activeEnumeratorsCount", $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_exceptionTracker", $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]));

    $.Field({Static:false, Public:false}, "m_mutables", $asm07.TypeRef("System.Linq.Parallel.PartitionedDataSource`1+ContiguousChunkLazyEnumerator+Mutables", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1+ContiguousChunkLazyEnumerator+Mutables */ 

(function Mutables$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1+ContiguousChunkLazyEnumerator+Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_chunkBuffer", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "m_nextChunkMaxSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentChunkSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentChunkIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_chunkBaseIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_chunkCounter", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.UnorderedHashRepartitionStream`3 */ 

(function UnorderedHashRepartitionStream$b3$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.HashRepartitionStream`3", [
          new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnorderedHashRepartitionStream`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.UnorderedHashRepartitionStream`3"), 
          $asm02.TypeRef("System.Int32")
        ]), 
      Name: "System.Linq.Parallel.UnorderedHashRepartitionStream`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "THashKey", "TIgnoreKey"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("THashKey")]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]), 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryOperator`1 */ 

(function QueryOperator$b1$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOperator`1")]), 
      Name: "System.Linq.Parallel.QueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Parallel.QuerySettings"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm07.TypeRef("System.Linq.Parallel.QuerySettings")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AsQueryOperator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TOutput")]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOutput")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOutput")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExecuteAndCollectResults", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.ListQueryResults`1", [$.GenericParameter("TOutput")]), [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TOutput"), "!!0"]), $.Int32, 
          $.Boolean, $.Boolean, 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteAndGetResultsAsArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TOutput")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OrdinalIndexState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OutputOrdered", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")]), [$asm02.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.Linq.ParallelMergeOptions")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")]), [$asm02.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.Linq.ParallelMergeOptions")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOpenedEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")]), [
          $asm02.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.Linq.ParallelMergeOptions")]), $.Boolean, 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetQueryResults", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TOutput")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TOutput")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.Field({Static:false, Public:false}, "m_outputOrdered", $.Boolean);

    $.Property({Static:false, Public:false}, "OutputOrdered", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.UnaryQueryOperator`2 */ 

(function UnaryQueryOperator$b2$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.UnaryQueryOperator`2")]), 
      Name: "System.Linq.Parallel.UnaryQueryOperator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInput")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInput")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TInput")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TInput")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TInput")]), $.Boolean, 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Child", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TInput")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OrdinalIndexState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetOrdinalIndexState", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInput"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_child", $asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TInput")]));

    $.Field({Static:false, Public:false}, "m_indexState", $asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.Property({Static:false, Public:false}, "Child", $asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TInput")]));

    $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryResults`1 */ 

(function QueryResults$b1$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.QueryResults`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementsCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElement", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GivePartitionedStream", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Clear", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Parallel.QueryResults$b1_$lSystem$daCollections$daGeneric$daIEnumerable$lT$g$daGetEnumerator$gd__21.__Type__]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lT$g.IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), "IndexOf");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lT$g.Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), "Insert");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lT$g.RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), "RemoveAt");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.GenericParameter("T"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 3 */ $asm02.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Linq.Parallel.QueryResults`1+<System-Collections-Generic-IEnumerable<T>-GetEnumerator>d__21 */ 

(function $lSystem$daCollections$daGeneric$daIEnumerable$lT$g$daGetEnumerator$gd__21$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.QueryResults`1+<System-Collections-Generic-IEnumerable<T>-GetEnumerator>d__21", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("T"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "$lindex$g5__1", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm02.TypeRef("System.IDisposable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.UnaryQueryOperator`2+UnaryQueryOperatorResults */ 

(function UnaryQueryOperatorResults$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.UnaryQueryOperator`2+UnaryQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.UnaryQueryOperator`2+UnaryQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInput")]), $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")]), 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GivePartitionedStream", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")])])
    );

    $.Field({Static:false, Public:false}, "m_childQueryResults", $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInput")]));

    $.Field({Static:false, Public:false}, "m_op", $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false}, "m_settings", $asm07.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.Field({Static:false, Public:false}, "m_preferStriping", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.UnaryQueryOperator`2+UnaryQueryOperatorResults+ChildResultsRecipient */ 

(function ChildResultsRecipient$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.UnaryQueryOperator`2+UnaryQueryOperatorResults+ChildResultsRecipient", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")]), 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Receive", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInput"), "!!0"])], ["TKey"])
    );

    $.Field({Static:false, Public:false}, "m_outputRecipient", $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false}, "m_op", $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false}, "m_preferStriping", $.Boolean);

    $.Field({Static:false, Public:false}, "m_settings", $asm07.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInput")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.AssociativeAggregationOperator`3 */ 

(function AssociativeAggregationOperator$b3$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AssociativeAggregationOperator`3"), new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3")]), 
      Name: "System.Linq.Parallel.AssociativeAggregationOperator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TIntermediate", "TOutput"], 
      MaximumConstructorArguments: 9, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInput")]), $.GenericParameter("TIntermediate"), 
          $asm02.TypeRef("System.Func`1", [$.GenericParameter("TIntermediate")]), $.Boolean, 
          $asm02.TypeRef("System.Func`3", [
              $.GenericParameter("TIntermediate"), $.GenericParameter("TInput"), 
              $.GenericParameter("TIntermediate")
            ]), $asm02.TypeRef("System.Func`3", [
              $.GenericParameter("TIntermediate"), $.GenericParameter("TIntermediate"), 
              $.GenericParameter("TIntermediate")
            ]), 
          $asm02.TypeRef("System.Func`2", [$.GenericParameter("TIntermediate"), $.GenericParameter("TOutput")]), $.Boolean, 
          $asm07.TypeRef("System.Linq.Parallel.QueryAggregationOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Aggregate", 
      new JSIL.MethodSignature($.GenericParameter("TOutput"), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TIntermediate")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TIntermediate")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInput"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TIntermediate")]), 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_seed", $.GenericParameter("TIntermediate"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_seedIsSpecified", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_throwIfEmpty", $.Boolean);

    $.Field({Static:false, Public:false}, "m_intermediateReduce", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TIntermediate"), $.GenericParameter("TInput"), 
          $.GenericParameter("TIntermediate")
        ]));

    $.Field({Static:false, Public:false}, "m_finalReduce", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TIntermediate"), $.GenericParameter("TIntermediate"), 
          $.GenericParameter("TIntermediate")
        ]));

    $.Field({Static:false, Public:false}, "m_resultSelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TIntermediate"), $.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false}, "m_seedFactory", $asm02.TypeRef("System.Func`1", [$.GenericParameter("TIntermediate")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.AssociativeAggregationOperator`3+AssociativeAggregationOperatorEnumerator`1 */ 

(function AssociativeAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3+AssociativeAggregationOperatorEnumerator`1"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.AssociativeAggregationOperator`3+AssociativeAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TIntermediate", "TOutput", "TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")]), $asm07.TypeRef("System.Linq.Parallel.AssociativeAggregationOperator`3", [
              $.GenericParameter("TInput"), $.GenericParameter("TIntermediate"), 
              $.GenericParameter("TOutput")
            ]), 
          $.Int32, $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TIntermediate")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_reduceOperator", $asm07.TypeRef("System.Linq.Parallel.AssociativeAggregationOperator`3", [
          $.GenericParameter("TInput"), $.GenericParameter("TIntermediate"), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_accumulated", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionerQueryOperator`1 */ 

(function PartitionerQueryOperator$b1$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1")]), 
      Name: "System.Linq.Parallel.PartitionerQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Concurrent.Partitioner`1", [$.GenericParameter("TElement")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Parallel.PartitionerQueryOperator$b1_$lAsSequentialQuery$gd__5.__Type__]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Orderable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OrdinalIndexState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetOrdinalIndexState", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [$asm02.TypeRef("System.Collections.Concurrent.Partitioner`1", [$.GenericParameter("TElement")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TElement")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.Field({Static:false, Public:false}, "m_partitioner", $asm02.TypeRef("System.Collections.Concurrent.Partitioner`1", [$.GenericParameter("TElement")]));

    $.Property({Static:false, Public:false}, "Orderable", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionerQueryOperator`1+PartitionerQueryOperatorResults */ 

(function PartitionerQueryOperatorResults$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1+PartitionerQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.PartitionerQueryOperator`1+PartitionerQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Concurrent.Partitioner`1", [$.GenericParameter("TElement")]), $asm07.TypeRef("System.Linq.Parallel.QuerySettings")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GivePartitionedStream", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TElement")])])
    );

    $.Field({Static:false, Public:false}, "m_partitioner", $asm02.TypeRef("System.Collections.Concurrent.Partitioner`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "m_settings", $asm07.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionerQueryOperator`1+OrderablePartitionerEnumerator */ 

(function OrderablePartitionerEnumerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1+OrderablePartitionerEnumerator"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.PartitionerQueryOperator`1+OrderablePartitionerEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Int64, $.GenericParameter("TElement")])])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TElement")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false}, "m_sourceEnumerator", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Int64, $.GenericParameter("TElement")])]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionerQueryOperator`1+PartitionerEnumerator */ 

(function PartitionerEnumerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1+PartitionerEnumerator"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.PartitionerQueryOperator`1+PartitionerEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TElement")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false}, "m_sourceEnumerator", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionerQueryOperator`1+<AsSequentialQuery>d__5 */ 

(function $lAsSequentialQuery$gd__5$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.PartitionerQueryOperator`1+<AsSequentialQuery>d__5", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTElement$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TElement"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TElement"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Linq.Parallel.PartitionerQueryOperator`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "$lenumerator$g5__1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.Current", $.GenericParameter("TElement"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.ScanQueryOperator`1 */ 

(function ScanQueryOperator$b1$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ScanQueryOperator`1")]), 
      Name: "System.Linq.Parallel.ScanQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Data", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OrdinalIndexState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), [$asm02.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.Linq.ParallelMergeOptions")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TElement")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_data", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]));

    $.Property({Static:false, Public:true }, "Data", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]));

    $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ScanQueryOperator`1+ScanEnumerableQueryOperatorResults */ 

(function ScanEnumerableQueryOperatorResults$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ScanQueryOperator`1+ScanEnumerableQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.ScanQueryOperator`1+ScanEnumerableQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), $asm07.TypeRef("System.Linq.Parallel.QuerySettings")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GivePartitionedStream", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TElement")])])
    );

    $.Field({Static:false, Public:false}, "m_data", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "m_settings", $asm07.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.BinaryQueryOperator`3 */ 

(function BinaryQueryOperator$b3$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.BinaryQueryOperator`3")]), 
      Name: "System.Linq.Parallel.BinaryQueryOperator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TLeftInput")]), $asm07.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TRightInput")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TLeftInput")]), $asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TRightInput")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LeftChild", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TLeftInput")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OrdinalIndexState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RightChild", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TRightInput")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetOrdinalIndex", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TLeftInput"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TRightInput"), "!!1"]), 
          $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), $.Boolean, 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey", "TRightKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftChild", $asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TLeftInput")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightChild", $asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TRightInput")]));

    $.Field({Static:false, Public:false}, "m_indexState", $asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.Property({Static:false, Public:false}, "LeftChild", $asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TLeftInput")]));

    $.Property({Static:false, Public:false}, "RightChild", $asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TRightInput")]));

    $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.BinaryQueryOperator`3+BinaryQueryOperatorResults */ 

(function BinaryQueryOperatorResults$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.BinaryQueryOperator`3+BinaryQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.BinaryQueryOperator`3+BinaryQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TLeftInput")]), $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TRightInput")]), 
          $asm07.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
              $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
              $.GenericParameter("TOutput")
            ]), $asm07.TypeRef("System.Linq.Parallel.QuerySettings"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GivePartitionedStream", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")])])
    );

    $.Field({Static:false, Public:false}, "m_leftChildQueryResults", $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TLeftInput")]));

    $.Field({Static:false, Public:false}, "m_rightChildQueryResults", $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TRightInput")]));

    $.Field({Static:false, Public:false}, "m_op", $asm07.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false}, "m_settings", $asm07.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.Field({Static:false, Public:false}, "m_preferStriping", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.BinaryQueryOperator`3+BinaryQueryOperatorResults+LeftChildResultsRecipient */ 

(function LeftChildResultsRecipient$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.BinaryQueryOperator`3+BinaryQueryOperatorResults+LeftChildResultsRecipient", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), $asm07.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3+BinaryQueryOperatorResults", [
              $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
              $.GenericParameter("TOutput")
            ]), 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Receive", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TLeftInput"), "!!0"])], ["TLeftKey"])
    );

    $.Field({Static:false, Public:false}, "m_outputRecipient", $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false}, "m_results", $asm07.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3+BinaryQueryOperatorResults", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false}, "m_preferStriping", $.Boolean);

    $.Field({Static:false, Public:false}, "m_settings", $asm07.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TLeftInput")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.BinaryQueryOperator`3+BinaryQueryOperatorResults+RightChildResultsRecipient`1 */ 

(function RightChildResultsRecipient$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.BinaryQueryOperator`3+BinaryQueryOperatorResults+RightChildResultsRecipient`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput", "TLeftKey"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), $asm07.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
              $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
              $.GenericParameter("TOutput")
            ]), 
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TLeftKey")]), $.Boolean, 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Receive", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TRightInput"), "!!0"])], ["TRightKey"])
    );

    $.Field({Static:false, Public:false}, "m_outputRecipient", $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false}, "m_leftPartitionedStream", $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TLeftKey")]));

    $.Field({Static:false, Public:false}, "m_op", $asm07.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false}, "m_preferStriping", $.Boolean);

    $.Field({Static:false, Public:false}, "m_settings", $asm07.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TRightInput")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ExceptQueryOperator`1 */ 

(function ExceptQueryOperator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
          new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1"), 
          new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1")
        ]), 
      Name: "System.Linq.Parallel.ExceptQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TInputOutput")]), $asm07.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TInputOutput")]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInputOutput")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!1"]), 
          $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]), $.Boolean, 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey", "TRightKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelper", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!1"]), 
          $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]), $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TLeftKey", "TRightKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ExceptQueryOperator`1+ExceptQueryOperatorEnumerator`1 */ 

(function ExceptQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1+ExceptQueryOperatorEnumerator`1"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.ExceptQueryOperator`1+ExceptQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TLeftKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")]), $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]), $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TInputOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false}, "m_leftSource", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")]));

    $.Field({Static:false, Public:false}, "m_rightSource", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32]));

    $.Field({Static:false, Public:false}, "m_comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_hashLookup", $asm07.TypeRef("System.Linq.Set`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_outputLoopCount", $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ExceptQueryOperator`1+OrderedExceptQueryOperatorEnumerator`1 */ 

(function OrderedExceptQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1+OrderedExceptQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ExceptQueryOperator`1+OrderedExceptQueryOperatorEnumerator`1")]), 
      Name: "System.Linq.Parallel.ExceptQueryOperator`1+OrderedExceptQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TLeftKey"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")]), $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]), $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TLeftKey")]), 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TInputOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TLeftKey")])])
    );

    $.Field({Static:false, Public:false}, "m_leftSource", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")]));

    $.Field({Static:false, Public:false}, "m_rightSource", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32]));

    $.Field({Static:false, Public:false}, "m_comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_leftKeyComparer", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TLeftKey")]));

    $.Field({Static:false, Public:false}, "m_outputEnumerator", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm07.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TInputOutput")]), $asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TLeftKey")])])]));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.GroupJoinQueryOperator`4 */ 

(function GroupJoinQueryOperator$b4$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
          new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.GroupJoinQueryOperator`4"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.GroupJoinQueryOperator`4"), 
          new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.GroupJoinQueryOperator`4")
        ]), 
      Name: "System.Linq.Parallel.GroupJoinQueryOperator`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TKey", "TOutput"], 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TLeftInput")]), $asm07.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TRightInput")]), 
          $asm02.TypeRef("System.Func`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TKey")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TRightInput"), $.GenericParameter("TKey")]), 
          $asm02.TypeRef("System.Func`3", [
              $.GenericParameter("TLeftInput"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TRightInput")]), 
              $.GenericParameter("TOutput")
            ]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOutput")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TOutput")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TLeftInput"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TRightInput"), "!!1"]), 
          $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), $.Boolean, 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey", "TRightKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelper", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TKey")]), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TRightInput"), "!!1"]), 
          $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), $.Int32, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TLeftKey", "TRightKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftKeySelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightKeySelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TRightInput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TLeftInput"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TRightInput")]), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5 */ 

(function HashJoinQueryOperatorEnumerator$b5$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5"), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5")]), 
      Name: "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: [
        "TLeftInput", "TLeftKey", "TRightInput", "THashKey", 
        "TOutput"
      ], 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("THashKey")]), $.GenericParameter("TLeftKey")]), $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TRightInput"), $.GenericParameter("THashKey")]), $.Int32]), 
          $asm02.TypeRef("System.Func`3", [
              $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
              $.GenericParameter("TOutput")
            ]), $asm02.TypeRef("System.Func`3", [
              $.GenericParameter("TLeftInput"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TRightInput")]), 
              $.GenericParameter("TOutput")
            ]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("THashKey")]), $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TLeftKey")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftSource", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("THashKey")]), $.GenericParameter("TLeftKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightSource", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TRightInput"), $.GenericParameter("THashKey")]), $.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_singleResultSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_groupResultSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TLeftInput"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TRightInput")]), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("THashKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_mutables", $asm07.TypeRef("System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5+Mutables", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TLeftKey"), 
          $.GenericParameter("TRightInput"), $.GenericParameter("THashKey"), 
          $.GenericParameter("TOutput")
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5+Mutables */ 

(function Mutables$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5+Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: [
        "TLeftInput", "TLeftKey", "TRightInput", "THashKey", 
        "TOutput"
      ], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_currentLeft", $.GenericParameter("TLeftInput"));

    $.Field({Static:false, Public:false}, "m_currentLeftKey", $.GenericParameter("TLeftKey"));

    $.Field({Static:false, Public:false}, "m_rightHashLookup", $asm07.TypeRef("System.Linq.Parallel.HashLookup`2", [$.GenericParameter("THashKey"), $asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TRightInput"), $asm07.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TRightInput")])])]));

    $.Field({Static:false, Public:false}, "m_currentRightMatches", $asm07.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TRightInput")]));

    $.Field({Static:false, Public:false}, "m_currentRightMatchesIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_outputLoopCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntersectQueryOperator`1 */ 

(function IntersectQueryOperator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
          new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1"), 
          new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1")
        ]), 
      Name: "System.Linq.Parallel.IntersectQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TInputOutput")]), $asm07.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TInputOutput")]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInputOutput")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!1"]), 
          $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]), $.Boolean, 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey", "TRightKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelper", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!1"]), 
          $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]), $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TLeftKey", "TRightKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntersectQueryOperator`1+IntersectQueryOperatorEnumerator`1 */ 

(function IntersectQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1+IntersectQueryOperatorEnumerator`1"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.IntersectQueryOperator`1+IntersectQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TLeftKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")]), $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]), $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TInputOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false}, "m_leftSource", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")]));

    $.Field({Static:false, Public:false}, "m_rightSource", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32]));

    $.Field({Static:false, Public:false}, "m_comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_hashLookup", $asm07.TypeRef("System.Linq.Set`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_outputLoopCount", $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntersectQueryOperator`1+OrderedIntersectQueryOperatorEnumerator`1 */ 

(function OrderedIntersectQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1+OrderedIntersectQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.IntersectQueryOperator`1+OrderedIntersectQueryOperatorEnumerator`1")]), 
      Name: "System.Linq.Parallel.IntersectQueryOperator`1+OrderedIntersectQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TLeftKey"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")]), $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]), $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TLeftKey")]), 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TInputOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TLeftKey")])])
    );

    $.Field({Static:false, Public:false}, "m_leftSource", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")]));

    $.Field({Static:false, Public:false}, "m_rightSource", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32]));

    $.Field({Static:false, Public:false}, "m_comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm07.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TInputOutput")])]));

    $.Field({Static:false, Public:false}, "m_leftKeyComparer", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TLeftKey")]));

    $.Field({Static:false, Public:false}, "m_hashLookup", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TInputOutput")]), $asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TLeftKey")])]));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.JoinQueryOperator`4 */ 

(function JoinQueryOperator$b4$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
          new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.JoinQueryOperator`4"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.JoinQueryOperator`4"), 
          new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.JoinQueryOperator`4")
        ]), 
      Name: "System.Linq.Parallel.JoinQueryOperator`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TKey", "TOutput"], 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TLeftInput")]), $asm07.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TRightInput")]), 
          $asm02.TypeRef("System.Func`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TKey")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TRightInput"), $.GenericParameter("TKey")]), 
          $asm02.TypeRef("System.Func`3", [
              $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
              $.GenericParameter("TOutput")
            ]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOutput")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TOutput")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TLeftInput"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TRightInput"), "!!1"]), 
          $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), $.Boolean, 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey", "TRightKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelper", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TKey")]), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TRightInput"), "!!1"]), 
          $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TLeftKey", "TRightKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftKeySelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightKeySelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TRightInput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.UnionQueryOperator`1 */ 

(function UnionQueryOperator$b1$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
          new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1"), 
          new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1")
        ]), 
      Name: "System.Linq.Parallel.UnionQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TInputOutput")]), $asm07.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TInputOutput")]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInputOutput")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!1"]), 
          $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]), $.Boolean, 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey", "TRightKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamFixedBothTypes", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), "!!1"]), 
          $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]), $.Int32, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TLeftKey", "TRightKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamFixedLeftType", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!1"]), 
          $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]), $.Int32, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TLeftKey", "TRightKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.UnionQueryOperator`1+UnionQueryOperatorEnumerator`2 */ 

(function UnionQueryOperatorEnumerator$b2$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1+UnionQueryOperatorEnumerator`2"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.UnionQueryOperator`1+UnionQueryOperatorEnumerator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TLeftKey", "TRightKey"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")]), $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TRightKey")]), 
          $.Int32, $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]), 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TInputOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false}, "m_leftSource", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")]));

    $.Field({Static:false, Public:false}, "m_rightSource", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TRightKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_hashLookup", $asm07.TypeRef("System.Linq.Set`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_outputLoopCount", $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.UnionQueryOperator`1+OrderedUnionQueryOperatorEnumerator`2 */ 

(function OrderedUnionQueryOperatorEnumerator$b2$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1+OrderedUnionQueryOperatorEnumerator`2"), $asm07.TypeRef("System.Linq.Parallel.ConcatKey`2", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.UnionQueryOperator`1+OrderedUnionQueryOperatorEnumerator`2"), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.UnionQueryOperator`1+OrderedUnionQueryOperatorEnumerator`2")])]), 
      Name: "System.Linq.Parallel.UnionQueryOperator`1+OrderedUnionQueryOperatorEnumerator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TLeftKey", "TRightKey"], 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")]), $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TRightKey")]), 
          $.Boolean, $.Boolean, 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]), $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$asm07.TypeRef("System.Linq.Parallel.ConcatKey`2", [$.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey")])]), 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TInputOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Linq.Parallel.ConcatKey`2", [$.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey")])])])
    );

    $.Field({Static:false, Public:false}, "m_leftSource", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")]));

    $.Field({Static:false, Public:false}, "m_rightSource", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TRightKey")]));

    $.Field({Static:false, Public:false}, "m_keyComparer", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$asm07.TypeRef("System.Linq.Parallel.ConcatKey`2", [$.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey")])]));

    $.Field({Static:false, Public:false}, "m_outputEnumerator", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm07.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TInputOutput")]), $asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.ConcatKey`2", [$.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey")])])])]));

    $.Field({Static:false, Public:false}, "m_leftOrdered", $.Boolean);

    $.Field({Static:false, Public:false}, "m_rightOrdered", $.Boolean);

    $.Field({Static:false, Public:false}, "m_comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ZipQueryOperator`3 */ 

(function ZipQueryOperator$b3$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3")]), 
      Name: "System.Linq.Parallel.ZipQueryOperator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TLeftInput")]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TRightInput")]), 
          $asm02.TypeRef("System.Func`3", [
              $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
              $.GenericParameter("TOutput")
            ])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TLeftInput")]), $asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TRightInput")]), 
          $asm02.TypeRef("System.Func`3", [
              $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
              $.GenericParameter("TOutput")
            ])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOutput")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Parallel.ZipQueryOperator$b3_$lAsSequentialQuery$gd__9.__Type__]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OrdinalIndexState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TOutput")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftChild", $asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TLeftInput")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightChild", $asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TRightInput")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_prematureMergeLeft", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_prematureMergeRight", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_limitsParallelism", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ZipQueryOperator`3+ZipQueryOperatorResults */ 

(function ZipQueryOperatorResults$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3+ZipQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.ZipQueryOperator`3+ZipQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TLeftInput")]), $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TRightInput")]), 
          $asm02.TypeRef("System.Func`3", [
              $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
              $.GenericParameter("TOutput")
            ]), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementsCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElement", 
      new JSIL.MethodSignature($.GenericParameter("TOutput"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GivePartitionedStream", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftChildResults", $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TLeftInput")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightChildResults", $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TRightInput")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_count", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_preferStriping", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ZipQueryOperator`3+<AsSequentialQuery>d__9 */ 

(function $lAsSequentialQuery$gd__9$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ZipQueryOperator`3+<AsSequentialQuery>d__9", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTOutput$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOutput")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTOutput$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TOutput"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TOutput"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Linq.Parallel.ZipQueryOperator`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false}, "token", $asm02.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:true }, "$l$g3__token", $asm02.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "$lleftEnumerator$g5__1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TLeftInput")]));

    $.Field({Static:false, Public:false}, "$lrightEnumerator$g5__2", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TRightInput")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTOutput$g.Current", $.GenericParameter("TOutput"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOutput")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.PartitionedStreamMerger`1 */ 

(function PartitionedStreamMerger$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.PartitionedStreamMerger`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOutput"], 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm07.TypeRef("System.Linq.ParallelMergeOptions"), 
          $asm02.TypeRef("System.Threading.Tasks.TaskScheduler"), $.Boolean, 
          $asm07.TypeRef("System.Linq.Parallel.CancellationState"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MergeExecutor", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.MergeExecutor`1", [$.GenericParameter("TOutput")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Receive", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TOutput"), "!!0"])], ["TKey"])
    );

    $.Field({Static:false, Public:false}, "m_forEffectMerge", $.Boolean);

    $.Field({Static:false, Public:false}, "m_mergeOptions", $asm07.TypeRef("System.Linq.ParallelMergeOptions"));

    $.Field({Static:false, Public:false}, "m_isOrdered", $.Boolean);

    $.Field({Static:false, Public:false}, "m_mergeExecutor", $asm07.TypeRef("System.Linq.Parallel.MergeExecutor`1", [$.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false}, "m_taskScheduler", $asm02.TypeRef("System.Threading.Tasks.TaskScheduler"));

    $.Field({Static:false, Public:false}, "m_queryId", $.Int32);

    $.Field({Static:false, Public:false}, "m_cancellationState", $asm07.TypeRef("System.Linq.Parallel.CancellationState"));

    $.Property({Static:false, Public:false}, "MergeExecutor", $asm07.TypeRef("System.Linq.Parallel.MergeExecutor`1", [$.GenericParameter("TOutput")]));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryOpeningEnumerator`1 */ 

(function QueryOpeningEnumerator$b1$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.QueryOpeningEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOutput"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TOutput")]), $asm02.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.Linq.ParallelMergeOptions")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TOutput"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "OpenQuery", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_queryOperator", $asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false}, "m_openedQueryEnumerator", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false}, "m_querySettings", $asm07.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_mergeOptions", $asm02.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.Linq.ParallelMergeOptions")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_suppressOrderPreservation", $.Boolean);

    $.Field({Static:false, Public:false}, "m_moveNextIteration", $.Int32);

    $.Field({Static:false, Public:false}, "m_hasQueryOpeningFailed", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_topLevelDisposedFlag", $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_topLevelCancellationTokenSource", $asm02.TypeRef("System.Threading.CancellationTokenSource"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("TOutput"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")]), 
      /* 1 */ $asm02.TypeRef("System.IDisposable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.InlinedAggregationOperator`3 */ 

(function InlinedAggregationOperator$b3$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.InlinedAggregationOperator`3"), new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.InlinedAggregationOperator`3")]), 
      Name: "System.Linq.Parallel.InlinedAggregationOperator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TIntermediate", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Aggregate", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TIntermediate")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TIntermediate"), $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TIntermediate")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TIntermediate")]), 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.CountAggregationOperator`1 */ 

(function CountAggregationOperator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.CountAggregationOperator`1"), $asm02.TypeRef("System.Int32"), 
          $asm02.TypeRef("System.Int32")
        ]), 
      Name: "System.Linq.Parallel.CountAggregationOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1 */ 

(function InlinedAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TIntermediate"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TIntermediate")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TIntermediate")])])
    );

    $.Field({Static:false, Public:false}, "m_partitionIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_done", $.Boolean);

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.CountAggregationOperator`1+CountAggregationOperatorEnumerator`1 */ 

(function CountAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.CountAggregationOperator`1+CountAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]), $.Int32, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LongCountAggregationOperator`1 */ 

(function LongCountAggregationOperator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LongCountAggregationOperator`1"), $asm02.TypeRef("System.Int64"), 
          $asm02.TypeRef("System.Int64")
        ]), 
      Name: "System.Linq.Parallel.LongCountAggregationOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Int64, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LongCountAggregationOperator`1+LongCountAggregationOperatorEnumerator`1 */ 

(function LongCountAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm02.TypeRef("System.Int64")]), 
      Name: "System.Linq.Parallel.LongCountAggregationOperator`1+LongCountAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]), $.Int32, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int64])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DecimalAverageAggregationOperator */ 

(function DecimalAverageAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Decimal"), $asm07.TypeRef("System.Linq.Parallel.Pair`2", [$asm02.TypeRef("System.Decimal"), $asm02.TypeRef("System.Int64")]), 
          $asm02.TypeRef("System.Decimal")
        ]), 
      Name: "System.Linq.Parallel.DecimalAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Decimal")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$asm02.TypeRef("System.Decimal"), $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Decimal"), "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DecimalAverageAggregationOperator+DecimalAverageAggregationOperatorEnumerator`1 */ 

(function DecimalAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$asm02.TypeRef("System.Decimal"), $asm02.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.DecimalAverageAggregationOperator+DecimalAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Decimal"), $.GenericParameter("TKey")]), $.Int32, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$asm02.TypeRef("System.Decimal"), $.Int64])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Decimal"), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DecimalMinMaxAggregationOperator */ 

(function DecimalMinMaxAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Decimal"), $asm02.TypeRef("System.Decimal"), 
          $asm02.TypeRef("System.Decimal")
        ]), 
      Name: "System.Linq.Parallel.DecimalMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Decimal")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Decimal"), $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Decimal"), "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DecimalMinMaxAggregationOperator+DecimalMinMaxAggregationOperatorEnumerator`1 */ 

(function DecimalMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm02.TypeRef("System.Decimal")]), 
      Name: "System.Linq.Parallel.DecimalMinMaxAggregationOperator+DecimalMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Decimal"), $.GenericParameter("TKey")]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Decimal")])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Decimal"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_sign", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DecimalSumAggregationOperator */ 

(function DecimalSumAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Decimal"), $asm02.TypeRef("System.Decimal"), 
          $asm02.TypeRef("System.Decimal")
        ]), 
      Name: "System.Linq.Parallel.DecimalSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Decimal")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Decimal"), $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Decimal"), "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DecimalSumAggregationOperator+DecimalSumAggregationOperatorEnumerator`1 */ 

(function DecimalSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm02.TypeRef("System.Decimal")]), 
      Name: "System.Linq.Parallel.DecimalSumAggregationOperator+DecimalSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Decimal"), $.GenericParameter("TKey")]), $.Int32, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Decimal")])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Decimal"), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DoubleAverageAggregationOperator */ 

(function DoubleAverageAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Double"), $asm07.TypeRef("System.Linq.Parallel.Pair`2", [$asm02.TypeRef("System.Double"), $asm02.TypeRef("System.Int64")]), 
          $asm02.TypeRef("System.Double")
        ]), 
      Name: "System.Linq.Parallel.DoubleAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Double, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DoubleAverageAggregationOperator+DoubleAverageAggregationOperatorEnumerator`1 */ 

(function DoubleAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$asm02.TypeRef("System.Double"), $asm02.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.DoubleAverageAggregationOperator+DoubleAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.GenericParameter("TKey")]), $.Int32, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DoubleMinMaxAggregationOperator */ 

(function DoubleMinMaxAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Double"), $asm02.TypeRef("System.Double"), 
          $asm02.TypeRef("System.Double")
        ]), 
      Name: "System.Linq.Parallel.DoubleMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Double, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DoubleMinMaxAggregationOperator+DoubleMinMaxAggregationOperatorEnumerator`1 */ 

(function DoubleMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm02.TypeRef("System.Double")]), 
      Name: "System.Linq.Parallel.DoubleMinMaxAggregationOperator+DoubleMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.GenericParameter("TKey")]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Double])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_sign", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DoubleSumAggregationOperator */ 

(function DoubleSumAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Double"), $asm02.TypeRef("System.Double"), 
          $asm02.TypeRef("System.Double")
        ]), 
      Name: "System.Linq.Parallel.DoubleSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Double, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DoubleSumAggregationOperator+DoubleSumAggregationOperatorEnumerator`1 */ 

(function DoubleSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm02.TypeRef("System.Double")]), 
      Name: "System.Linq.Parallel.DoubleSumAggregationOperator+DoubleSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.GenericParameter("TKey")]), $.Int32, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Double])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FloatAverageAggregationOperator */ 

(function FloatAverageAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Single"), $asm07.TypeRef("System.Linq.Parallel.Pair`2", [$asm02.TypeRef("System.Double"), $asm02.TypeRef("System.Int64")]), 
          $asm02.TypeRef("System.Single")
        ]), 
      Name: "System.Linq.Parallel.FloatAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Single, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FloatAverageAggregationOperator+FloatAverageAggregationOperatorEnumerator`1 */ 

(function FloatAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$asm02.TypeRef("System.Double"), $asm02.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.FloatAverageAggregationOperator+FloatAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, $.GenericParameter("TKey")]), $.Int32, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FloatMinMaxAggregationOperator */ 

(function FloatMinMaxAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Single"), $asm02.TypeRef("System.Single"), 
          $asm02.TypeRef("System.Single")
        ]), 
      Name: "System.Linq.Parallel.FloatMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Single, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FloatMinMaxAggregationOperator+FloatMinMaxAggregationOperatorEnumerator`1 */ 

(function FloatMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm02.TypeRef("System.Single")]), 
      Name: "System.Linq.Parallel.FloatMinMaxAggregationOperator+FloatMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, $.GenericParameter("TKey")]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Single])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_sign", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FloatSumAggregationOperator */ 

(function FloatSumAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Single"), $asm02.TypeRef("System.Double"), 
          $asm02.TypeRef("System.Single")
        ]), 
      Name: "System.Linq.Parallel.FloatSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Single, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FloatSumAggregationOperator+FloatSumAggregationOperatorEnumerator`1 */ 

(function FloatSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm02.TypeRef("System.Double")]), 
      Name: "System.Linq.Parallel.FloatSumAggregationOperator+FloatSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, $.GenericParameter("TKey")]), $.Int32, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Double])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntAverageAggregationOperator */ 

(function IntAverageAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Int32"), $asm07.TypeRef("System.Linq.Parallel.Pair`2", [$asm02.TypeRef("System.Int64"), $asm02.TypeRef("System.Int64")]), 
          $asm02.TypeRef("System.Double")
        ]), 
      Name: "System.Linq.Parallel.IntAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Double, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntAverageAggregationOperator+IntAverageAggregationOperatorEnumerator`1 */ 

(function IntAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$asm02.TypeRef("System.Int64"), $asm02.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.IntAverageAggregationOperator+IntAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.GenericParameter("TKey")]), $.Int32, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntMinMaxAggregationOperator */ 

(function IntMinMaxAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Int32"), $asm02.TypeRef("System.Int32"), 
          $asm02.TypeRef("System.Int32")
        ]), 
      Name: "System.Linq.Parallel.IntMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntMinMaxAggregationOperator+IntMinMaxAggregationOperatorEnumerator`1 */ 

(function IntMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.IntMinMaxAggregationOperator+IntMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.GenericParameter("TKey")]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntSumAggregationOperator */ 

(function IntSumAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Int32"), $asm02.TypeRef("System.Int32"), 
          $asm02.TypeRef("System.Int32")
        ]), 
      Name: "System.Linq.Parallel.IntSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntSumAggregationOperator+IntSumAggregationOperatorEnumerator`1 */ 

(function IntSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.IntSumAggregationOperator+IntSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.GenericParameter("TKey")]), $.Int32, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LongAverageAggregationOperator */ 

(function LongAverageAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Int64"), $asm07.TypeRef("System.Linq.Parallel.Pair`2", [$asm02.TypeRef("System.Int64"), $asm02.TypeRef("System.Int64")]), 
          $asm02.TypeRef("System.Double")
        ]), 
      Name: "System.Linq.Parallel.LongAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Double, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LongAverageAggregationOperator+LongAverageAggregationOperatorEnumerator`1 */ 

(function LongAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$asm02.TypeRef("System.Int64"), $asm02.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.LongAverageAggregationOperator+LongAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.GenericParameter("TKey")]), $.Int32, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LongMinMaxAggregationOperator */ 

(function LongMinMaxAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Int64"), $asm02.TypeRef("System.Int64"), 
          $asm02.TypeRef("System.Int64")
        ]), 
      Name: "System.Linq.Parallel.LongMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Int64, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LongMinMaxAggregationOperator+LongMinMaxAggregationOperatorEnumerator`1 */ 

(function LongMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm02.TypeRef("System.Int64")]), 
      Name: "System.Linq.Parallel.LongMinMaxAggregationOperator+LongMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.GenericParameter("TKey")]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int64])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_sign", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LongSumAggregationOperator */ 

(function LongSumAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Int64"), $asm02.TypeRef("System.Int64"), 
          $asm02.TypeRef("System.Int64")
        ]), 
      Name: "System.Linq.Parallel.LongSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Int64, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LongSumAggregationOperator+LongSumAggregationOperatorEnumerator`1 */ 

(function LongSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm02.TypeRef("System.Int64")]), 
      Name: "System.Linq.Parallel.LongSumAggregationOperator+LongSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.GenericParameter("TKey")]), $.Int32, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int64])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDecimalAverageAggregationOperator */ 

(function NullableDecimalAverageAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), $asm07.TypeRef("System.Linq.Parallel.Pair`2", [$asm02.TypeRef("System.Decimal"), $asm02.TypeRef("System.Int64")]), 
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])
        ]), 
      Name: "System.Linq.Parallel.NullableDecimalAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$asm02.TypeRef("System.Decimal"), $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDecimalAverageAggregationOperator+NullableDecimalAverageAggregationOperatorEnumerator`1 */ 

(function NullableDecimalAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$asm02.TypeRef("System.Decimal"), $asm02.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.NullableDecimalAverageAggregationOperator+NullableDecimalAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), $.GenericParameter("TKey")]), $.Int32, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$asm02.TypeRef("System.Decimal"), $.Int64])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDecimalMinMaxAggregationOperator */ 

(function NullableDecimalMinMaxAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), 
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])
        ]), 
      Name: "System.Linq.Parallel.NullableDecimalMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDecimalMinMaxAggregationOperator+NullableDecimalMinMaxAggregationOperatorEnumerator`1 */ 

(function NullableDecimalMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])]), 
      Name: "System.Linq.Parallel.NullableDecimalMinMaxAggregationOperator+NullableDecimalMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), $.GenericParameter("TKey")]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_sign", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDecimalSumAggregationOperator */ 

(function NullableDecimalSumAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), 
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])
        ]), 
      Name: "System.Linq.Parallel.NullableDecimalSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDecimalSumAggregationOperator+NullableDecimalSumAggregationOperatorEnumerator`1 */ 

(function NullableDecimalSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])]), 
      Name: "System.Linq.Parallel.NullableDecimalSumAggregationOperator+NullableDecimalSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), $.GenericParameter("TKey")]), $.Int32, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")])])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Decimal")]), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDoubleAverageAggregationOperator */ 

(function NullableDoubleAverageAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Double")]), $asm07.TypeRef("System.Linq.Parallel.Pair`2", [$asm02.TypeRef("System.Double"), $asm02.TypeRef("System.Int64")]), 
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Double")])
        ]), 
      Name: "System.Linq.Parallel.NullableDoubleAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Double])]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Double]), "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDoubleAverageAggregationOperator+NullableDoubleAverageAggregationOperatorEnumerator`1 */ 

(function NullableDoubleAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$asm02.TypeRef("System.Double"), $asm02.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.NullableDoubleAverageAggregationOperator+NullableDoubleAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Double]), $.GenericParameter("TKey")]), $.Int32, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Double]), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDoubleMinMaxAggregationOperator */ 

(function NullableDoubleMinMaxAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Double")]), $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Double")]), 
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Double")])
        ]), 
      Name: "System.Linq.Parallel.NullableDoubleMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Double])]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Double]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Double]), "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDoubleMinMaxAggregationOperator+NullableDoubleMinMaxAggregationOperatorEnumerator`1 */ 

(function NullableDoubleMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Double")])]), 
      Name: "System.Linq.Parallel.NullableDoubleMinMaxAggregationOperator+NullableDoubleMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Double]), $.GenericParameter("TKey")]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Nullable`1", [$.Double])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Double]), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_sign", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDoubleSumAggregationOperator */ 

(function NullableDoubleSumAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Double")]), $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Double")]), 
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Double")])
        ]), 
      Name: "System.Linq.Parallel.NullableDoubleSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Double])]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Double]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Double]), "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDoubleSumAggregationOperator+NullableDoubleSumAggregationOperatorEnumerator`1 */ 

(function NullableDoubleSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Double")])]), 
      Name: "System.Linq.Parallel.NullableDoubleSumAggregationOperator+NullableDoubleSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Double]), $.GenericParameter("TKey")]), $.Int32, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Nullable`1", [$.Double])])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Double]), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableFloatAverageAggregationOperator */ 

(function NullableFloatAverageAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Single")]), $asm07.TypeRef("System.Linq.Parallel.Pair`2", [$asm02.TypeRef("System.Double"), $asm02.TypeRef("System.Int64")]), 
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Single")])
        ]), 
      Name: "System.Linq.Parallel.NullableFloatAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Single])]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Single]), "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Single]), [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableFloatAverageAggregationOperator+NullableFloatAverageAggregationOperatorEnumerator`1 */ 

(function NullableFloatAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$asm02.TypeRef("System.Double"), $asm02.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.NullableFloatAverageAggregationOperator+NullableFloatAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Single]), $.GenericParameter("TKey")]), $.Int32, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Single]), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableFloatMinMaxAggregationOperator */ 

(function NullableFloatMinMaxAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Single")]), $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Single")]), 
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Single")])
        ]), 
      Name: "System.Linq.Parallel.NullableFloatMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Single])]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Single]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Single]), "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Single]), [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableFloatMinMaxAggregationOperator+NullableFloatMinMaxAggregationOperatorEnumerator`1 */ 

(function NullableFloatMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Single")])]), 
      Name: "System.Linq.Parallel.NullableFloatMinMaxAggregationOperator+NullableFloatMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Single]), $.GenericParameter("TKey")]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Nullable`1", [$.Single])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Single]), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_sign", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableFloatSumAggregationOperator */ 

(function NullableFloatSumAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Single")]), $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Double")]), 
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Single")])
        ]), 
      Name: "System.Linq.Parallel.NullableFloatSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Single])]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Double]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Single]), "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Single]), [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableFloatSumAggregationOperator+NullableFloatSumAggregationOperatorEnumerator`1 */ 

(function NullableFloatSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Double")])]), 
      Name: "System.Linq.Parallel.NullableFloatSumAggregationOperator+NullableFloatSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Single]), $.GenericParameter("TKey")]), $.Int32, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Nullable`1", [$.Double])])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Single]), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableIntAverageAggregationOperator */ 

(function NullableIntAverageAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Int32")]), $asm07.TypeRef("System.Linq.Parallel.Pair`2", [$asm02.TypeRef("System.Int64"), $asm02.TypeRef("System.Int64")]), 
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Double")])
        ]), 
      Name: "System.Linq.Parallel.NullableIntAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Int32])]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Int32]), "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableIntAverageAggregationOperator+NullableIntAverageAggregationOperatorEnumerator`1 */ 

(function NullableIntAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$asm02.TypeRef("System.Int64"), $asm02.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.NullableIntAverageAggregationOperator+NullableIntAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Int32]), $.GenericParameter("TKey")]), $.Int32, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Int32]), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableIntMinMaxAggregationOperator */ 

(function NullableIntMinMaxAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Int32")]), $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Int32")]), 
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Int32")])
        ]), 
      Name: "System.Linq.Parallel.NullableIntMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Int32])]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Int32]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Int32]), "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int32]), [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableIntMinMaxAggregationOperator+NullableIntMinMaxAggregationOperatorEnumerator`1 */ 

(function NullableIntMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Int32")])]), 
      Name: "System.Linq.Parallel.NullableIntMinMaxAggregationOperator+NullableIntMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Int32]), $.GenericParameter("TKey")]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Nullable`1", [$.Int32])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Int32]), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_sign", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableIntSumAggregationOperator */ 

(function NullableIntSumAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Int32")]), $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Int32")]), 
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Int32")])
        ]), 
      Name: "System.Linq.Parallel.NullableIntSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Int32])]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Int32]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Int32]), "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int32]), [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableIntSumAggregationOperator+NullableIntSumAggregationOperatorEnumerator`1 */ 

(function NullableIntSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Int32")])]), 
      Name: "System.Linq.Parallel.NullableIntSumAggregationOperator+NullableIntSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Int32]), $.GenericParameter("TKey")]), $.Int32, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Nullable`1", [$.Int32])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Int32]), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableLongAverageAggregationOperator */ 

(function NullableLongAverageAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Int64")]), $asm07.TypeRef("System.Linq.Parallel.Pair`2", [$asm02.TypeRef("System.Int64"), $asm02.TypeRef("System.Int64")]), 
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Double")])
        ]), 
      Name: "System.Linq.Parallel.NullableLongAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Int64])]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Int64]), "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Double]), [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableLongAverageAggregationOperator+NullableLongAverageAggregationOperatorEnumerator`1 */ 

(function NullableLongAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$asm02.TypeRef("System.Int64"), $asm02.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.NullableLongAverageAggregationOperator+NullableLongAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Int64]), $.GenericParameter("TKey")]), $.Int32, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Int64]), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableLongMinMaxAggregationOperator */ 

(function NullableLongMinMaxAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Int64")]), $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Int64")]), 
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Int64")])
        ]), 
      Name: "System.Linq.Parallel.NullableLongMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Int64])]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Int64]), "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int64]), [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableLongMinMaxAggregationOperator+NullableLongMinMaxAggregationOperatorEnumerator`1 */ 

(function NullableLongMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.NullableLongMinMaxAggregationOperator+NullableLongMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Int64]), $.GenericParameter("TKey")]), $.Int32, 
          $.Int32, $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Nullable`1", [$.Int64])])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Int64]), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_sign", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableLongSumAggregationOperator */ 

(function NullableLongSumAggregationOperator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Int64")]), $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Int64")]), 
          $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Int64")])
        ]), 
      Name: "System.Linq.Parallel.NullableLongSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Nullable`1", [$.Int64])]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Int64]), "!!0"]), $.Object, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Nullable`1", [$.Int64]), [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Exception")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableLongSumAggregationOperator+NullableLongSumAggregationOperatorEnumerator`1 */ 

(function NullableLongSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.NullableLongSumAggregationOperator+NullableLongSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Int64]), $.GenericParameter("TKey")]), $.Int32, 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Nullable`1", [$.Int64])])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Nullable`1", [$.Int64]), $.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ListQueryResults`1 */ 

(function ListQueryResults$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.ListQueryResults`1")]), 
      Name: "System.Linq.Parallel.ListQueryResults`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementsCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElement", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPartitionedStream", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("T"), $.Int32]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GivePartitionedStream", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("T")])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm02.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "m_partitionCount", $.Int32);

    $.Field({Static:false, Public:false}, "m_useStriping", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Linq.Parallel.OrdinalIndexState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Parallel.OrdinalIndexState", 
    BaseType: $asm02.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Indexible: 0, 
    Correct: 1, 
    Increasing: 2, 
    Shuffled: 3, 
  }
);

/* struct System.Linq.Parallel.QuerySettings */ 

(function QuerySettings$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Linq.Parallel.QuerySettings", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 5, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Threading.Tasks.TaskScheduler"), $asm02.TypeRef("System.Nullable`1", [$.Int32]), 
          $asm02.TypeRef("System.Threading.CancellationToken"), $asm02.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.Linq.ParallelExecutionMode")]), 
          $asm02.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.Linq.ParallelMergeOptions")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CleanStateAtQueryEnd", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CancellationState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Parallel.CancellationState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DegreeOfParallelism", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Empty", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExecutionMode", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.Linq.ParallelExecutionMode")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MergeOptions", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.Linq.ParallelMergeOptions")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_QueryId", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TaskScheduler", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Threading.Tasks.TaskScheduler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Merge", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CancellationState", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Parallel.CancellationState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DegreeOfParallelism", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ExecutionMode", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.Linq.ParallelExecutionMode")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_MergeOptions", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.Linq.ParallelMergeOptions")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TaskScheduler", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Threading.Tasks.TaskScheduler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WithDefaults", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "WithPerExecutionSettings", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "WithPerExecutionSettings", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("System.Threading.CancellationTokenSource"), $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean])])
    );

    $.Field({Static:false, Public:false}, "m_taskScheduler", $asm02.TypeRef("System.Threading.Tasks.TaskScheduler"));

    $.Field({Static:false, Public:false}, "m_degreeOfParallelism", $asm02.TypeRef("System.Nullable`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "m_cancellationState", $asm07.TypeRef("System.Linq.Parallel.CancellationState"));

    $.Field({Static:false, Public:false}, "m_executionMode", $asm02.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.Linq.ParallelExecutionMode")]));

    $.Field({Static:false, Public:false}, "m_mergeOptions", $asm02.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.Linq.ParallelMergeOptions")]));

    $.Field({Static:false, Public:false}, "m_queryId", $.Int32);

    $.Property({Static:false, Public:false}, "CancellationState", $asm07.TypeRef("System.Linq.Parallel.CancellationState"));

    $.Property({Static:false, Public:false}, "TaskScheduler", $asm02.TypeRef("System.Threading.Tasks.TaskScheduler"));

    $.Property({Static:false, Public:false}, "DegreeOfParallelism", $asm02.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:false}, "ExecutionMode", $asm02.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.Linq.ParallelExecutionMode")]));

    $.Property({Static:false, Public:false}, "MergeOptions", $asm02.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.Linq.ParallelMergeOptions")]));

    $.Property({Static:false, Public:false}, "QueryId", $.Int32);

    $.Property({Static:true , Public:false}, "Empty", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderingQueryOperator`1 */ 

(function OrderingQueryOperator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderingQueryOperator`1")]), 
      Name: "System.Linq.Parallel.OrderingQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TSource")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OrdinalIndexState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), [$asm02.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.Linq.ParallelMergeOptions")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.Field({Static:false, Public:false}, "m_orderOn", $.Boolean);

    $.Field({Static:false, Public:false}, "m_child", $asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "m_ordinalIndexState", $asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryExecutionOption`1 */ 

(function QueryExecutionOption$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.QueryExecutionOption`1")]), 
      Name: "System.Linq.Parallel.QueryExecutionOption`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TSource")]), $asm07.TypeRef("System.Linq.Parallel.QuerySettings")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OrdinalIndexState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.Field({Static:false, Public:false}, "m_child", $asm07.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "m_indexState", $asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.AnyAllSearchOperator`1 */ 

(function AnyAllSearchOperator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AnyAllSearchOperator`1"), $asm02.TypeRef("System.Boolean")]), 
      Name: "System.Linq.Parallel.AnyAllSearchOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInput")]), $.Boolean, 
          $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Aggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Boolean]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.Boolean]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInput"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.Boolean]), 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_qualification", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.AnyAllSearchOperator`1+AnyAllSearchOperatorEnumerator`1 */ 

(function AnyAllSearchOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Boolean"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.AnyAllSearchOperator`1+AnyAllSearchOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TKey"], 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")]), $.Boolean, 
          $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.Boolean]), $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]), $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_qualification", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultFoundFlag", $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ConcatQueryOperator`1 */ 

(function ConcatQueryOperator$b1$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1"), 
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1")
        ]), 
      Name: "System.Linq.Parallel.ConcatQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TSource")]), $asm07.TypeRef("System.Linq.ParallelQuery`1", [$.GenericParameter("TSource")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapHelper", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!1"]), 
          $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TSource")]), $asm07.TypeRef("System.Linq.Parallel.QuerySettings"), 
          $.Boolean
        ], ["TLeftKey", "TRightKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapHelper2", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!1"]), 
          $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TSource")])
        ], ["TLeftKey", "TRightKey"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!1"]), 
          $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TSource")]), $.Boolean, 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey", "TRightKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_prematureMergeLeft", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_prematureMergeRight", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ConcatQueryOperator`1+ConcatQueryOperatorEnumerator`2 */ 

(function ConcatQueryOperatorEnumerator$b2$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1+ConcatQueryOperatorEnumerator`2"), $asm07.TypeRef("System.Linq.Parallel.ConcatKey`2", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ConcatQueryOperator`1+ConcatQueryOperatorEnumerator`2"), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.ConcatQueryOperator`1+ConcatQueryOperatorEnumerator`2")])]), 
      Name: "System.Linq.Parallel.ConcatQueryOperator`1+ConcatQueryOperatorEnumerator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TLeftKey", "TRightKey"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TLeftKey")]), $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TRightKey")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TSource")]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Linq.Parallel.ConcatKey`2", [$.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey")])])])
    );

    $.Field({Static:false, Public:false}, "m_firstSource", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TLeftKey")]));

    $.Field({Static:false, Public:false}, "m_secondSource", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TRightKey")]));

    $.Field({Static:false, Public:false}, "m_begunSecond", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ConcatQueryOperator`1+ConcatQueryOperatorResults */ 

(function ConcatQueryOperatorResults$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3+BinaryQueryOperatorResults", [
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1+ConcatQueryOperatorResults"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1+ConcatQueryOperatorResults"), 
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1+ConcatQueryOperatorResults")
        ]), 
      Name: "System.Linq.Parallel.ConcatQueryOperator`1+ConcatQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), 
          $asm07.TypeRef("System.Linq.Parallel.ConcatQueryOperator`1", [$.GenericParameter("TSource")]), $asm07.TypeRef("System.Linq.Parallel.QuerySettings"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementsCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElement", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewResults", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), [
          $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), 
          $asm07.TypeRef("System.Linq.Parallel.ConcatQueryOperator`1", [$.GenericParameter("TSource")]), $asm07.TypeRef("System.Linq.Parallel.QuerySettings"), 
          $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "m_concatOp", $asm07.TypeRef("System.Linq.Parallel.ConcatQueryOperator`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "m_leftChildCount", $.Int32);

    $.Field({Static:false, Public:false}, "m_rightChildCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Parallel.ConcatKey`2 */ 

(function ConcatKey$b2$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Linq.Parallel.ConcatKey`2", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TLeftKey", "TRightKey"], 
      MaximumConstructorArguments: 3, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeComparer", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IComparer`1", [$asm07.TypeRef("System.Linq.Parallel.ConcatKey`2", [$.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey")])]), [$asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TLeftKey")]), $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TRightKey")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeLeft", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.ConcatKey`2", [$.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey")]), [$.GenericParameter("TLeftKey")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeRight", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.ConcatKey`2", [$.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey")]), [$.GenericParameter("TRightKey")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftKey", $.GenericParameter("TLeftKey"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightKey", $.GenericParameter("TRightKey"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_isLeft", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ConcatKey`2+ConcatKeyComparer */ 

(function ConcatKeyComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ConcatKey`2+ConcatKeyComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftKey", "TRightKey"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TLeftKey")]), $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TRightKey")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Linq.Parallel.ConcatKey`2", [$.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey")]), $asm07.TypeRef("System.Linq.Parallel.ConcatKey`2", [$.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey")])])
    );

    $.Field({Static:false, Public:false}, "m_leftComparer", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TLeftKey")]));

    $.Field({Static:false, Public:false}, "m_rightComparer", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TRightKey")]));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$asm07.TypeRef("System.Linq.Parallel.ConcatKey`2", [$.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ContainsSearchOperator`1 */ 

(function ContainsSearchOperator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ContainsSearchOperator`1"), $asm02.TypeRef("System.Boolean")]), 
      Name: "System.Linq.Parallel.ContainsSearchOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInput")]), $.GenericParameter("TInput"), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInput")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Aggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Boolean]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.Boolean]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInput"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.Boolean]), 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_searchValue", $.GenericParameter("TInput"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInput")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ContainsSearchOperator`1+ContainsSearchOperatorEnumerator`1 */ 

(function ContainsSearchOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm02.TypeRef("System.Boolean"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.ContainsSearchOperator`1+ContainsSearchOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TKey"], 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")]), $.GenericParameter("TInput"), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInput")]), $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]), $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_searchValue", $.GenericParameter("TInput"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInput")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultFoundFlag", $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DefaultIfEmptyQueryOperator`1 */ 

(function DefaultIfEmptyQueryOperator$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1")]), 
      Name: "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $.GenericParameter("TSource")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TSource")]), 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_defaultValue", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DefaultIfEmptyQueryOperator`1+DefaultIfEmptyQueryOperatorEnumerator`1 */ 

(function DefaultIfEmptyQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1+DefaultIfEmptyQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1+DefaultIfEmptyQueryOperatorEnumerator`1")]), 
      Name: "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1+DefaultIfEmptyQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey"], 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]), $.GenericParameter("TSource"), 
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]), $asm02.TypeRef("System.Threading.CountdownEvent"), 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TSource")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TKey")])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_lookedForEmpty", $.Boolean);

    $.Field({Static:false, Public:false}, "m_partitionIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_partitionCount", $.Int32);

    $.Field({Static:false, Public:false}, "m_defaultValue", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "m_sharedEmptyCount", $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "m_sharedLatch", $asm02.TypeRef("System.Threading.CountdownEvent"));

    $.Field({Static:false, Public:false}, "m_cancelToken", $asm02.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DistinctQueryOperator`1 */ 

(function DistinctQueryOperator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1")]), 
      Name: "System.Linq.Parallel.DistinctQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInputOutput")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]), 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelper", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]), 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DistinctQueryOperator`1+DistinctQueryOperatorEnumerator`1 */ 

(function DistinctQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1+DistinctQueryOperatorEnumerator`1"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.DistinctQueryOperator`1+DistinctQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TKey")]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]), 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TInputOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_hashLookup", $asm07.TypeRef("System.Linq.Set`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_outputLoopCount", $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DistinctQueryOperator`1+OrderedDistinctQueryOperatorEnumerator`1 */ 

(function OrderedDistinctQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1+OrderedDistinctQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DistinctQueryOperator`1+OrderedDistinctQueryOperatorEnumerator`1")]), 
      Name: "System.Linq.Parallel.DistinctQueryOperator`1+OrderedDistinctQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TKey")]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")]), 
          $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]), $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TInputOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TKey")])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm07.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_hashLookup", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TInputOutput")]), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_keyComparer", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_hashLookupEnumerator", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm07.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TInputOutput")]), $.GenericParameter("TKey")])]));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ElementAtQueryOperator`1 */ 

(function ElementAtQueryOperator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1")]), 
      Name: "System.Linq.Parallel.ElementAtQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Aggregate", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TSource")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TSource")]), 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_index", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_prematureMerge", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_limitsParallelism", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ElementAtQueryOperator`1+ElementAtQueryOperatorEnumerator */ 

(function ElementAtQueryOperatorEnumerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1+ElementAtQueryOperatorEnumerator"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.ElementAtQueryOperator`1+ElementAtQueryOperatorEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.Int32]), $.Int32, 
          $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]), $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TSource")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.Int32]));

    $.Field({Static:false, Public:false}, "m_index", $.Int32);

    $.Field({Static:false, Public:false}, "m_resultFoundFlag", $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FirstQueryOperator`1 */ 

(function FirstQueryOperator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1")]), 
      Name: "System.Linq.Parallel.FirstQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapHelper", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TSource")]), 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TSource")]), 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_prematureMergeNeeded", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FirstQueryOperator`1+FirstQueryOperatorEnumerator`1 */ 

(function FirstQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1+FirstQueryOperatorEnumerator`1"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.FirstQueryOperator`1+FirstQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey"], 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]), 
          $asm07.TypeRef("System.Linq.Parallel.FirstQueryOperator`1+FirstQueryOperatorState`1", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]), $asm02.TypeRef("System.Threading.CountdownEvent"), 
          $asm02.TypeRef("System.Threading.CancellationToken"), $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TSource")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_predicate", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "m_alreadySearched", $.Boolean);

    $.Field({Static:false, Public:false}, "m_partitionId", $.Int32);

    $.Field({Static:false, Public:false}, "m_operatorState", $asm07.TypeRef("System.Linq.Parallel.FirstQueryOperator`1+FirstQueryOperatorState`1", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_sharedBarrier", $asm02.TypeRef("System.Threading.CountdownEvent"));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_keyComparer", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FirstQueryOperator`1+FirstQueryOperatorState`1 */ 

(function FirstQueryOperatorState$b1$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.FirstQueryOperator`1+FirstQueryOperatorState`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_key", $.GenericParameter("TKey"));

    $.Field({Static:false, Public:false}, "m_partitionId", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ForAllOperator`1 */ 

(function ForAllOperator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1"), new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1")]), 
      Name: "System.Linq.Parallel.ForAllOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInput")]), $asm02.TypeRef("System.Action`1", [$.GenericParameter("TInput")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInput")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInput")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "RunSynchronously", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInput"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInput")]), 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementAction", $asm02.TypeRef("System.Action`1", [$.GenericParameter("TInput")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ForAllOperator`1+ForAllEnumerator`1 */ 

(function ForAllEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1+ForAllEnumerator`1"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.ForAllOperator`1+ForAllEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")]), $asm02.TypeRef("System.Action`1", [$.GenericParameter("TInput")]), 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TInput")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementAction", $asm02.TypeRef("System.Action`1", [$.GenericParameter("TInput")]));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.GroupByQueryOperator`3 */ 

(function GroupByQueryOperator$b3$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByQueryOperator`3"), $asm07.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperator`3"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByQueryOperator`3")])]), 
      Name: "System.Linq.Parallel.GroupByQueryOperator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TElement"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), 
          $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TGroupKey")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TGroupKey"), $.GenericParameter("TElement")])]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TGroupKey"), $.GenericParameter("TElement")])]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TGroupKey"), $.GenericParameter("TElement")])]), 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelper", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), "!!1"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TGroupKey"), $.GenericParameter("TElement")])]), 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TIgnoreKey", "TKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelperOrdered", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TGroupKey"), $.GenericParameter("TElement")])]), 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keySelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementSelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TGroupKey")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.GroupByQueryOperatorEnumerator`4 */ 

(function GroupByQueryOperatorEnumerator$b4$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4")]), 
      Name: "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TElement", "TOrderKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), $.GenericParameter("TOrderKey")]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TGroupKey")]), 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildHashLookup", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm07.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TGroupKey")]), $asm07.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TElement")])]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TGroupKey"), $.GenericParameter("TElement")])]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TOrderKey")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), $.GenericParameter("TOrderKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TGroupKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_mutables", $asm07.TypeRef("System.Linq.Parallel.GroupByQueryOperatorEnumerator`4+Mutables", [
          $.GenericParameter("TSource"), $.GenericParameter("TGroupKey"), 
          $.GenericParameter("TElement"), $.GenericParameter("TOrderKey")
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.GroupByQueryOperatorEnumerator`4+Mutables */ 

(function Mutables$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4+Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TElement", "TOrderKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_hashLookup", $asm07.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm07.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TGroupKey")]), $asm07.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TElement")])]));

    $.Field({Static:false, Public:false}, "m_hashLookupIndex", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3 */ 

(function GroupByIdentityQueryOperatorEnumerator$b3$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.GroupByQueryOperatorEnumerator`4", [
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3"), 
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3")
        ]), 
      Name: "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TOrderKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), $.GenericParameter("TOrderKey")]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TGroupKey")]), 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildHashLookup", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm07.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TGroupKey")]), $asm07.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TSource")])]), null)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4 */ 

(function GroupByElementSelectorQueryOperatorEnumerator$b4$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.GroupByQueryOperatorEnumerator`4", [
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4"), 
          new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4")
        ]), 
      Name: "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TElement", "TOrderKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), $.GenericParameter("TOrderKey")]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TGroupKey")]), 
          $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")]), $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildHashLookup", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm07.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TGroupKey")]), $asm07.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TElement")])]), null)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementSelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4 */ 

(function OrderedGroupByQueryOperatorEnumerator$b4$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4")]), 
      Name: "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TElement", "TOrderKey"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), $.GenericParameter("TOrderKey")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TGroupKey")]), $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TOrderKey")]), 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildHashLookup", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm07.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TGroupKey")]), $asm07.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4+GroupKeyData", [
              $.GenericParameter("TSource"), $.GenericParameter("TGroupKey"), 
              $.GenericParameter("TElement"), $.GenericParameter("TOrderKey")
            ])]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TGroupKey"), $.GenericParameter("TElement")])]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TOrderKey")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), $.GenericParameter("TOrderKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keySelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TGroupKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_orderComparer", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TOrderKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_mutables", $asm07.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4+Mutables", [
          $.GenericParameter("TSource"), $.GenericParameter("TGroupKey"), 
          $.GenericParameter("TElement"), $.GenericParameter("TOrderKey")
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4+Mutables */ 

(function Mutables$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4+Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TElement", "TOrderKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_hashLookup", $asm07.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm07.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TGroupKey")]), $asm07.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4+GroupKeyData", [
            $.GenericParameter("TSource"), $.GenericParameter("TGroupKey"), 
            $.GenericParameter("TElement"), $.GenericParameter("TOrderKey")
          ])]));

    $.Field({Static:false, Public:false}, "m_hashLookupIndex", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4+GroupKeyData */ 

(function GroupKeyData$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4+GroupKeyData", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TElement", "TOrderKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.GenericParameter("TOrderKey"), $.GenericParameter("TGroupKey"), 
          $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TOrderKey")])
        ])
    );

    $.Field({Static:false, Public:false}, "m_orderKey", $.GenericParameter("TOrderKey"));

    $.Field({Static:false, Public:false}, "m_grouping", $asm07.TypeRef("System.Linq.Parallel.OrderedGroupByGrouping`3", [
          $.GenericParameter("TGroupKey"), $.GenericParameter("TOrderKey"), 
          $.GenericParameter("TElement")
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3 */ 

(function OrderedGroupByIdentityQueryOperatorEnumerator$b3$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4", [
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3"), 
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3")
        ]), 
      Name: "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TOrderKey"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), $.GenericParameter("TOrderKey")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TGroupKey")]), $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TOrderKey")]), 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildHashLookup", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm07.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TGroupKey")]), $asm07.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4+GroupKeyData", [
              $.GenericParameter("TSource"), $.GenericParameter("TGroupKey"), 
              $.GenericParameter("TSource"), $.GenericParameter("TOrderKey")
            ])]), null)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4 */ 

(function OrderedGroupByElementSelectorQueryOperatorEnumerator$b4$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4", [
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4"), 
          new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4")
        ]), 
      Name: "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TElement", "TOrderKey"], 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), $.GenericParameter("TOrderKey")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), 
          $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TGroupKey")]), 
          $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TOrderKey")]), $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildHashLookup", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm07.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TGroupKey")]), $asm07.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4+GroupKeyData", [
              $.GenericParameter("TSource"), $.GenericParameter("TGroupKey"), 
              $.GenericParameter("TElement"), $.GenericParameter("TOrderKey")
            ])]), null)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementSelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.GroupByGrouping`2 */ 

(function GroupByGrouping$b2$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.GroupByGrouping`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TGroupKey", "TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm07.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TGroupKey")]), $asm07.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TElement")])])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTElement$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IGrouping$lTGroupKey$cmTElement$g.get_Key", 
      new JSIL.MethodSignature($.GenericParameter("TGroupKey"), null)
    )
      .Overrides($asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TGroupKey"), $.GenericParameter("TElement")]), "get_Key");

    $.Field({Static:false, Public:false}, "m_keyValues", $asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm07.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TGroupKey")]), $asm07.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TElement")])]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.IGrouping$lTGroupKey$cmTElement$g.Key", $.GenericParameter("TGroupKey"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TGroupKey"), $.GenericParameter("TElement")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedGroupByGrouping`3 */ 

(function OrderedGroupByGrouping$b3$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderedGroupByGrouping`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TGroupKey", "TOrderKey", "TElement"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TGroupKey"), $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TOrderKey")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TElement"), $.GenericParameter("TOrderKey")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoneAdding", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTElement$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Parallel.OrderedGroupByGrouping$b3_$lSystem$daCollections$daGeneric$daIEnumerable$lTElement$g$daGetEnumerator$gd__7.__Type__]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IGrouping$lTGroupKey$cmTElement$g.get_Key", 
      new JSIL.MethodSignature($.GenericParameter("TGroupKey"), null)
    )
      .Overrides($asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TGroupKey"), $.GenericParameter("TElement")]), "get_Key");

    $.Field({Static:false, Public:false}, "m_groupKey", $.GenericParameter("TGroupKey"));

    $.Field({Static:false, Public:false}, "m_values", $asm07.TypeRef("System.Linq.Parallel.GrowingArray`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "m_orderKeys", $asm07.TypeRef("System.Linq.Parallel.GrowingArray`1", [$.GenericParameter("TOrderKey")]));

    $.Field({Static:false, Public:false}, "m_orderComparer", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TOrderKey")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.IGrouping$lTGroupKey$cmTElement$g.Key", $.GenericParameter("TGroupKey"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TGroupKey"), $.GenericParameter("TElement")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedGroupByGrouping`3+<System-Collections-Generic-IEnumerable<TElement>-GetEnumerator>d__7 */ 

(function $lSystem$daCollections$daGeneric$daIEnumerable$lTElement$g$daGetEnumerator$gd__7$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderedGroupByGrouping`3+<System-Collections-Generic-IEnumerable<TElement>-GetEnumerator>d__7", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TGroupKey", "TOrderKey", "TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TElement"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TElement"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Linq.Parallel.OrderedGroupByGrouping`3", [
          $.GenericParameter("TGroupKey"), $.GenericParameter("TOrderKey"), 
          $.GenericParameter("TElement")
        ]));

    $.Field({Static:false, Public:false}, "$lvalueArray$g5__1", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "$li$g5__2", $.Int32);

    $.Field({Static:false, Public:false}, "$lvalueCount$g5__3", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.Current", $.GenericParameter("TElement"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), 
      /* 1 */ $asm02.TypeRef("System.IDisposable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.IndexedSelectQueryOperator`2 */ 

(function IndexedSelectQueryOperator$b2$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.IndexedSelectQueryOperator`2"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2")]), 
      Name: "System.Linq.Parallel.IndexedSelectQueryOperator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInput")]), $asm02.TypeRef("System.Func`3", [
            $.GenericParameter("TInput"), $.Int32, 
            $.GenericParameter("TOutput")
          ])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOutput")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitOrdinalIndexState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TOutput")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInput"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_selector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TInput"), $.Int32, 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false}, "m_prematureMerge", $.Boolean);

    $.Field({Static:false, Public:false}, "m_limitsParallelism", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IndexedSelectQueryOperator`2+IndexedSelectQueryOperatorEnumerator */ 

(function IndexedSelectQueryOperatorEnumerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2+IndexedSelectQueryOperatorEnumerator"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.IndexedSelectQueryOperator`2+IndexedSelectQueryOperatorEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.Int32]), $asm02.TypeRef("System.Func`3", [
            $.GenericParameter("TInput"), $.Int32, 
            $.GenericParameter("TOutput")
          ])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_selector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TInput"), $.Int32, 
          $.GenericParameter("TOutput")
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IndexedSelectQueryOperator`2+IndexedSelectQueryOperatorResults */ 

(function IndexedSelectQueryOperatorResults$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2+UnaryQueryOperatorResults", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.IndexedSelectQueryOperator`2+IndexedSelectQueryOperatorResults"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2+IndexedSelectQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.IndexedSelectQueryOperator`2+IndexedSelectQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInput")]), $asm07.TypeRef("System.Linq.Parallel.IndexedSelectQueryOperator`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")]), 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementsCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElement", 
      new JSIL.MethodSignature($.GenericParameter("TOutput"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewResults", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TOutput")]), [
          $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInput")]), $asm07.TypeRef("System.Linq.Parallel.IndexedSelectQueryOperator`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")]), 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "m_selectOp", $asm07.TypeRef("System.Linq.Parallel.IndexedSelectQueryOperator`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false}, "m_childCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IndexedWhereQueryOperator`1 */ 

(function IndexedWhereQueryOperator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1")]), 
      Name: "System.Linq.Parallel.IndexedWhereQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")]), $asm02.TypeRef("System.Func`3", [
            $.GenericParameter("TInputOutput"), $.Int32, 
            $.Boolean
          ])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitOrdinalIndexState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInputOutput")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]), 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false}, "m_predicate", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TInputOutput"), $.Int32, 
          $.Boolean
        ]));

    $.Field({Static:false, Public:false}, "m_prematureMerge", $.Boolean);

    $.Field({Static:false, Public:false}, "m_limitsParallelism", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IndexedWhereQueryOperator`1+IndexedWhereQueryOperatorEnumerator */ 

(function IndexedWhereQueryOperatorEnumerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1+IndexedWhereQueryOperatorEnumerator"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.IndexedWhereQueryOperator`1+IndexedWhereQueryOperatorEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.Int32]), $asm02.TypeRef("System.Func`3", [
              $.GenericParameter("TInputOutput"), $.Int32, 
              $.Boolean
            ]), 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TInputOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TInputOutput"), $.Int32, 
          $.Boolean
        ]));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_outputLoopCount", $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LastQueryOperator`1 */ 

(function LastQueryOperator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1")]), 
      Name: "System.Linq.Parallel.LastQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapHelper", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TSource")]), 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TSource")]), 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_prematureMergeNeeded", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LastQueryOperator`1+LastQueryOperatorEnumerator`1 */ 

(function LastQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1+LastQueryOperatorEnumerator`1"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.LastQueryOperator`1+LastQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey"], 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]), 
          $asm07.TypeRef("System.Linq.Parallel.LastQueryOperator`1+LastQueryOperatorState`1", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]), $asm02.TypeRef("System.Threading.CountdownEvent"), 
          $asm02.TypeRef("System.Threading.CancellationToken"), $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TSource")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_predicate", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "m_alreadySearched", $.Boolean);

    $.Field({Static:false, Public:false}, "m_partitionId", $.Int32);

    $.Field({Static:false, Public:false}, "m_operatorState", $asm07.TypeRef("System.Linq.Parallel.LastQueryOperator`1+LastQueryOperatorState`1", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_sharedBarrier", $asm02.TypeRef("System.Threading.CountdownEvent"));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_keyComparer", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LastQueryOperator`1+LastQueryOperatorState`1 */ 

(function LastQueryOperatorState$b1$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.LastQueryOperator`1+LastQueryOperatorState`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_key", $.GenericParameter("TKey"));

    $.Field({Static:false, Public:false}, "m_partitionId", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ReverseQueryOperator`1 */ 

(function ReverseQueryOperator$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1")]), 
      Name: "System.Linq.Parallel.ReverseQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TSource")]), 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ReverseQueryOperator`1+ReverseQueryOperatorEnumerator`1 */ 

(function ReverseQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1+ReverseQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.ReverseQueryOperator`1+ReverseQueryOperatorEnumerator`1")]), 
      Name: "System.Linq.Parallel.ReverseQueryOperator`1+ReverseQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]), $asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TSource")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TKey")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_buffer", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")])]));

    $.Field({Static:false, Public:false}, "m_bufferIndex", $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ReverseQueryOperator`1+ReverseQueryOperatorResults */ 

(function ReverseQueryOperatorResults$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2+UnaryQueryOperatorResults", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1+ReverseQueryOperatorResults"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1+ReverseQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.ReverseQueryOperator`1+ReverseQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), $asm07.TypeRef("System.Linq.Parallel.ReverseQueryOperator`1", [$.GenericParameter("TSource")]), 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementsCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElement", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewResults", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), [
          $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), $asm07.TypeRef("System.Linq.Parallel.ReverseQueryOperator`1", [$.GenericParameter("TSource")]), 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "m_count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SelectManyQueryOperator`3 */ 

(function SelectManyQueryOperator$b3$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.SelectManyQueryOperator`3"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3")]), 
      Name: "System.Linq.Parallel.SelectManyQueryOperator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TLeftInput")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TLeftInput"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TRightInput")])]), 
          $asm02.TypeRef("System.Func`3", [
              $.GenericParameter("TLeftInput"), $.Int32, 
              $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TRightInput")])
            ]), $asm02.TypeRef("System.Func`3", [
              $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
              $.GenericParameter("TOutput")
            ])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOutput")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitOrderIndex", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TOutput")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TLeftInput"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamIndexed", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TLeftInput"), $.Int32]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamNotIndexed", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TLeftInput"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightChildSelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TLeftInput"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TRightInput")])]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_indexedRightChildSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TLeftInput"), $.Int32, 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TRightInput")])
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultSelector", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false}, "m_prematureMerge", $.Boolean);

    $.Field({Static:false, Public:false}, "m_limitsParallelism", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SelectManyQueryOperator`3+IndexedSelectManyQueryOperatorEnumerator */ 

(function IndexedSelectManyQueryOperatorEnumerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3+IndexedSelectManyQueryOperatorEnumerator"), $asm07.TypeRef("System.Linq.Parallel.Pair`2", [$asm02.TypeRef("System.Int32"), $asm02.TypeRef("System.Int32")])]), 
      Name: "System.Linq.Parallel.SelectManyQueryOperator`3+IndexedSelectManyQueryOperatorEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TLeftInput"), $.Int32]), $asm07.TypeRef("System.Linq.Parallel.SelectManyQueryOperator`3", [
              $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
              $.GenericParameter("TOutput")
            ]), 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.Int32, $.Int32])])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftSource", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TLeftInput"), $.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_selectManyOperator", $asm07.TypeRef("System.Linq.Parallel.SelectManyQueryOperator`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false}, "m_currentRightSource", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TRightInput")]));

    $.Field({Static:false, Public:false}, "m_currentRightSourceAsOutput", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false}, "m_mutables", $asm07.TypeRef("System.Linq.Parallel.SelectManyQueryOperator`3+IndexedSelectManyQueryOperatorEnumerator+Mutables", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SelectManyQueryOperator`3+IndexedSelectManyQueryOperatorEnumerator+Mutables */ 

(function Mutables$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SelectManyQueryOperator`3+IndexedSelectManyQueryOperatorEnumerator+Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_currentRightSourceIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentLeftElement", $.GenericParameter("TLeftInput"));

    $.Field({Static:false, Public:false}, "m_currentLeftSourceIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_lhsCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SelectManyQueryOperator`3+SelectManyQueryOperatorEnumerator`1 */ 

(function SelectManyQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3+SelectManyQueryOperatorEnumerator`1"), $asm07.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.SelectManyQueryOperator`3+SelectManyQueryOperatorEnumerator`1"), $asm02.TypeRef("System.Int32")])]), 
      Name: "System.Linq.Parallel.SelectManyQueryOperator`3+SelectManyQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput", "TLeftKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TLeftKey")]), $asm07.TypeRef("System.Linq.Parallel.SelectManyQueryOperator`3", [
              $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
              $.GenericParameter("TOutput")
            ]), 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TLeftKey"), $.Int32])])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftSource", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TLeftKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_selectManyOperator", $asm07.TypeRef("System.Linq.Parallel.SelectManyQueryOperator`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ]));

    $.Field({Static:false, Public:false}, "m_currentRightSource", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TRightInput")]));

    $.Field({Static:false, Public:false}, "m_currentRightSourceAsOutput", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false}, "m_mutables", $asm07.TypeRef("System.Linq.Parallel.SelectManyQueryOperator`3+SelectManyQueryOperatorEnumerator`1+Mutables", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput"), $.GenericParameter("TLeftKey")
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SelectManyQueryOperator`3+SelectManyQueryOperatorEnumerator`1+Mutables */ 

(function Mutables$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SelectManyQueryOperator`3+SelectManyQueryOperatorEnumerator`1+Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput", "TLeftKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_currentRightSourceIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentLeftElement", $.GenericParameter("TLeftInput"));

    $.Field({Static:false, Public:false}, "m_currentLeftKey", $.GenericParameter("TLeftKey"));

    $.Field({Static:false, Public:false}, "m_lhsCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SelectQueryOperator`2 */ 

(function SelectQueryOperator$b2$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.SelectQueryOperator`2"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2")]), 
      Name: "System.Linq.Parallel.SelectQueryOperator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInput")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOutput")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TOutput")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInput"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")]), 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false}, "m_selector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SelectQueryOperator`2+SelectQueryOperatorEnumerator`1 */ 

(function SelectQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2+SelectQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.SelectQueryOperator`2+SelectQueryOperatorEnumerator`1")]), 
      Name: "System.Linq.Parallel.SelectQueryOperator`2+SelectQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput", "TKey"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TKey")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_selector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SelectQueryOperator`2+SelectQueryOperatorResults */ 

(function SelectQueryOperatorResults$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2+UnaryQueryOperatorResults", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.SelectQueryOperator`2+SelectQueryOperatorResults"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2+SelectQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.SelectQueryOperator`2+SelectQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInput")]), $asm07.TypeRef("System.Linq.Parallel.SelectQueryOperator`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")]), 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementsCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElement", 
      new JSIL.MethodSignature($.GenericParameter("TOutput"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewResults", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TOutput")]), [
          $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInput")]), $asm07.TypeRef("System.Linq.Parallel.SelectQueryOperator`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")]), 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "m_selector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")]));

    $.Field({Static:false, Public:false}, "m_childCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SingleQueryOperator`1 */ 

(function SingleQueryOperator$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1")]), 
      Name: "System.Linq.Parallel.SingleQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TSource")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TSource"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TSource")]), 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SingleQueryOperator`1+SingleQueryOperatorEnumerator`1 */ 

(function SingleQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1+SingleQueryOperatorEnumerator`1"), $asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.SingleQueryOperator`1+SingleQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]), 
          $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TSource")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_predicate", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "m_alreadySearched", $.Boolean);

    $.Field({Static:false, Public:false}, "m_yieldExtra", $.Boolean);

    $.Field({Static:false, Public:false}, "m_totalElementCount", $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SortQueryOperator`2 */ 

(function SortQueryOperator$b2$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2")]), 
      Name: "System.Linq.Parallel.SortQueryOperator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TSortKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")]), 
          $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TSortKey")]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KeyComparer", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TSortKey")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KeySelector", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInputOutput")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IOrderedEnumerable$lTInputOutput$g.CreateOrderedEnumerable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IOrderedEnumerable`1", [$.GenericParameter("TInputOutput")]), [
          $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), "!!0"]), $asm02.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"]), 
          $.Boolean
        ], ["TKey2"])
    )
      .Overrides($asm07.TypeRef("System.Linq.IOrderedEnumerable`1", [$.GenericParameter("TInputOutput")]), "CreateOrderedEnumerable");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]), 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keySelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TSortKey")]));

    $.Property({Static:false, Public:false}, "KeySelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")]));

    $.Property({Static:false, Public:false}, "KeyComparer", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TSortKey")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
      /* 2 */ $asm07.TypeRef("System.Linq.IOrderedEnumerable`1", [$.GenericParameter("TInputOutput")]), 
      /* 3 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SortQueryOperator`2+<>c__DisplayClass3_0`1 */ 

(function $l$gc__DisplayClass3_0$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SortQueryOperator`2+<>c__DisplayClass3_0`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TSortKey", "TKey2"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lSystem.Linq.IOrderedEnumerable$lTInputOutput$g.CreateOrderedEnumerable$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSortKey"), $.GenericParameter("TKey2")]), [$.GenericParameter("TInputOutput")])
    );

    $.Field({Static:false, Public:true }, "key2Selector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey2")]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Linq.Parallel.SortQueryOperator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.SortQueryOperatorResults`2 */ 

(function SortQueryOperatorResults$b2$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorResults`2")]), 
      Name: "System.Linq.Parallel.SortQueryOperatorResults`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TSortKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInputOutput")]), $asm07.TypeRef("System.Linq.Parallel.SortQueryOperator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")]), 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GivePartitionedStream", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")])])
    );

    $.Field({Static:false, Public:false}, "m_childQueryResults", $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_op", $asm07.TypeRef("System.Linq.Parallel.SortQueryOperator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")]));

    $.Field({Static:false, Public:false}, "m_settings", $asm07.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.Field({Static:false, Public:false}, "m_preferStriping", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SortQueryOperatorResults`2+ChildResultsRecipient */ 

(function ChildResultsRecipient$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SortQueryOperatorResults`2+ChildResultsRecipient", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TSortKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]), $asm07.TypeRef("System.Linq.Parallel.SortQueryOperator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")]), 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Receive", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!0"])], ["TKey"])
    );

    $.Field({Static:false, Public:false}, "m_outputRecipient", $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_op", $asm07.TypeRef("System.Linq.Parallel.SortQueryOperator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")]));

    $.Field({Static:false, Public:false}, "m_settings", $asm07.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SortQueryOperatorEnumerator`3 */ 

(function SortQueryOperatorEnumerator$b3$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperatorEnumerator`3")]), 
      Name: "System.Linq.Parallel.SortQueryOperatorEnumerator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TKey", "TSortKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")]), 
          $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TSortKey")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyComparer", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TSortKey")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TInputOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TSortKey")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keySelector", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TSortKey")]));

    $.Property({Static:false, Public:true }, "KeyComparer", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TSortKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.TakeOrSkipQueryOperator`1 */ 

(function TakeOrSkipQueryOperator$b1$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1"), new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1")]), 
      Name: "System.Linq.Parallel.TakeOrSkipQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TResult")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "OutputOrdinalIndexState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapHelper", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TResult"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TResult")]), 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TResult"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TResult")]), 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_count", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_take", $.Boolean);

    $.Field({Static:false, Public:false}, "m_prematureMerge", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.TakeOrSkipQueryOperator`1+TakeOrSkipQueryOperatorEnumerator`1 */ 

(function TakeOrSkipQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1+TakeOrSkipQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.TakeOrSkipQueryOperator`1+TakeOrSkipQueryOperatorEnumerator`1")]), 
      Name: "System.Linq.Parallel.TakeOrSkipQueryOperator`1+TakeOrSkipQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult", "TKey"], 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TResult"), $.GenericParameter("TKey")]), $.Boolean, 
          $asm07.TypeRef("System.Linq.Parallel.FixedMaxHeap`1", [$.GenericParameter("TKey")]), $asm02.TypeRef("System.Threading.CountdownEvent"), 
          $asm02.TypeRef("System.Threading.CancellationToken"), $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TResult")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TKey")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TResult"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_count", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_take", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sharedIndices", $asm07.TypeRef("System.Linq.Parallel.FixedMaxHeap`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sharedBarrier", $asm02.TypeRef("System.Threading.CountdownEvent"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_buffer", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TResult"), $.GenericParameter("TKey")])]));

    $.Field({Static:false, Public:false}, "m_bufferIndex", $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.TakeOrSkipQueryOperator`1+TakeOrSkipQueryOperatorResults */ 

(function TakeOrSkipQueryOperatorResults$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2+UnaryQueryOperatorResults", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1+TakeOrSkipQueryOperatorResults"), new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1+TakeOrSkipQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.TakeOrSkipQueryOperator`1+TakeOrSkipQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TResult")]), $asm07.TypeRef("System.Linq.Parallel.TakeOrSkipQueryOperator`1", [$.GenericParameter("TResult")]), 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementsCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElement", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewResults", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TResult")]), [
          $asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TResult")]), $asm07.TypeRef("System.Linq.Parallel.TakeOrSkipQueryOperator`1", [$.GenericParameter("TResult")]), 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "m_takeOrSkipOp", $asm07.TypeRef("System.Linq.Parallel.TakeOrSkipQueryOperator`1", [$.GenericParameter("TResult")]));

    $.Field({Static:false, Public:false}, "m_childCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1 */ 

(function TakeOrSkipWhileQueryOperator$b1$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1"), new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1")]), 
      Name: "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TResult"), $.Boolean]), 
          $asm02.TypeRef("System.Func`3", [
              $.GenericParameter("TResult"), $.Int32, 
              $.Boolean
            ]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitOrderIndexState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TResult")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapHelper", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TResult"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TResult")]), 
          $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TResult"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TResult")]), 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false}, "m_predicate", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TResult"), $.Boolean]));

    $.Field({Static:false, Public:false}, "m_indexedPredicate", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TResult"), $.Int32, 
          $.Boolean
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_take", $.Boolean);

    $.Field({Static:false, Public:false}, "m_prematureMerge", $.Boolean);

    $.Field({Static:false, Public:false}, "m_limitsParallelism", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1+TakeOrSkipWhileQueryOperatorEnumerator`1 */ 

(function TakeOrSkipWhileQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1+TakeOrSkipWhileQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1+TakeOrSkipWhileQueryOperatorEnumerator`1")]), 
      Name: "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1+TakeOrSkipWhileQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult", "TKey"], 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TResult"), $.GenericParameter("TKey")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TResult"), $.Boolean]), 
          $asm02.TypeRef("System.Func`3", [
              $.GenericParameter("TResult"), $.GenericParameter("TKey"), 
              $.Boolean
            ]), $.Boolean, 
          $asm07.TypeRef("System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1+OperatorState`1", [$.GenericParameter("TResult"), $.GenericParameter("TKey")]), $asm02.TypeRef("System.Threading.CountdownEvent"), 
          $asm02.TypeRef("System.Threading.CancellationToken"), $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TResult")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TKey")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TResult"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TResult"), $.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_indexedPredicate", $asm02.TypeRef("System.Func`3", [
          $.GenericParameter("TResult"), $.GenericParameter("TKey"), 
          $.Boolean
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_take", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_operatorState", $asm07.TypeRef("System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1+OperatorState`1", [$.GenericParameter("TResult"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sharedBarrier", $asm02.TypeRef("System.Threading.CountdownEvent"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_buffer", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TResult"), $.GenericParameter("TKey")])]));

    $.Field({Static:false, Public:false}, "m_bufferIndex", $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "m_updatesSeen", $.Int32);

    $.Field({Static:false, Public:false}, "m_currentLowKey", $.GenericParameter("TKey"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1+OperatorState`1 */ 

(function OperatorState$b1$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1+OperatorState`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult", "TKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_updatesDone", $asm02.TypeRef("System.Int32"));

    $.Field({Static:false, Public:false}, "m_currentLowKey", $.GenericParameter("TKey"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.WhereQueryOperator`1 */ 

(function WhereQueryOperator$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1")]), 
      Name: "System.Linq.Parallel.WhereQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")]), [$asm02.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInputOutput")]), [$asm07.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), "!!0"]), $asm07.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")]), 
          $.Boolean, $asm07.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false}, "m_predicate", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.Boolean]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.WhereQueryOperator`1+WhereQueryOperatorEnumerator`1 */ 

(function WhereQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1+WhereQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.WhereQueryOperator`1+WhereQueryOperatorEnumerator`1")]), 
      Name: "System.Linq.Parallel.WhereQueryOperator`1+WhereQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")]), $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.Boolean]), 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TInputOutput")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TKey")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm02.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.Boolean]));

    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "m_outputLoopCount", $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.CancellationState */ 

(function CancellationState$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.CancellationState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Threading.CancellationToken"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MergedCancellationToken", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Threading.CancellationToken"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowIfCanceled", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Threading.CancellationToken"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowWithStandardMessageIfCanceled", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Threading.CancellationToken"))
    );

    $.Field({Static:false, Public:false}, "InternalCancellationTokenSource", $asm02.TypeRef("System.Threading.CancellationTokenSource"));

    $.Field({Static:false, Public:false}, "ExternalCancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "MergedCancellationTokenSource", $asm02.TypeRef("System.Threading.CancellationTokenSource"));

    $.Field({Static:false, Public:false}, "TopLevelDisposedFlag", $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]));

    $.Constant({Static:true , Public:false}, "POLL_INTERVAL", $.Int32, 63);

    $.Property({Static:false, Public:false}, "MergedCancellationToken", $asm02.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryTask */ 

(function QueryTask$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.QueryTask", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseWork", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "RunAsynchronously", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Threading.Tasks.Task"), [$asm02.TypeRef("System.Threading.Tasks.TaskScheduler")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RunSynchronously", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Threading.Tasks.Task"), [$asm02.TypeRef("System.Threading.Tasks.TaskScheduler")])
    );

    $.ExternalMethod({Static:true , Public:false}, "RunTaskSynchronously", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Work", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_taskIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_groupState", $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState"));

    $.Field({Static:true , Public:false}, "s_runTaskSynchronouslyDelegate", $asm02.TypeRef("System.Action`1", [$.Object]), function ($pi) {
        return $asm02.System.Action$b1.Of($asm02.System.Object).New(null, null, new JSIL.MethodPointerInfo($thisType, "RunTaskSynchronously", JSIL.MethodSignature.Action($.Object), true, false));
      });

    $.Field({Static:true , Public:false}, "s_baseWorkDelegate", $asm02.TypeRef("System.Action`1", [$.Object]), function ($pi) {
        return $asm02.System.Action$b1.Of($asm02.System.Object).New($asm07.System.Linq.Parallel.QueryTask_$l$gc.$l$g9, null, new JSIL.MethodPointerInfo($asm07.System.Linq.Parallel.QueryTask_$l$gc, "$l_cctor$gb__10_0", JSIL.MethodSignature.Action($.Object), false, false));
      });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryTask+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.QueryTask+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__10_0", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.SpoolingTaskBase */ 

(function SpoolingTaskBase$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.QueryTask"), 
      Name: "System.Linq.Parallel.SpoolingTaskBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingFinally", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingWork", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Work", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderPreservingSpoolingTask`2 */ 

(function OrderPreservingSpoolingTask$b2$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.SpoolingTaskBase"), 
      Name: "System.Linq.Parallel.OrderPreservingSpoolingTask`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), 
          $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")])]), $asm07.TypeRef("System.Linq.Parallel.SortHelper`1", [$.GenericParameter("TInputOutput")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Spool", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")]), 
          $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")])]), $asm02.TypeRef("System.Threading.Tasks.TaskScheduler")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingWork", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_results", $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")])]));

    $.Field({Static:false, Public:false}, "m_sortHelper", $asm07.TypeRef("System.Linq.Parallel.SortHelper`1", [$.GenericParameter("TInputOutput")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderPreservingSpoolingTask`2+<>c__DisplayClass3_0 */ 

(function $l$gc__DisplayClass3_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderPreservingSpoolingTask`2+<>c__DisplayClass3_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lSpool$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "groupState", $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState"));

    $.Field({Static:false, Public:true }, "results", $asm07.TypeRef("System.Linq.Parallel.Shared`1", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")])]));

    $.Field({Static:false, Public:true }, "sortHelpers", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.SortHelper`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")])]));

    $.Field({Static:false, Public:true }, "taskScheduler", $asm02.TypeRef("System.Threading.Tasks.TaskScheduler"));

    $.Field({Static:false, Public:true }, "maxToRunInParallel", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.OrderPreservingPipeliningSpoolingTask`2 */ 

(function OrderPreservingPipeliningSpoolingTask$b2$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.SpoolingTaskBase"), 
      Name: "System.Linq.Parallel.OrderPreservingPipeliningSpoolingTask`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOutput", "TKey"], 
      MaximumConstructorArguments: 10, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TOutput"), $.GenericParameter("TKey")]), $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Collections.Generic.Queue`1", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TKey"), $.GenericParameter("TOutput")])])]), $.Object, 
          $asm02.TypeRef("System.Threading.Tasks.TaskScheduler"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Spool", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TOutput"), $.GenericParameter("TKey")]), 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Collections.Generic.Queue`1", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TKey"), $.GenericParameter("TOutput")])])]), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm02.TypeRef("System.Threading.Tasks.TaskScheduler"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingFinally", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingWork", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_taskGroupState", $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_taskScheduler", $asm02.TypeRef("System.Threading.Tasks.TaskScheduler"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partition", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TOutput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_consumerWaiting", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_producerWaiting", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_producerDone", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_buffers", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Collections.Generic.Queue`1", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TKey"), $.GenericParameter("TOutput")])])]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_bufferLock", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_autoBuffered", $.Boolean);

    $.Constant({Static:true , Public:false}, "PRODUCER_BUFFER_AUTO_SIZE", $.Int32, 16);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderPreservingPipeliningSpoolingTask`2+<>c__DisplayClass13_0 */ 

(function $l$gc__DisplayClass13_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderPreservingPipeliningSpoolingTask`2+<>c__DisplayClass13_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOutput", "TKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lSpool$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "partitions", $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TOutput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "groupState", $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState"));

    $.Field({Static:false, Public:true }, "consumerWaiting", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:true }, "producerWaiting", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:true }, "producerDone", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:true }, "buffers", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Collections.Generic.Queue`1", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TKey"), $.GenericParameter("TOutput")])])]));

    $.Field({Static:false, Public:true }, "bufferLocks", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:true }, "taskScheduler", $asm02.TypeRef("System.Threading.Tasks.TaskScheduler"));

    $.Field({Static:false, Public:true }, "autoBuffered", $.Boolean);

    $.Field({Static:false, Public:true }, "degreeOfParallelism", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.QueryLifecycle */ 

(function QueryLifecycle$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Linq.Parallel.QueryLifecycle", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "LogicalQueryExecutionBegin", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "LogicalQueryExecutionEnd", 
      JSIL.MethodSignature.Action($.Int32)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryTaskGroupState */ 

(function QueryTaskGroupState$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.QueryTaskGroupState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Parallel.CancellationState"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CancellationState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Parallel.CancellationState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAlreadyEnded", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_QueryId", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "QueryBegin", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Threading.Tasks.Task"))
    );

    $.ExternalMethod({Static:false, Public:false}, "QueryEnd", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "m_rootTask", $asm02.TypeRef("System.Threading.Tasks.Task"));

    $.Field({Static:false, Public:false}, "m_alreadyEnded", $.Int32);

    $.Field({Static:false, Public:false}, "m_cancellationState", $asm07.TypeRef("System.Linq.Parallel.CancellationState"));

    $.Field({Static:false, Public:false}, "m_queryId", $.Int32);

    $.Property({Static:false, Public:false}, "IsAlreadyEnded", $.Boolean);

    $.Property({Static:false, Public:false}, "CancellationState", $asm07.TypeRef("System.Linq.Parallel.CancellationState"));

    $.Property({Static:false, Public:false}, "QueryId", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Scheduling */ 

(function Scheduling$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Linq.Parallel.Scheduling", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultChunkSize", 
      new JSIL.MethodSignature($.Int32, null, ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultDegreeOfParallelism", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Constant({Static:true , Public:false}, "DefaultPreserveOrder", $.Boolean, false);

    $.Field({Static:true , Public:false}, "DefaultDegreeOfParallelism", $.Int32);

    $.Constant({Static:true , Public:false}, "DEFAULT_BOUNDED_BUFFER_CAPACITY", $.Int32, 512);

    $.Constant({Static:true , Public:false}, "DEFAULT_BYTES_PER_CHUNK", $.Int32, 512);

    $.Constant({Static:true , Public:false}, "ZOMBIED_PRODUCER_TIMEOUT", $.Int32, -1);

    $.Constant({Static:true , Public:false}, "MAX_SUPPORTED_DOP", $.Int32, 512);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SpoolingTask */ 

(function SpoolingTask$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.Linq.Parallel.SpoolingTask", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "SpoolForAll", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Threading.Tasks.TaskScheduler")
        ], ["TInputOutput", "TIgnoreKey"])
    );

    $.ExternalMethod({Static:true , Public:false}, "SpoolPipeline", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", ["!!0", "!!1"]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", ["!!0"])]), $asm02.TypeRef("System.Threading.Tasks.TaskScheduler")
        ], ["TInputOutput", "TIgnoreKey"])
    );

    $.ExternalMethod({Static:true , Public:false}, "SpoolStopAndGo", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", ["!!0", "!!1"]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.SynchronousChannel`1", ["!!0"])]), $asm02.TypeRef("System.Threading.Tasks.TaskScheduler")
        ], ["TInputOutput", "TIgnoreKey"])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SpoolingTask+<>c__DisplayClass0_0`2 */ 

(function $l$gc__DisplayClass0_0$b2$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SpoolingTask+<>c__DisplayClass0_0`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TIgnoreKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lSpoolStopAndGo$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "partitions", $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")]));

    $.Field({Static:false, Public:true }, "groupState", $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState"));

    $.Field({Static:false, Public:true }, "channels", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [$.GenericParameter("TInputOutput")])]));

    $.Field({Static:false, Public:true }, "taskScheduler", $asm02.TypeRef("System.Threading.Tasks.TaskScheduler"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.SpoolingTask+<>c__DisplayClass1_0`2 */ 

(function $l$gc__DisplayClass1_0$b2$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SpoolingTask+<>c__DisplayClass1_0`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TIgnoreKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lSpoolPipeline$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "groupState", $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState"));

    $.Field({Static:false, Public:true }, "partitions", $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")]));

    $.Field({Static:false, Public:true }, "channels", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [$.GenericParameter("TInputOutput")])]));

    $.Field({Static:false, Public:true }, "taskScheduler", $asm02.TypeRef("System.Threading.Tasks.TaskScheduler"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.SpoolingTask+<>c__DisplayClass2_0`2 */ 

(function $l$gc__DisplayClass2_0$b2$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SpoolingTask+<>c__DisplayClass2_0`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TIgnoreKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lSpoolForAll$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "partitions", $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")]));

    $.Field({Static:false, Public:true }, "groupState", $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState"));

    $.Field({Static:false, Public:true }, "taskScheduler", $asm02.TypeRef("System.Threading.Tasks.TaskScheduler"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.StopAndGoSpoolingTask`2 */ 

(function StopAndGoSpoolingTask$b2$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.SpoolingTaskBase"), 
      Name: "System.Linq.Parallel.StopAndGoSpoolingTask`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TIgnoreKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")]), $asm07.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [$.GenericParameter("TInputOutput")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingFinally", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingWork", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")]));

    $.Field({Static:false, Public:false}, "m_destination", $asm07.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [$.GenericParameter("TInputOutput")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PipelineSpoolingTask`2 */ 

(function PipelineSpoolingTask$b2$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.SpoolingTaskBase"), 
      Name: "System.Linq.Parallel.PipelineSpoolingTask`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TIgnoreKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")]), $asm07.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [$.GenericParameter("TInputOutput")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingFinally", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingWork", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")]));

    $.Field({Static:false, Public:false}, "m_destination", $asm07.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [$.GenericParameter("TInputOutput")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ForAllSpoolingTask`2 */ 

(function ForAllSpoolingTask$b2$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.SpoolingTaskBase"), 
      Name: "System.Linq.Parallel.ForAllSpoolingTask`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TIgnoreKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), 
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingFinally", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingWork", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.CancellableEnumerable */ 

(function CancellableEnumerable$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Linq.Parallel.CancellableEnumerable", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Wrap", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm02.TypeRef("System.Threading.CancellationToken")], ["TElement"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Parallel.CancellableEnumerable_$lWrap$gd__0$b1.__Type__]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.CancellableEnumerable+<Wrap>d__0`1 */ 

(function $lWrap$gd__0$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.CancellableEnumerable+<Wrap>d__0`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTElement$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TElement"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TElement"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "$lcount$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "token", $asm02.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:true }, "$l$g3__token", $asm02.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.Current", $.GenericParameter("TElement"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.ExceptionAggregator */ 

(function ExceptionAggregator$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("System.Linq.Parallel.ExceptionAggregator", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ThrowAnOCE", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Exception"), $asm07.TypeRef("System.Linq.Parallel.CancellationState")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowOCEorAggregateException", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Exception"), $asm07.TypeRef("System.Linq.Parallel.CancellationState")])
    );

    $.ExternalMethod({Static:true , Public:false}, "WrapEnumerable", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm07.TypeRef("System.Linq.Parallel.CancellationState")], ["TElement"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Parallel.ExceptionAggregator_$lWrapEnumerable$gd__0$b1.__Type__]; });

    $.ExternalMethod({Static:true , Public:false}, "WrapFunc", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), [$asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), $asm07.TypeRef("System.Linq.Parallel.CancellationState")], ["T", "U"])
    );

    $.ExternalMethod({Static:true , Public:false}, "WrapQueryEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", ["!!0", "!!1"]), $asm07.TypeRef("System.Linq.Parallel.CancellationState")], ["TElement", "TIgnoreKey"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Parallel.ExceptionAggregator_$lWrapQueryEnumerator$gd__1$b2.__Type__]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ExceptionAggregator+<WrapEnumerable>d__0`1 */ 

(function $lWrapEnumerable$gd__0$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ExceptionAggregator+<WrapEnumerable>d__0`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTElement$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TElement"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TElement"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "$lenumerator$g5__1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "cancellationState", $asm07.TypeRef("System.Linq.Parallel.CancellationState"));

    $.Field({Static:false, Public:true }, "$l$g3__cancellationState", $asm07.TypeRef("System.Linq.Parallel.CancellationState"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.Current", $.GenericParameter("TElement"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.ExceptionAggregator+<WrapQueryEnumerator>d__1`2 */ 

(function $lWrapQueryEnumerator$gd__1$b2$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ExceptionAggregator+<WrapQueryEnumerator>d__1`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement", "TIgnoreKey"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTElement$g.GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TElement"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TElement"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TElement"), $.GenericParameter("TIgnoreKey")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TElement"), $.GenericParameter("TIgnoreKey")]));

    $.Field({Static:false, Public:false}, "$lelem$g5__1", $.GenericParameter("TElement"));

    $.Field({Static:false, Public:false}, "$lignoreKey$g5__2", $.GenericParameter("TIgnoreKey"));

    $.Field({Static:false, Public:false}, "cancellationState", $asm07.TypeRef("System.Linq.Parallel.CancellationState"));

    $.Field({Static:false, Public:true }, "$l$g3__cancellationState", $asm07.TypeRef("System.Linq.Parallel.CancellationState"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.Current", $.GenericParameter("TElement"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), 
      /* 3 */ $asm02.TypeRef("System.IDisposable"), 
      /* 4 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.ExceptionAggregator+<>c__DisplayClass3_0`2 */ 

(function $l$gc__DisplayClass3_0$b2$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ExceptionAggregator+<>c__DisplayClass3_0`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T", "U"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lWrapFunc$gb__0", 
      new JSIL.MethodSignature($.GenericParameter("U"), [$.GenericParameter("T")])
    );

    $.Field({Static:false, Public:true }, "f", $asm02.TypeRef("System.Func`2", [$.GenericParameter("T"), $.GenericParameter("U")]));

    $.Field({Static:false, Public:true }, "cancellationState", $asm07.TypeRef("System.Linq.Parallel.CancellationState"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.ExchangeUtilities */ 

(function ExchangeUtilities$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("System.Linq.Parallel.ExchangeUtilities", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "HashRepartition", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", ["!!0", "!!1"]), $.Int32]), [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", ["!!0", "!!2"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"]), 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TElement", "THashKey", "TIgnoreKey"])
    );

    $.ExternalMethod({Static:true , Public:false}, "HashRepartitionOrdered", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", ["!!0", "!!1"]), "!!2"]), [
          $asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", ["!!0", "!!2"]), $asm02.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"]), $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"]), 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ], ["TElement", "THashKey", "TOrderKey"])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWorseThan", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"), $asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "PartitionDataSource", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", ["!!0", $.Int32]), [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32, 
          $.Boolean
        ], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "Worse", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [$asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"), $asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* struct System.Linq.Parallel.NoKeyMemoizationRequired */ 

(function NoKeyMemoizationRequired$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Linq.Parallel.NoKeyMemoizationRequired", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      SizeBytes: 1, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FixedMaxHeap`1 */ 

(function FixedMaxHeap$b1$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.FixedMaxHeap`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TElement")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MaxValue", 
      new JSIL.MethodSignature($.GenericParameter("TElement"), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "HeapifyLastLeaf", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "HeapifyRoot", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Insert", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveMax", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplaceMax", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Swap", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.Field({Static:false, Public:false}, "m_elements", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "m_count", $.Int32);

    $.Field({Static:false, Public:false}, "m_comparer", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TElement")]));

    $.Property({Static:false, Public:false}, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "Size", $.Int32);

    $.Property({Static:false, Public:false}, "MaxValue", $.GenericParameter("TElement"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.GrowingArray`1 */ 

(function GrowingArray$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.GrowingArray`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyFrom", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "GrowArray", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "m_array", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "m_count", $.Int32);

    $.Constant({Static:true , Public:false}, "DEFAULT_ARRAY_SIZE", $.Int32, 1024);

    $.Property({Static:false, Public:false}, "InternalArray", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:false}, "Count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.HashLookup`2 */ 

(function HashLookup$b2$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.HashLookup`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey"), $.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AreKeysEqual", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey"), $.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Find", 
      new JSIL.MethodSignature($.Boolean, [
          $.GenericParameter("TKey"), $.Boolean, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TValue")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetKeyHashCode", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Resize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey"), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TValue")])])
    );

    $.Field({Static:false, Public:false}, "buckets", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "slots", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.HashLookup`2+Slot", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "freeList", $.Int32);

    $.Field({Static:false, Public:false}, "comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Property({Static:false, Public:false}, "Item", $.GenericParameter("TValue"));

    $.Property({Static:false, Public:false}, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "Item", $asm02.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* struct System.Linq.Parallel.HashLookup`2+Slot */ 

(function Slot$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Linq.Parallel.HashLookup`2+Slot", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "hashCode", $.Int32);

    $.Field({Static:false, Public:false}, "key", $.GenericParameter("TKey"));

    $.Field({Static:false, Public:false}, "value", $.GenericParameter("TValue"));

    $.Field({Static:false, Public:false}, "next", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntValueEvent */ 

(function IntValueEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Threading.ManualResetEventSlim"), 
      Name: "System.Linq.Parallel.IntValueEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Set", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "Value", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ListChunk`1 */ 

(function ListChunk$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ListChunk`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TInputOutput")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Next", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TInputOutput")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TInputOutput")]), null)
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Parallel.ListChunk$b1_$lGetEnumerator$gd__10.__Type__]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "m_chunk", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_chunkCount", $.Int32);

    $.Field({Static:false, Public:false}, "m_nextChunk", $asm07.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "m_tailChunk", $asm07.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TInputOutput")]));

    $.Property({Static:false, Public:false}, "Next", $asm07.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TInputOutput")]));

    $.Property({Static:false, Public:false}, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInputOutput")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ListChunk`1+<GetEnumerator>d__10 */ 

(function $lGetEnumerator$gd__10$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ListChunk`1+<GetEnumerator>d__10", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTInputOutput$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TInputOutput"), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TInputOutput")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TInputOutput"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "$lcurr$g5__1", $asm07.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TInputOutput")]));

    $.Field({Static:false, Public:false}, "$li$g5__2", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTInputOutput$g.Current", $.GenericParameter("TInputOutput"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TInputOutput")]), 
      /* 1 */ $asm02.TypeRef("System.IDisposable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.Lookup`2 */ 

(function Lookup$b2$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.Lookup`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), null)
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Parallel.Lookup$b2_$lGetEnumerator$gd__10.__Type__]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "m_dict", $asm02.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("TKey"), $asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]));

    $.Field({Static:false, Public:false}, "m_comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_defaultKeyGrouping", $asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Linq.ILookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Linq.Parallel.Lookup`2+<GetEnumerator>d__10 */ 

(function $lGetEnumerator$gd__10$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.Lookup`2+<GetEnumerator>d__10", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.IGrouping$lTKey$cmTElement$g$g.get_Current", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]), null)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Linq.Parallel.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.IGrouping$lTKey$cmTElement$g$g.Current", $asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), 
      /* 1 */ $asm02.TypeRef("System.IDisposable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* struct System.Linq.Parallel.Pair`2 */ 

(function Pair$b2$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Linq.Parallel.Pair`2", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T", "U"], 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T"), $.GenericParameter("U")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_First", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Second", 
      new JSIL.MethodSignature($.GenericParameter("U"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_First", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Second", 
      new JSIL.MethodSignature(null, [$.GenericParameter("U")])
    );

    $.Field({Static:false, Public:false}, "m_first", $.GenericParameter("T"));

    $.Field({Static:false, Public:false}, "m_second", $.GenericParameter("U"));

    $.Property({Static:false, Public:true }, "First", $.GenericParameter("T"));

    $.Property({Static:false, Public:true }, "Second", $.GenericParameter("U"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PairComparer`2 */ 

(function PairComparer$b2$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.PairComparer`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T", "U"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("T")]), $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("U")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("T"), $.GenericParameter("U")]), $asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("T"), $.GenericParameter("U")])])
    );

    $.Field({Static:false, Public:false}, "m_comparer1", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "m_comparer2", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("U")]));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$asm07.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("T"), $.GenericParameter("U")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PlinqEtwProvider */ 

(function PlinqEtwProvider$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Diagnostics.Tracing.EventSource"), 
      Name: "System.Linq.Parallel.PlinqEtwProvider", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "NextQueryId", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.Tracing.NonEventAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ParallelQueryBegin", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.Tracing.NonEventAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ParallelQueryBegin", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [1]; });

    $.ExternalMethod({Static:false, Public:false}, "ParallelQueryEnd", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.Tracing.NonEventAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ParallelQueryEnd", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [2]; });

    $.ExternalMethod({Static:false, Public:false}, "ParallelQueryFork", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.Tracing.NonEventAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ParallelQueryFork", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [3]; });

    $.ExternalMethod({Static:false, Public:false}, "ParallelQueryJoin", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.Tracing.NonEventAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ParallelQueryJoin", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [4]; });

    $.Field({Static:true , Public:false}, "Log", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_defaultSchedulerId", $.Int32);

    $.Field({Static:true , Public:false}, "s_queryId", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "ALL_KEYWORDS", $asm02.TypeRef("System.Diagnostics.Tracing.EventKeywords"), -1);

    $.Constant({Static:true , Public:false}, "PARALLELQUERYBEGIN_EVENTID", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "PARALLELQUERYEND_EVENTID", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "PARALLELQUERYFORK_EVENTID", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "PARALLELQUERYJOIN_EVENTID", $.Int32, 4);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.Tracing.EventSourceAttribute"));

})();

/* class System.Linq.Parallel.PlinqEtwProvider+Tasks */ 

(function Tasks$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.PlinqEtwProvider+Tasks", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:true }, "Query", $asm02.TypeRef("System.Diagnostics.Tracing.EventTask"), 1);

    $.Constant({Static:true , Public:true }, "ForkJoin", $asm02.TypeRef("System.Diagnostics.Tracing.EventTask"), 2);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ReverseComparer`1 */ 

(function ReverseComparer$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ReverseComparer`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T"), $.GenericParameter("T")])
    );

    $.Field({Static:false, Public:false}, "m_comparer", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("T")]));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("T")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Shared`1 */ 

(function Shared$b1$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.Shared`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.Field({Static:false, Public:false}, "Value", $.GenericParameter("T"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SortHelper`1 */ 

(function SortHelper$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SortHelper`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Sort", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")]), null)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SortHelper`2 */ 

(function SortHelper$b2$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Parallel.SortHelper`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortHelper`2")]), 
      Name: "System.Linq.Parallel.SortHelper`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TKey"], 
      MaximumConstructorArguments: 10, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")]), $.Int32, 
          $.Int32, $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), 
          $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Int32])]), $asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"), 
          $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.GrowingArray`1", [$.GenericParameter("TKey")])]), 
          $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")])]), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Threading.Barrier"), JSIL.ArrayDimensionParameter(2)])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildKeysFromSource", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Linq.Parallel.GrowingArray`1", [$.GenericParameter("TKey")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TInputOutput")])])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputePartnerIndex", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateSortHelpers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.SortHelper`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")])]), [$asm07.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")]), $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MergeSortCooperatively", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "QuickSort", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.GenericParameter("TKey")]), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $asm02.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "QuickSortIndicesInPlace", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Parallel.GrowingArray`1", [$.GenericParameter("TKey")]), $asm02.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TInputOutput")]), 
          $asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Sort", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")]), null)
    );

    $.Field({Static:false, Public:false}, "m_source", $asm07.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "m_partitionCount", $.Int32);

    $.Field({Static:false, Public:false}, "m_partitionIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_groupState", $asm07.TypeRef("System.Linq.Parallel.QueryTaskGroupState"));

    $.Field({Static:false, Public:false}, "m_sharedIndices", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Int32])]));

    $.Field({Static:false, Public:false}, "m_sharedKeys", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Parallel.GrowingArray`1", [$.GenericParameter("TKey")])]));

    $.Field({Static:false, Public:false}, "m_sharedValues", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")])]));

    $.Field({Static:false, Public:false}, "m_sharedBarriers", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Threading.Barrier"), JSIL.ArrayDimensionParameter(2)]));

    $.Field({Static:false, Public:false}, "m_indexState", $asm07.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.Field({Static:false, Public:false}, "m_keyComparer", $asm02.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.TraceHelpers */ 

(function TraceHelpers$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("System.Linq.Parallel.TraceHelpers", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "NotYetImplemented", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "NotYetImplemented", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "NotYetImplemented", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetVerbose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["PFXTRACE"]; });

    $.ExternalMethod({Static:true , Public:false}, "TraceError", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["PFXTRACE"]; })
      .Parameter(1, "args", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "TraceInfo", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["PFXTRACE"]; })
      .Parameter(1, "args", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "TraceWarning", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["PFXTRACE"]; })
      .Parameter(1, "args", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Util */ 

(function Util$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Linq.Parallel.Util", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultComparer", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.Comparer`1", ["!!0"]), null, ["TKey"])
    );

    $.ExternalMethod({Static:true , Public:false}, "Sign", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.Field({Static:true , Public:false}, "s_fastIntComparer", $asm07.TypeRef("System.Linq.Parallel.Util+FastIntComparer"));

    $.Field({Static:true , Public:false}, "s_fastLongComparer", $asm07.TypeRef("System.Linq.Parallel.Util+FastLongComparer"));

    $.Field({Static:true , Public:false}, "s_fastFloatComparer", $asm07.TypeRef("System.Linq.Parallel.Util+FastFloatComparer"));

    $.Field({Static:true , Public:false}, "s_fastDoubleComparer", $asm07.TypeRef("System.Linq.Parallel.Util+FastDoubleComparer"));

    $.Field({Static:true , Public:false}, "s_fastDateTimeComparer", $asm07.TypeRef("System.Linq.Parallel.Util+FastDateTimeComparer"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Util+FastIntComparer */ 

(function FastIntComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Collections.Generic.Comparer`1", [$asm02.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.Util+FastIntComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Util+FastLongComparer */ 

(function FastLongComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Collections.Generic.Comparer`1", [$asm02.TypeRef("System.Int64")]), 
      Name: "System.Linq.Parallel.Util+FastLongComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int64, $.Int64])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Util+FastFloatComparer */ 

(function FastFloatComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Collections.Generic.Comparer`1", [$asm02.TypeRef("System.Single")]), 
      Name: "System.Linq.Parallel.Util+FastFloatComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Single, $.Single])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Util+FastDoubleComparer */ 

(function FastDoubleComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Collections.Generic.Comparer`1", [$asm02.TypeRef("System.Double")]), 
      Name: "System.Linq.Parallel.Util+FastDoubleComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Double, $.Double])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Util+FastDateTimeComparer */ 

(function FastDateTimeComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Collections.Generic.Comparer`1", [$asm02.TypeRef("System.DateTime")]), 
      Name: "System.Linq.Parallel.Util+FastDateTimeComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm02.TypeRef("System.DateTime"), $asm02.TypeRef("System.DateTime")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Parallel.Wrapper`1 */ 

(function Wrapper$b1$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Linq.Parallel.Wrapper`1", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.Field({Static:false, Public:false}, "Value", $.GenericParameter("T"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Parallel.WrapperEqualityComparer`1 */ 

(function WrapperEqualityComparer$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Linq.Parallel.WrapperEqualityComparer`1", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("T")]), $asm07.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("T")])])
    );

    $.Field({Static:false, Public:false}, "m_comparer", $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")]));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm07.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("T")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ReadOnlyCollectionExtensions */ 

(function ReadOnlyCollectionExtensions$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Linq.Expressions.ReadOnlyCollectionExtensions", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ToReadOnlyCollection", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Linq.Expressions.ReadOnlyCollectionExtensions+DefaultReadOnlyCollection`1 */ 

(function DefaultReadOnlyCollection$b1$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Linq.Expressions.ReadOnlyCollectionExtensions+DefaultReadOnlyCollection`1", false, ["T"], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_Empty", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.GenericParameter("T")]), null)
    );

    $.Field({Static:true , Public:false}, "_defaultCollection", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1"));

    $.GenericProperty({Static:true , Public:false}, "Empty", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Strings */ 

(function Strings$Members () {
  var $, $thisType;

























































































































































































  JSIL.MakeStaticClass("System.Linq.Expressions.Strings", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AmbiguousJump", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "AmbiguousMatchInExpandoObject", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMemberNotDeclOnType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentTypeDoesNotMatchMember", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "BinaryOperatorNotDefined", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "BinderNotCompatibleWithCallSite", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotAutoInitializeValueTypeElementThroughProperty", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotAutoInitializeValueTypeMemberThroughProperty", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotCloseOverByRef", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotCompileConstant", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CoercionOperatorNotDefined", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "DuplicateVariable", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "DynamicBinderResultNotAssignable", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DynamicBindingNeedsRestrictions", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "DynamicObjectResultNotAssignable", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodNoRefOutParam", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "EqualityMustReturnBoolean", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeCannotInitializeArrayType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchAssignment", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchConstructorParameter", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchLabel", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchMethodParameter", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchParameter", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchReturn", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeNotInvocable", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExtensionNodeMustOverrideProperty", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "FieldInfoNotDefinedForType", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FieldNotDefinedForType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenericMethodWithArgsDoesNotExistOnType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AccessorsCannotHaveByRefArgs", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AccessorsCannotHaveVarArgs", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AllCaseBodiesMustHaveSameType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AllTestValuesMustHaveSameType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgCntMustBeGreaterThanNameCnt", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentCannotBeOfTypeVoid", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeArray", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeArrayIndexType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeBoolean", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeFieldInfoOrPropertInfo", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeFieldInfoOrPropertInfoOrMethod", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeInstanceMember", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeInteger", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeSingleDimensionalArrayType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustNotHaveValueType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentTypeCannotBeVoid", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentTypesMustMatch", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArrayTypeMustBeArray", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BindingCannotBeNull", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BodyOfCatchMustHaveSameTypeAsBodyOfTry", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BothAccessorsMustBeStatic", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BoundsCannotBeLessThanOne", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CannotCompileDynamic", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CoalesceUsedOnNonNullType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CollectionModifiedWhileEnumerating", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CollectionReadOnly", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ControlCannotEnterExpression", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ControlCannotEnterTry", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ControlCannotLeaveFilterTest", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ControlCannotLeaveFinally", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ConversionIsNotSupportedForArithmeticTypes", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CountCannotBeNegative", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultBodyMustBeSupplied", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ElementInitializerMethodNotAdd", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ElementInitializerMethodStatic", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ElementInitializerMethodWithZeroArgs", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EnumerationIsDone", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ExpressionMustBeReadable", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ExpressionMustBeWriteable", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ExtensionNotReduced", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_FaultCannotHaveCatchOrFinally", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_FirstArgumentMustBeCallSite", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_HomogenousAppDomainRequired", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfArgumentsForMembers", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfConstructorArguments", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfIndexes", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfLambdaArguments", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfLambdaDeclarationParameters", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfMembersForGivenConstructor", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfTypeArgsForAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfTypeArgsForFunc", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IndexesOfSetGetMustMatch", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidArgumentValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidAsmNameOrExtension", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidOutputDir", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidUnboxType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LabelMustBeVoidOrHaveExpression", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LabelTypeMustBeVoid", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LambdaTypeMustBeDerivedFromSystemDelegate", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ListInitializerWithZeroMembers", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MethodBuilderDoesNotHaveTypeBuilder", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MethodPreconditionViolated", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MustBeReducible", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MustReduceToDifferent", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NonEmptyCollectionRequired", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoOrInvalidRuleProduced", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OnlyStaticFieldsHaveNullInstance", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OnlyStaticMethodsHaveNullInstance", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OnlyStaticPropertiesHaveNullInstance", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PdbGeneratorNeedsExpressionCompiler", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PropertyCannotHaveRefType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PropertyTyepMustMatchSetter", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PropertyTypeCannotBeVoid", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_QueueEmpty", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_QuotedExpressionMustBeLambda", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ReducedNotCompatible", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ReducibleMustOverrideReduce", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_RethrowRequiresCatch", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SetterHasNoParams", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SetterMustBeVoid", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_StartEndMustBeOrdered", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TryMustHaveCatchFinallyOrFault", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TryNotAllowedInFilter", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TypeDoesNotHaveConstructorForTheSignature", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TypeMustBeDerivedFromSystemDelegate", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TypeMustNotBeByRef", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnexpectedCoalesceOperator", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnhandledBinding", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnknownBindingType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "IllegalNewGenericParams", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfMethodCallArguments", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectTypeForTypeAs", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstanceAndMethodTypeMismatch", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstanceFieldNotDefinedForType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstancePropertyNotDefinedForType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstancePropertyWithoutParameterNotDefinedForType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstancePropertyWithSpecifiedParametersNotDefinedForType", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCast", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidLvalue", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMemberType", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMetaObjectCreated", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidNullValue", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidObjectType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidOperation", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "KeyDoesNotExistInExpando", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "LabelTargetAlreadyDefined", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "LabelTargetUndefined", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "LogicalOperatorMustHaveBooleanOperators", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MemberNotFieldOrProperty", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodContainsGenericParameters", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodDoesNotExistOnType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodIsGeneric", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodNotPropertyAccessor", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodWithArgsDoesNotExistOnType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodWithMoreThanOneMatch", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustRewriteChildToSameType", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustRewriteToSameNode", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustRewriteWithoutMethod", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NonLocalJumpWithValue", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotAMemberOfType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "OperandTypesDoNotMatchParameters", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "OperatorNotImplementedForType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "OutOfRange", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "OverloadOperatorTypeDoesNotMatchConversionType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterExpressionNotValidAsDelegate", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveAccessor", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveGetter", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveSetter", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyNotDefinedForType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyWithMoreThanOneMatch", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReferenceEqualityNotDefined", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "SameKeyExistsInExpando", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "SwitchValueTypeDoesNotMatchComparisonMethodParameter", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TestValueTypeDoesNotMatchComparisonMethodParameter", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryNotSupportedForMethodsWithRefArgs", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryNotSupportedForValueTypeInstances", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeContainsGenericParameters", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeIsGeneric", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeMissingDefaultConstructor", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeNotIEnumerable", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeParameterIsNotDelegate", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnaryOperatorNotDefined", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UndefinedVariable", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnexpectedVarArgsCall", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledBinary", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledBindingType", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledConvert", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledExpressionType", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledUnary", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnknownLiftType", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOperatorMustBeStatic", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOperatorMustNotBeVoid", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOpMustHaveConsistentTypes", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOpMustHaveValidReturnType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "VariableMustNotBeByRef", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.Property({Static:true , Public:false}, "MethodPreconditionViolated", $.String);

    $.Property({Static:true , Public:false}, "InvalidArgumentValue", $.String);

    $.Property({Static:true , Public:false}, "NonEmptyCollectionRequired", $.String);

    $.Property({Static:true , Public:false}, "ArgCntMustBeGreaterThanNameCnt", $.String);

    $.Property({Static:true , Public:false}, "ReducibleMustOverrideReduce", $.String);

    $.Property({Static:true , Public:false}, "MustReduceToDifferent", $.String);

    $.Property({Static:true , Public:false}, "ReducedNotCompatible", $.String);

    $.Property({Static:true , Public:false}, "SetterHasNoParams", $.String);

    $.Property({Static:true , Public:false}, "PropertyCannotHaveRefType", $.String);

    $.Property({Static:true , Public:false}, "IndexesOfSetGetMustMatch", $.String);

    $.Property({Static:true , Public:false}, "AccessorsCannotHaveVarArgs", $.String);

    $.Property({Static:true , Public:false}, "AccessorsCannotHaveByRefArgs", $.String);

    $.Property({Static:true , Public:false}, "BoundsCannotBeLessThanOne", $.String);

    $.Property({Static:true , Public:false}, "TypeMustNotBeByRef", $.String);

    $.Property({Static:true , Public:false}, "TypeDoesNotHaveConstructorForTheSignature", $.String);

    $.Property({Static:true , Public:false}, "CountCannotBeNegative", $.String);

    $.Property({Static:true , Public:false}, "ArrayTypeMustBeArray", $.String);

    $.Property({Static:true , Public:false}, "SetterMustBeVoid", $.String);

    $.Property({Static:true , Public:false}, "PropertyTyepMustMatchSetter", $.String);

    $.Property({Static:true , Public:false}, "BothAccessorsMustBeStatic", $.String);

    $.Property({Static:true , Public:false}, "OnlyStaticFieldsHaveNullInstance", $.String);

    $.Property({Static:true , Public:false}, "OnlyStaticPropertiesHaveNullInstance", $.String);

    $.Property({Static:true , Public:false}, "OnlyStaticMethodsHaveNullInstance", $.String);

    $.Property({Static:true , Public:false}, "PropertyTypeCannotBeVoid", $.String);

    $.Property({Static:true , Public:false}, "InvalidUnboxType", $.String);

    $.Property({Static:true , Public:false}, "ExpressionMustBeReadable", $.String);

    $.Property({Static:true , Public:false}, "ExpressionMustBeWriteable", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustNotHaveValueType", $.String);

    $.Property({Static:true , Public:false}, "MustBeReducible", $.String);

    $.Property({Static:true , Public:false}, "AllTestValuesMustHaveSameType", $.String);

    $.Property({Static:true , Public:false}, "AllCaseBodiesMustHaveSameType", $.String);

    $.Property({Static:true , Public:false}, "DefaultBodyMustBeSupplied", $.String);

    $.Property({Static:true , Public:false}, "MethodBuilderDoesNotHaveTypeBuilder", $.String);

    $.Property({Static:true , Public:false}, "TypeMustBeDerivedFromSystemDelegate", $.String);

    $.Property({Static:true , Public:false}, "ArgumentTypeCannotBeVoid", $.String);

    $.Property({Static:true , Public:false}, "LabelMustBeVoidOrHaveExpression", $.String);

    $.Property({Static:true , Public:false}, "LabelTypeMustBeVoid", $.String);

    $.Property({Static:true , Public:false}, "QuotedExpressionMustBeLambda", $.String);

    $.Property({Static:true , Public:false}, "StartEndMustBeOrdered", $.String);

    $.Property({Static:true , Public:false}, "FaultCannotHaveCatchOrFinally", $.String);

    $.Property({Static:true , Public:false}, "TryMustHaveCatchFinallyOrFault", $.String);

    $.Property({Static:true , Public:false}, "BodyOfCatchMustHaveSameTypeAsBodyOfTry", $.String);

    $.Property({Static:true , Public:false}, "ConversionIsNotSupportedForArithmeticTypes", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeArray", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeBoolean", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfo", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfoOrMethod", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeInstanceMember", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeInteger", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeArrayIndexType", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeSingleDimensionalArrayType", $.String);

    $.Property({Static:true , Public:false}, "ArgumentTypesMustMatch", $.String);

    $.Property({Static:true , Public:false}, "CoalesceUsedOnNonNullType", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfIndexes", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfLambdaArguments", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfLambdaDeclarationParameters", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfConstructorArguments", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfMembersForGivenConstructor", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfArgumentsForMembers", $.String);

    $.Property({Static:true , Public:false}, "LambdaTypeMustBeDerivedFromSystemDelegate", $.String);

    $.Property({Static:true , Public:false}, "ListInitializerWithZeroMembers", $.String);

    $.Property({Static:true , Public:false}, "ElementInitializerMethodNotAdd", $.String);

    $.Property({Static:true , Public:false}, "ElementInitializerMethodWithZeroArgs", $.String);

    $.Property({Static:true , Public:false}, "ElementInitializerMethodStatic", $.String);

    $.Property({Static:true , Public:false}, "UnexpectedCoalesceOperator", $.String);

    $.Property({Static:true , Public:false}, "UnhandledBinding", $.String);

    $.Property({Static:true , Public:false}, "UnknownBindingType", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForFunc", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForAction", $.String);

    $.Property({Static:true , Public:false}, "ArgumentCannotBeOfTypeVoid", $.String);

    $.Property({Static:true , Public:false}, "NoOrInvalidRuleProduced", $.String);

    $.Property({Static:true , Public:false}, "FirstArgumentMustBeCallSite", $.String);

    $.Property({Static:true , Public:false}, "BindingCannotBeNull", $.String);

    $.Property({Static:true , Public:false}, "QueueEmpty", $.String);

    $.Property({Static:true , Public:false}, "ControlCannotLeaveFinally", $.String);

    $.Property({Static:true , Public:false}, "ControlCannotLeaveFilterTest", $.String);

    $.Property({Static:true , Public:false}, "ControlCannotEnterTry", $.String);

    $.Property({Static:true , Public:false}, "ControlCannotEnterExpression", $.String);

    $.Property({Static:true , Public:false}, "ExtensionNotReduced", $.String);

    $.Property({Static:true , Public:false}, "CannotCompileDynamic", $.String);

    $.Property({Static:true , Public:false}, "InvalidOutputDir", $.String);

    $.Property({Static:true , Public:false}, "InvalidAsmNameOrExtension", $.String);

    $.Property({Static:true , Public:false}, "CollectionReadOnly", $.String);

    $.Property({Static:true , Public:false}, "RethrowRequiresCatch", $.String);

    $.Property({Static:true , Public:false}, "TryNotAllowedInFilter", $.String);

    $.Property({Static:true , Public:false}, "CollectionModifiedWhileEnumerating", $.String);

    $.Property({Static:true , Public:false}, "EnumerationIsDone", $.String);

    $.Property({Static:true , Public:false}, "HomogenousAppDomainRequired", $.String);

    $.Property({Static:true , Public:false}, "PdbGeneratorNeedsExpressionCompiler", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Error */ 

(function Error$Members () {
  var $, $thisType;


















































































































































































  JSIL.MakeStaticClass("System.Linq.Expressions.Error", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AccessorsCannotHaveByRefArgs", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "AccessorsCannotHaveVarArgs", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "AmbiguousJump", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "AmbiguousMatchInExpandoObject", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgCntMustBeGreaterThanNameCnt", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentCannotBeOfTypeVoid", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMemberNotDeclOnType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeArray", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeArrayIndexType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeBoolean", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfo", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfoOrMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeInstanceMember", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeInteger", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeSingleDimensionalArrayType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustNotHaveValueType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNull", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentOutOfRange", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentTypeCannotBeVoid", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentTypeDoesNotMatchMember", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentTypesMustMatch", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArrayTypeMustBeArray", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BinaryOperatorNotDefined", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "BinderNotCompatibleWithCallSite", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "BindingCannotBeNull", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BodyOfCatchMustHaveSameTypeAsBodyOfTry", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BothAccessorsMustBeStatic", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BoundsCannotBeLessThanOne", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotAutoInitializeValueTypeElementThroughProperty", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotAutoInitializeValueTypeMemberThroughProperty", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotCloseOverByRef", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotCompileConstant", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotCompileDynamic", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CoalesceUsedOnNonNullType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CoercionOperatorNotDefined", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CollectionModifiedWhileEnumerating", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CollectionReadOnly", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ControlCannotEnterExpression", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ControlCannotEnterTry", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ControlCannotLeaveFilterTest", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ControlCannotLeaveFinally", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ConversionIsNotSupportedForArithmeticTypes", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CountCannotBeNegative", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "DefaultBodyMustBeSupplied", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "DuplicateVariable", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "DynamicBinderResultNotAssignable", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DynamicBindingNeedsRestrictions", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "DynamicObjectResultNotAssignable", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodNoRefOutParam", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodNotAdd", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodStatic", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodWithZeroArgs", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "EnumerationIsDone", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "EqualityMustReturnBoolean", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeCannotInitializeArrayType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchAssignment", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchConstructorParameter", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchLabel", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchMethodParameter", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchParameter", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchReturn", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeNotInvocable", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExtensionNodeMustOverrideProperty", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExtensionNotReduced", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "FaultCannotHaveCatchOrFinally", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "FieldInfoNotDefinedForType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FieldNotDefinedForType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "FirstArgumentMustBeCallSite", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GenericMethodWithArgsDoesNotExistOnType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "HomogenousAppDomainRequired", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IllegalNewGenericParams", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfArgumentsForMembers", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfConstructorArguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfIndexes", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfLambdaArguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfLambdaDeclarationParameters", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfMembersForGivenConstructor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfMethodCallArguments", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForAction", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForFunc", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectTypeForTypeAs", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "IndexesOfSetGetMustMatch", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InstanceAndMethodTypeMismatch", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstanceFieldNotDefinedForType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstancePropertyNotDefinedForType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstancePropertyWithoutParameterNotDefinedForType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstancePropertyWithSpecifiedParametersNotDefinedForType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidAsmNameOrExtension", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCast", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidLvalue", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMemberType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMetaObjectCreated", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidOperation", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidOutputDir", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidUnboxType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "KeyDoesNotExistInExpando", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "LabelMustBeVoidOrHaveExpression", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "LabelTargetAlreadyDefined", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "LabelTargetUndefined", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "LabelTypeMustBeVoid", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "LambdaTypeMustBeDerivedFromSystemDelegate", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ListInitializerWithZeroMembers", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "LogicalOperatorMustHaveBooleanOperators", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MemberNotFieldOrProperty", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodBuilderDoesNotHaveTypeBuilder", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodContainsGenericParameters", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodDoesNotExistOnType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodIsGeneric", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodNotPropertyAccessor", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodWithArgsDoesNotExistOnType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodWithMoreThanOneMatch", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustBeReducible", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MustReduceToDifferent", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MustRewriteChildToSameType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustRewriteToSameNode", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustRewriteWithoutMethod", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NonLocalJumpWithValue", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoOrInvalidRuleProduced", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NotAMemberOfType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotImplemented", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSupported", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "OnlyStaticMethodsHaveNullInstance", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "OperandTypesDoNotMatchParameters", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "OperatorNotImplementedForType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "OutOfRange", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "OverloadOperatorTypeDoesNotMatchConversionType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterExpressionNotValidAsDelegate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "PdbGeneratorNeedsExpressionCompiler", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyCannotHaveRefType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveAccessor", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveGetter", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveSetter", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyNotDefinedForType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyTyepMustMatchSetter", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyTypeCannotBeVoid", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyWithMoreThanOneMatch", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "QueueEmpty", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "QuotedExpressionMustBeLambda", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ReducedNotCompatible", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ReducibleMustOverrideReduce", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ReferenceEqualityNotDefined", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "RethrowRequiresCatch", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SameKeyExistsInExpando", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetterHasNoParams", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SetterMustBeVoid", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "StartEndMustBeOrdered", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SwitchValueTypeDoesNotMatchComparisonMethodParameter", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TestValueTypeDoesNotMatchComparisonMethodParameter", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryMustHaveCatchFinallyOrFault", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TryNotAllowedInFilter", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TryNotSupportedForMethodsWithRefArgs", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryNotSupportedForValueTypeInstances", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeContainsGenericParameters", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeDoesNotHaveConstructorForTheSignature", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeIsGeneric", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeMissingDefaultConstructor", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeMustBeDerivedFromSystemDelegate", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeMustNotBeByRef", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeNotIEnumerable", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeParameterIsNotDelegate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnaryOperatorNotDefined", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UndefinedVariable", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnexpectedCoalesceOperator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "UnexpectedVarArgsCall", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledBinary", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledBinding", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledBindingType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledConvert", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledExpressionType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledUnary", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnknownBindingType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "UnknownLiftType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOperatorMustBeStatic", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOperatorMustNotBeVoid", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOpMustHaveConsistentTypes", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOpMustHaveValidReturnType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "VariableMustNotBeByRef", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Exception"), [$.Object, $.Object])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression */ 

(function Expression$Members () {
  var $, $thisType;















































































































































































































































































































































































































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $asm02.TypeRef("System.Type")])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["use a different constructor that does not take ExpressionType. Then override NodeType and Type properties to provide the values that would be specified to this constructor."]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AddAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AddAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AddAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AddAssignChecked", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AddAssignChecked", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AddAssignChecked", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AddChecked", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AddChecked", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "And", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "And", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AndAlso", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AndAlso", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AndAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AndAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AndAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ApplyTypeArgs", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.MethodInfo"), [$asm02.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "ArrayAccess", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.IndexExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(1, "indexes", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "ArrayAccess", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.IndexExpression"), [$.Type, $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ArrayIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ArrayIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(1, "indexes", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "ArrayIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$.Type, $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ArrayLength", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Assign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Bind", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm02.TypeRef("System.Reflection.MemberInfo"), $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Bind", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm02.TypeRef("System.Reflection.MethodInfo"), $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BlockExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BlockExpression"), [
          $.Type, $.Type, 
          $.Type
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BlockExpression"), [
          $.Type, $.Type, 
          $.Type, $.Type
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BlockExpression"), [
          $.Type, $.Type, 
          $.Type, $.Type, 
          $.Type
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BlockExpression"), [$jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(0, "expressions", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm02.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(1, "expressions", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(1, "expressions", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BlockExpression"), [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(2, "expressions", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BlockExpression"), [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Break", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm07.TypeRef("System.Linq.Expressions.LabelTarget")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Break", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm07.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Break", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm07.TypeRef("System.Linq.Expressions.LabelTarget"), $asm02.TypeRef("System.Type")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Break", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.GotoExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type, 
          $asm02.TypeRef("System.Type")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm02.TypeRef("System.Reflection.MethodInfo"), $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $asm02.TypeRef("System.Reflection.MethodInfo"), $.Type, 
          $.Type
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $asm02.TypeRef("System.Reflection.MethodInfo"), $.Type, 
          $.Type, $.Type
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $asm02.TypeRef("System.Reflection.MethodInfo"), $.Type, 
          $.Type, $.Type, 
          $.Type
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $asm02.TypeRef("System.Reflection.MethodInfo"), $.Type, 
          $.Type, $.Type, 
          $.Type, $.Type
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm02.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(1, "arguments", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm02.TypeRef("System.Reflection.MethodInfo"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$.Type, $asm02.TypeRef("System.Reflection.MethodInfo")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $.Type, $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(2, "arguments", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $.Type, $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $.Type, $.Type
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $.Type, $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $.Type, $.Type, 
          $.Type
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $.Type, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$.Type])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(3, "arguments", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $asm02.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$.Type])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(3, "arguments", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $.Type, $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Catch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm02.TypeRef("System.Type"), $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Catch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Catch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.CatchBlock"), [
          $asm02.TypeRef("System.Type"), $.Type, 
          $.Type
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Catch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.CatchBlock"), [
          $asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Type, 
          $.Type
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CheckMethod", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Reflection.MethodInfo"), $asm02.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ClearDebugInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.DebugInfoExpression"), [$asm07.TypeRef("System.Linq.Expressions.SymbolDocumentInfo")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Coalesce", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Coalesce", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm07.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Condition", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ConditionalExpression"), [
          $.Type, $.Type, 
          $.Type
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Condition", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ConditionalExpression"), [
          $.Type, $.Type, 
          $.Type, $asm02.TypeRef("System.Type")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Constant", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ConstantExpression"), [$.Object])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Constant", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ConstantExpression"), [$.Object, $asm02.TypeRef("System.Type")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Continue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm07.TypeRef("System.Linq.Expressions.LabelTarget")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Continue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm07.TypeRef("System.Linq.Expressions.LabelTarget"), $asm02.TypeRef("System.Type")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Convert", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm02.TypeRef("System.Type")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Convert", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $.Type, $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertChecked", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm02.TypeRef("System.Type")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertChecked", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $.Type, $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CreateLambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm02.TypeRef("System.Type"), $.Type, 
          $.String, $.Boolean, 
          $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DebugInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.DebugInfoExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Decrement", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Decrement", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm02.TypeRef("System.Reflection.MethodInfo")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Default", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.DefaultExpression"), [$asm02.TypeRef("System.Type")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DivideAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DivideAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DivideAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm02.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(2, "arguments", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm02.TypeRef("System.Type"), 
          $.Type
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm02.TypeRef("System.Type"), 
          $.Type, $.Type
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm02.TypeRef("System.Type"), 
          $.Type, $.Type, 
          $.Type
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm02.TypeRef("System.Type"), 
          $.Type, $.Type, 
          $.Type, $.Type
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ElementInit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ElementInit"), [$asm02.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(1, "arguments", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "ElementInit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ElementInit"), [$asm02.TypeRef("System.Reflection.MethodInfo"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Empty", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.DefaultExpression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Equal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Equal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ExclusiveOr", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ExclusiveOr", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ExclusiveOrAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ExclusiveOrAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ExclusiveOrAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Field", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $asm02.TypeRef("System.Reflection.FieldInfo")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Field", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $.String])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Field", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberExpression"), [
          $.Type, $asm02.TypeRef("System.Type"), 
          $.String
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "FindBestMethod", 
      new JSIL.MethodSignature($.Int32, [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Reflection.MethodInfo")]), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Reflection.MethodInfo")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindBestProperty", 
      new JSIL.MethodSignature($.Int32, [
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Reflection.PropertyInfo")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Reflection.PropertyInfo")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindInstanceProperty", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.PropertyInfo"), [
          $asm02.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindMethod", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.MethodInfo"), [
          $asm02.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $asm02.TypeRef("System.Reflection.BindingFlags")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindProperty", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.PropertyInfo"), [
          $asm02.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Type]), $asm02.TypeRef("System.Reflection.BindingFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetActionType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(0, "typeArgs", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "GetArgTypesString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetComparisonOperator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type, $.Type, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDelegateType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(0, "typeArgs", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "GetEqualityComparisonOperator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type, $.Type, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFuncType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(0, "typeArgs", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "GetInvokeMethod", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.MethodInfo"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodBasedAssignOperator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $.Type, $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodBasedBinaryOperator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $.Type, $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodBasedCoercionOperator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodBasedUnaryOperator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetParametersForValidation", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Reflection.ParameterInfo")]), [$asm02.TypeRef("System.Reflection.MethodBase"), $asm07.TypeRef("System.Linq.Expressions.ExpressionType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetProperty", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.PropertyInfo"), [$asm02.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetResultTypeOfShift", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedAssignOperatorOrThrow", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type, $.Type, 
          $asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedBinaryOperator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type, $.Type, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedBinaryOperator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.MethodInfo"), [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Type"), $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedBinaryOperatorOrThrow", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type, $.Type, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedCoercion", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedCoercionOrThrow", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedUnaryOperator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedUnaryOperatorOrThrow", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetValidMethodForDynamic", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.MethodInfo"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Goto", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm07.TypeRef("System.Linq.Expressions.LabelTarget")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Goto", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm07.TypeRef("System.Linq.Expressions.LabelTarget"), $asm02.TypeRef("System.Type")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Goto", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm07.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Goto", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.GotoExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type, 
          $asm02.TypeRef("System.Type")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "IfThen", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ConditionalExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "IfThenElse", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ConditionalExpression"), [
          $.Type, $.Type, 
          $.Type
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Increment", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Increment", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm02.TypeRef("System.Reflection.MethodInfo")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Invoke", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.InvocationExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(1, "arguments", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Invoke", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.InvocationExpression"), [$.Type, $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsCompatible", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Reflection.PropertyInfo"), $jsilcore.TypeRef("System.Array", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCompatible", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Reflection.MethodBase"), $jsilcore.TypeRef("System.Array", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsFalse", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "IsFalse", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm02.TypeRef("System.Reflection.MethodInfo")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsLiftingConditionalLogicalOperator", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.ExpressionType")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullComparison", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullConstant", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSimpleShift", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsTrue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "IsTrue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm02.TypeRef("System.Reflection.MethodInfo")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsValidLiftedConditionalLogicalOperator", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Reflection.ParameterInfo")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Label", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.LabelExpression"), [$asm07.TypeRef("System.Linq.Expressions.LabelTarget")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Label", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.LabelExpression"), [$asm07.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Label", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.LabelTarget"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Label", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.LabelTarget"), [$.String])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Label", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.LabelTarget"), [$asm02.TypeRef("System.Type")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Label", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.LabelTarget"), [$asm02.TypeRef("System.Type"), $.String])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [$.Type, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])], ["TDelegate"])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(1, "parameters", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [
          $.Type, $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], ["TDelegate"])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(2, "parameters", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [$.Type, $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])], ["TDelegate"])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [
          $.Type, $.Boolean, 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], ["TDelegate"])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [
          $.Type, $.String, 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], ["TDelegate"])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [
          $.Type, $.String, 
          $.Boolean, $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], ["TDelegate"])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(1, "parameters", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $.Type, $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(2, "parameters", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), [$.Type, $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $.Type, $.Boolean, 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm02.TypeRef("System.Type"), $.Type, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(2, "parameters", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm02.TypeRef("System.Type"), $.Type, 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(3, "parameters", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm02.TypeRef("System.Type"), $.Type, 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm02.TypeRef("System.Type"), $.Type, 
          $.Boolean, $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $.Type, $.String, 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $.Type, $.String, 
          $.Boolean, $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm02.TypeRef("System.Type"), $.Type, 
          $.String, $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm02.TypeRef("System.Type"), $.Type, 
          $.String, $.Boolean, 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LeftShift", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LeftShift", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LeftShiftAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LeftShiftAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LeftShiftAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ListBind", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm02.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.ElementInit")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(1, "initializers", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "ListBind", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm02.TypeRef("System.Reflection.MemberInfo"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.ElementInit")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ListBind", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm02.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.ElementInit")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(1, "initializers", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "ListBind", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm02.TypeRef("System.Reflection.MethodInfo"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.ElementInit")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ListInitExpression"), [$asm07.TypeRef("System.Linq.Expressions.NewExpression"), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(1, "initializers", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ListInitExpression"), [$asm07.TypeRef("System.Linq.Expressions.NewExpression"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ListInitExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.NewExpression"), $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(2, "initializers", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ListInitExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.NewExpression"), $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ListInitExpression"), [$asm07.TypeRef("System.Linq.Expressions.NewExpression"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.ElementInit")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(1, "initializers", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ListInitExpression"), [$asm07.TypeRef("System.Linq.Expressions.NewExpression"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.ElementInit")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Loop", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.LoopExpression"), [$.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Loop", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.LoopExpression"), [$.Type, $asm07.TypeRef("System.Linq.Expressions.LabelTarget")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Loop", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.LoopExpression"), [
          $.Type, $asm07.TypeRef("System.Linq.Expressions.LabelTarget"), 
          $asm07.TypeRef("System.Linq.Expressions.LabelTarget")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MakeBinary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $.Type
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MakeBinary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $.Type, $.Boolean, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MakeBinary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $.Type, $.Boolean, 
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MakeCatchBlock", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.CatchBlock"), [
          $asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), 
          $.Type, $.Type
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(2, "arguments", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $.Type
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $.Type, $.Type
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $.Type, $.Type, 
          $.Type
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $.Type, $.Type, 
          $.Type, $.Type
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "MakeDynamic", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeGoto", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.GotoExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.GotoExpressionKind"), $asm07.TypeRef("System.Linq.Expressions.LabelTarget"), 
          $.Type, $asm02.TypeRef("System.Type")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MakeIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.IndexExpression"), [
          $.Type, $asm02.TypeRef("System.Reflection.PropertyInfo"), 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MakeMemberAccess", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $asm02.TypeRef("System.Reflection.MemberInfo")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "MakeOpAssignUnary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeTry", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.TryExpression"), [
          $asm02.TypeRef("System.Type"), $.Type, 
          $.Type, $.Type, 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.CatchBlock")])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MakeUnary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm02.TypeRef("System.Type")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MakeUnary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MemberBind", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm02.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(1, "bindings", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "MemberBind", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm02.TypeRef("System.Reflection.MemberInfo"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MemberBind", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm02.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(1, "bindings", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "MemberBind", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm02.TypeRef("System.Reflection.MethodInfo"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MemberInit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberInitExpression"), [$asm07.TypeRef("System.Linq.Expressions.NewExpression"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(1, "bindings", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "MemberInit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberInitExpression"), [$asm07.TypeRef("System.Linq.Expressions.NewExpression"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Modulo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Modulo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ModuloAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ModuloAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ModuloAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MultiplyAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MultiplyAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MultiplyAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MultiplyAssignChecked", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MultiplyAssignChecked", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MultiplyAssignChecked", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MultiplyChecked", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MultiplyChecked", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm02.TypeRef("System.Reflection.MethodInfo")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "NegateChecked", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "NegateChecked", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm02.TypeRef("System.Reflection.MethodInfo")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.NewExpression"), [$asm02.TypeRef("System.Reflection.ConstructorInfo")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.NewExpression"), [$asm02.TypeRef("System.Reflection.ConstructorInfo"), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(1, "arguments", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.NewExpression"), [$asm02.TypeRef("System.Reflection.ConstructorInfo"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.NewExpression"), [
          $asm02.TypeRef("System.Reflection.ConstructorInfo"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type]), 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("System.Reflection.MemberInfo")])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.NewExpression"), [
          $asm02.TypeRef("System.Reflection.ConstructorInfo"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type]), 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Reflection.MemberInfo")])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(2, "members", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.NewExpression"), [$asm02.TypeRef("System.Type")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "NewArrayBounds", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.NewArrayExpression"), [$asm02.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(1, "bounds", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "NewArrayBounds", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.NewArrayExpression"), [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "NewArrayInit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.NewArrayExpression"), [$asm02.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(1, "initializers", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "NewArrayInit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.NewArrayExpression"), [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Not", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Not", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm02.TypeRef("System.Reflection.MethodInfo")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "NotEqual", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "NotEqual", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OnesComplement", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OnesComplement", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm02.TypeRef("System.Reflection.MethodInfo")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Or", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Or", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrElse", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrElse", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Parameter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm02.TypeRef("System.Type")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Parameter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm02.TypeRef("System.Type"), $.String])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ParameterIsAssignable", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Reflection.ParameterInfo"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "PostDecrementAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "PostDecrementAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm02.TypeRef("System.Reflection.MethodInfo")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "PostIncrementAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "PostIncrementAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm02.TypeRef("System.Reflection.MethodInfo")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Power", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Power", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "PowerAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "PowerAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "PowerAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "PreDecrementAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "PreDecrementAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm02.TypeRef("System.Reflection.MethodInfo")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "PreIncrementAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "PreIncrementAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm02.TypeRef("System.Reflection.MethodInfo")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.IndexExpression"), [
          $.Type, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(2, "arguments", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.IndexExpression"), [
          $.Type, $asm02.TypeRef("System.Reflection.PropertyInfo"), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(2, "arguments", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.IndexExpression"), [
          $.Type, $asm02.TypeRef("System.Reflection.PropertyInfo"), 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $.String])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberExpression"), [
          $.Type, $asm02.TypeRef("System.Type"), 
          $.String
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $asm02.TypeRef("System.Reflection.PropertyInfo")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $asm02.TypeRef("System.Reflection.MethodInfo")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "PropertyOrField", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $.String])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Quote", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reduce", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ReduceAndCheck", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ReduceExtensions", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ReferenceEqual", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ReferenceNotEqual", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "RequiresCanRead", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "RequiresCanRead", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type]), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "RequiresCanWrite", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Rethrow", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Rethrow", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$asm02.TypeRef("System.Type")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Return", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm07.TypeRef("System.Linq.Expressions.LabelTarget")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Return", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm07.TypeRef("System.Linq.Expressions.LabelTarget"), $asm02.TypeRef("System.Type")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Return", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm07.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Return", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.GotoExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type, 
          $asm02.TypeRef("System.Type")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ReturnObject", 
      new JSIL.MethodSignature("!!0", [$.Object], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReturnReadOnly", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Collections.Generic.IList`1", ["!!0"])])], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReturnReadOnly", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type]), [$asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.ExternalMethod({Static:true , Public:true }, "RightShift", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "RightShift", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "RightShiftAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "RightShiftAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "RightShiftAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "RuntimeVariables", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(0, "variables", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "RuntimeVariables", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression"), [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SubtractAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SubtractAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SubtractAssign", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SubtractAssignChecked", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SubtractAssignChecked", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SubtractAssignChecked", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SubtractChecked", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SubtractChecked", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Switch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.SwitchExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.SwitchCase")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(1, "cases", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Switch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.SwitchExpression"), [
          $.Type, $.Type, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.SwitchCase")])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(2, "cases", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Switch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.SwitchExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.SwitchCase")])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(3, "cases", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Switch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.SwitchExpression"), [
          $asm02.TypeRef("System.Type"), $.Type, 
          $.Type, $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.SwitchCase")])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(4, "cases", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Switch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.SwitchExpression"), [
          $.Type, $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.SwitchCase")])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Switch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.SwitchExpression"), [
          $asm02.TypeRef("System.Type"), $.Type, 
          $.Type, $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.SwitchCase")])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SwitchCase", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.SwitchCase"), [$.Type, $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(1, "testValues", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "SwitchCase", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.SwitchCase"), [$.Type, $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SymbolDocument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), [$.String])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SymbolDocument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), [$.String, $asm02.TypeRef("System.Guid")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SymbolDocument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), [
          $.String, $asm02.TypeRef("System.Guid"), 
          $asm02.TypeRef("System.Guid")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SymbolDocument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), [
          $.String, $asm02.TypeRef("System.Guid"), 
          $asm02.TypeRef("System.Guid"), $asm02.TypeRef("System.Guid")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Throw", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Throw", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm02.TypeRef("System.Type")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TryCatch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.TryExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.CatchBlock")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(1, "handlers", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "TryCatchFinally", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.TryExpression"), [
          $.Type, $.Type, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.CatchBlock")])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(2, "handlers", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "TryFault", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.TryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TryFinally", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.TryExpression"), [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TryGetActionType", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]), $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Type")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TryGetFuncType", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]), $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Type")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TryQuote", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:true }, "TypeAs", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm02.TypeRef("System.Type")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TypeEqual", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.TypeBinaryExpression"), [$.Type, $asm02.TypeRef("System.Type")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TypeIs", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.TypeBinaryExpression"), [$.Type, $asm02.TypeRef("System.Type")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "UnaryPlus", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "UnaryPlus", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm02.TypeRef("System.Reflection.MethodInfo")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Unbox", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm02.TypeRef("System.Type")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ValidateAccessor", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Reflection.ParameterInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateAccessorArgumentTypes", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Reflection.ParameterInfo")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateAnonymousTypeMember", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Reflection.MemberInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateArgumentCount", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.MethodBase"), $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Reflection.ParameterInfo")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateArgumentTypes", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.MethodBase"), $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateCallInstanceType", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateCoalesceArgTypes", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateDynamicArgument", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateElementInitAddMethodInfo", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateGettableFieldOrPropertyMember", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateGoto", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.LabelTarget"), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateGotoType", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateIndexedProperty", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm02.TypeRef("System.Reflection.PropertyInfo"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateLambdaArgs", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateListInitArgs", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ElementInit")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateMemberInitArgs", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateMethodAndGetParameters", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Reflection.ParameterInfo")]), [$.Type, $asm02.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateMethodInfo", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateNewArgs", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.ConstructorInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm02.TypeRef("System.Reflection.MemberInfo")])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateOneArgument", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.Reflection.MethodBase"), $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $.Type, $asm02.TypeRef("System.Reflection.ParameterInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateOpAssignConversionLambda", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), $.Type, 
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.ExpressionType")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateOperator", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateParamswithOperandsOrThrow", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateSettableFieldOrPropertyMember", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateSpan", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateStaticOrInstanceMethod", 
      new JSIL.MethodSignature(null, [$.Type, $asm02.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateSwitchCaseType", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Boolean, 
          $asm02.TypeRef("System.Type"), $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateTryAndCatchHaveSameType", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $.Type, 
          $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.CatchBlock")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateTryGetFuncActionArgs", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateUserDefinedConditionalLogicOperator", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateVariables", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Variable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm02.TypeRef("System.Type")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Variable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm02.TypeRef("System.Type"), $.String])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "VerifyOpTrueFalse", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitChildren", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_LambdaDelegateCache", $asm07.TypeRef("System.Dynamic.Utils.CacheDict`2", [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Reflection.MethodInfo")]));

    $.Field({Static:true , Public:false}, "_LambdaFactories", $asm07.TypeRef("System.Dynamic.Utils.CacheDict`2"));

    $.Field({Static:true , Public:false}, "_legacyCtorSupportTable", $asm02.TypeRef("System.Runtime.CompilerServices.ConditionalWeakTable`2", [$.Type, $asm07.TypeRef("System.Linq.Expressions.Expression+ExtensionInfo")]));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReduce", $.Boolean)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false}, "DebugView", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* delegate System.Linq.Expressions.Expression+LambdaFactory */ 

JSIL.MakeDelegate("System.Linq.Expressions.Expression+LambdaFactory", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), [
      $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.String"), 
      $asm02.TypeRef("System.Boolean"), $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
    ]));

/* class System.Linq.Expressions.Expression+ExtensionInfo */ 

(function ExtensionInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+ExtensionInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $asm02.TypeRef("System.Type")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+BinaryExpressionProxy */ 

(function BinaryExpressionProxy$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+BinaryExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Conversion", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLifted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLiftedToNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Left", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Right", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.BinaryExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "Conversion", $asm07.TypeRef("System.Linq.Expressions.LambdaExpression"));

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "IsLifted", $.Boolean);

    $.Property({Static:false, Public:true }, "IsLiftedToNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Left", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Method", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Right", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+BlockExpressionProxy */ 

(function BlockExpressionProxy$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+BlockExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.BlockExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expressions", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Result", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Variables", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.BlockExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Expressions", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Result", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Variables", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+CatchBlockProxy */ 

(function CatchBlockProxy$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+CatchBlockProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.CatchBlock"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Filter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Test", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Variable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ParameterExpression"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.CatchBlock"));

    $.Property({Static:false, Public:true }, "Body", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Filter", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Test", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Variable", $asm07.TypeRef("System.Linq.Expressions.ParameterExpression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+ConditionalExpressionProxy */ 

(function ConditionalExpressionProxy$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+ConditionalExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.ConditionalExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IfFalse", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IfTrue", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Test", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.ConditionalExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "IfFalse", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "IfTrue", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Test", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+ConstantExpressionProxy */ 

(function ConstantExpressionProxy$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+ConstantExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.ConstantExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.ConstantExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Value", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+DebugInfoExpressionProxy */ 

(function DebugInfoExpressionProxy$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+DebugInfoExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.DebugInfoExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Document", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EndColumn", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EndLine", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsClear", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StartColumn", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StartLine", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.DebugInfoExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Document", $asm07.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"));

    $.Property({Static:false, Public:true }, "EndColumn", $.Int32);

    $.Property({Static:false, Public:true }, "EndLine", $.Int32);

    $.Property({Static:false, Public:true }, "IsClear", $.Boolean);

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "StartColumn", $.Int32);

    $.Property({Static:false, Public:true }, "StartLine", $.Int32);

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+DefaultExpressionProxy */ 

(function DefaultExpressionProxy$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+DefaultExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.DefaultExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.DefaultExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+DynamicExpressionProxy */ 

(function DynamicExpressionProxy$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+DynamicExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.DynamicExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Binder", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DelegateType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.DynamicExpression"));

    $.Property({Static:false, Public:true }, "Arguments", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "Binder", $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "DelegateType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+GotoExpressionProxy */ 

(function GotoExpressionProxy$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+GotoExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.GotoExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Kind", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.GotoExpressionKind"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Target", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.LabelTarget"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.GotoExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Kind", $asm07.TypeRef("System.Linq.Expressions.GotoExpressionKind"));

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Target", $asm07.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Value", $asm07.TypeRef("System.Linq.Expressions.Expression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+IndexExpressionProxy */ 

(function IndexExpressionProxy$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+IndexExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.IndexExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Indexer", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.PropertyInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Object", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.IndexExpression"));

    $.Property({Static:false, Public:true }, "Arguments", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Indexer", $asm02.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Object", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+InvocationExpressionProxy */ 

(function InvocationExpressionProxy$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+InvocationExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.InvocationExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.InvocationExpression"));

    $.Property({Static:false, Public:true }, "Arguments", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Expression", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+LabelExpressionProxy */ 

(function LabelExpressionProxy$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+LabelExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.LabelExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultValue", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Target", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.LabelTarget"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.LabelExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "DefaultValue", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Target", $asm07.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+LambdaExpressionProxy */ 

(function LambdaExpressionProxy$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+LambdaExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TailCall", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.LambdaExpression"));

    $.Property({Static:false, Public:true }, "Body", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Parameters", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Property({Static:false, Public:true }, "ReturnType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "TailCall", $.Boolean);

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+ListInitExpressionProxy */ 

(function ListInitExpressionProxy$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+ListInitExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.ListInitExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Initializers", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ElementInit")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewExpression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.NewExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.ListInitExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Initializers", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ElementInit")]));

    $.Property({Static:false, Public:true }, "NewExpression", $asm07.TypeRef("System.Linq.Expressions.NewExpression"));

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+LoopExpressionProxy */ 

(function LoopExpressionProxy$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+LoopExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.LoopExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BreakLabel", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.LabelTarget"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContinueLabel", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.LabelTarget"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.LoopExpression"));

    $.Property({Static:false, Public:true }, "Body", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "BreakLabel", $asm07.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "ContinueLabel", $asm07.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+MemberExpressionProxy */ 

(function MemberExpressionProxy$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+MemberExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.MemberExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Member", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MemberInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.MemberExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Expression", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Member", $asm02.TypeRef("System.Reflection.MemberInfo"));

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+MemberInitExpressionProxy */ 

(function MemberInitExpressionProxy$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+MemberInitExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.MemberInitExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Bindings", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewExpression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.NewExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.MemberInitExpression"));

    $.Property({Static:false, Public:true }, "Bindings", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")]));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "NewExpression", $asm07.TypeRef("System.Linq.Expressions.NewExpression"));

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+MethodCallExpressionProxy */ 

(function MethodCallExpressionProxy$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+MethodCallExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Object", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"));

    $.Property({Static:false, Public:true }, "Arguments", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Method", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Object", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+NewArrayExpressionProxy */ 

(function NewArrayExpressionProxy$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+NewArrayExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.NewArrayExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expressions", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.NewArrayExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Expressions", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+NewExpressionProxy */ 

(function NewExpressionProxy$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+NewExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.NewExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Constructor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Members", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm02.TypeRef("System.Reflection.MemberInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.NewExpression"));

    $.Property({Static:false, Public:true }, "Arguments", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "Constructor", $asm02.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Members", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm02.TypeRef("System.Reflection.MemberInfo")]));

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+ParameterExpressionProxy */ 

(function ParameterExpressionProxy$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+ParameterExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.ParameterExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsByRef", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.ParameterExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "IsByRef", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+RuntimeVariablesExpressionProxy */ 

(function RuntimeVariablesExpressionProxy$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+RuntimeVariablesExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Variables", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Variables", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+SwitchCaseProxy */ 

(function SwitchCaseProxy$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+SwitchCaseProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.SwitchCase"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TestValues", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.SwitchCase"));

    $.Property({Static:false, Public:true }, "Body", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "TestValues", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+SwitchExpressionProxy */ 

(function SwitchExpressionProxy$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+SwitchExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.SwitchExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Cases", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.SwitchCase")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Comparison", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultBody", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SwitchValue", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.SwitchExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "Cases", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.SwitchCase")]));

    $.Property({Static:false, Public:true }, "Comparison", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "DefaultBody", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "SwitchValue", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+TryExpressionProxy */ 

(function TryExpressionProxy$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+TryExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.TryExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Fault", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Finally", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Handlers", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.CatchBlock")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.TryExpression"));

    $.Property({Static:false, Public:true }, "Body", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Fault", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Finally", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Handlers", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.CatchBlock")]));

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+TypeBinaryExpressionProxy */ 

(function TypeBinaryExpressionProxy$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+TypeBinaryExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.TypeBinaryExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeOperand", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.TypeBinaryExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Expression", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "TypeOperand", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+UnaryExpressionProxy */ 

(function UnaryExpressionProxy$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+UnaryExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLifted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLiftedToNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Operand", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.UnaryExpression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "IsLifted", $.Boolean);

    $.Property({Static:false, Public:true }, "IsLiftedToNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Method", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Operand", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lFindMethod$gb__342_0", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.MethodInfo"), [$asm02.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lFindProperty$gb__241_0", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.PropertyInfo"), [$asm02.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetArgTypesString$gb__240_0", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__240_0", $asm02.TypeRef("System.Func`2", [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Type")]));

    $.Field({Static:true , Public:true }, "$l$g9__241_0", $asm02.TypeRef("System.Func`2", [$asm02.TypeRef("System.Reflection.MemberInfo"), $asm02.TypeRef("System.Reflection.PropertyInfo")]));

    $.Field({Static:true , Public:true }, "$l$g9__342_0", $asm02.TypeRef("System.Func`2", [$asm02.TypeRef("System.Reflection.MemberInfo"), $asm02.TypeRef("System.Reflection.MethodInfo")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.BinaryExpression */ 

(function BinaryExpression$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.BinaryExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Conversion", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsLifted", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsLiftedLogical", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLiftedToNull", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsReferenceComparison", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Left", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Right", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetBinaryOpFromAssignmentOp", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ExpressionType"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetConversion", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IsOpAssignment", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.Expressions.ExpressionType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reduce", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReduceIndex", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceMember", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceUserdefinedLifted", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceVariable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_left", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_right", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReduce", $.Boolean)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Right", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Left", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Method", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Conversion", $asm07.TypeRef("System.Linq.Expressions.LambdaExpression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsLifted", $.Boolean)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsLiftedToNull", $.Boolean)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false}, "IsLiftedLogical", $.Boolean);

    $.Property({Static:false, Public:false}, "IsReferenceComparison", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_BinaryExpressionProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.LogicalBinaryExpression */ 

(function LogicalBinaryExpression$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), 
      Name: "System.Linq.Expressions.LogicalBinaryExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_nodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.AssignBinaryExpression */ 

(function AssignBinaryExpression$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), 
      Name: "System.Linq.Expressions.AssignBinaryExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.CoalesceConversionBinaryExpression */ 

(function CoalesceConversionBinaryExpression$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), 
      Name: "System.Linq.Expressions.CoalesceConversionBinaryExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetConversion", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_conversion", $asm07.TypeRef("System.Linq.Expressions.LambdaExpression"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.SimpleBinaryExpression */ 

(function SimpleBinaryExpression$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), 
      Name: "System.Linq.Expressions.SimpleBinaryExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_nodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MethodBinaryExpression */ 

(function MethodBinaryExpression$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.SimpleBinaryExpression"), 
      Name: "System.Linq.Expressions.MethodBinaryExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_method", $asm02.TypeRef("System.Reflection.MethodInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.OpAssignMethodConversionBinaryExpression */ 

(function OpAssignMethodConversionBinaryExpression$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.MethodBinaryExpression"), 
      Name: "System.Linq.Expressions.OpAssignMethodConversionBinaryExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetConversion", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_conversion", $asm07.TypeRef("System.Linq.Expressions.LambdaExpression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.BlockExpression */ 

(function BlockExpression$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.BlockExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ExpressionCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expressions", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Result", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_VariableCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Variables", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeExpressions", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeVariables", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetVariable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReturnReadOnlyExpressions", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), [$.Type, $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Expressions", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Variables", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Result", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "VariableCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_BlockExpressionProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.Block2 */ 

(function Block2$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.BlockExpression"), 
      Name: "System.Linq.Expressions.Block2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ExpressionCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeExpressions", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Block3 */ 

(function Block3$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.BlockExpression"), 
      Name: "System.Linq.Expressions.Block3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ExpressionCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeExpressions", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Block4 */ 

(function Block4$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.BlockExpression"), 
      Name: "System.Linq.Expressions.Block4", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ExpressionCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeExpressions", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg3", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Block5 */ 

(function Block5$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.BlockExpression"), 
      Name: "System.Linq.Expressions.Block5", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ExpressionCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeExpressions", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg3", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg4", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.BlockN */ 

(function BlockN$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.BlockExpression"), 
      Name: "System.Linq.Expressions.BlockN", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ExpressionCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeExpressions", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:false, Public:false}, "_expressions", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ScopeExpression */ 

(function ScopeExpression$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.BlockExpression"), 
      Name: "System.Linq.Expressions.ScopeExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_VariableCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_VariablesList", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeVariables", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetVariable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReuseOrValidateVariables", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]), [$asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])])
    );

    $.Field({Static:false, Public:false}, "_variables", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Property({Static:false, Public:false, Virtual:true }, "VariableCount", $.Int32);

    $.Property({Static:false, Public:false}, "VariablesList", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Scope1 */ 

(function Scope1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.ScopeExpression"), 
      Name: "System.Linq.Expressions.Scope1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ExpressionCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeExpressions", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:false, Public:false}, "_body", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ScopeN */ 

(function ScopeN$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.ScopeExpression"), 
      Name: "System.Linq.Expressions.ScopeN", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ExpressionCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeExpressions", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:false, Public:false}, "_body", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ScopeWithType */ 

(function ScopeWithType$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.ScopeN"), 
      Name: "System.Linq.Expressions.ScopeWithType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.BlockExpressionList */ 

(function BlockExpressionList$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.BlockExpressionList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.BlockExpression"), $asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Expressions.BlockExpressionList_$lGetEnumerator$gd__18.__Type__]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Expressions.BlockExpressionList_$lSystem$daCollections$daIEnumerable$daGetEnumerator$gd__19.__Type__]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "_block", $asm07.TypeRef("System.Linq.Expressions.BlockExpression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg0", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), 
      /* 3 */ $asm02.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Linq.Expressions.BlockExpressionList+<GetEnumerator>d__18 */ 

(function $lGetEnumerator$gd__18$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.BlockExpressionList+<GetEnumerator>d__18", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.Expressions.Expression$g.get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Linq.Expressions.BlockExpressionList"));

    $.Field({Static:false, Public:false}, "$li$g5__1", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.Expressions.Expression$g.Current", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), 
      /* 1 */ $asm02.TypeRef("System.IDisposable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.BlockExpressionList+<System-Collections-IEnumerable-GetEnumerator>d__19 */ 

(function $lSystem$daCollections$daIEnumerable$daGetEnumerator$gd__19$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.BlockExpressionList+<System-Collections-IEnumerable-GetEnumerator>d__19", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm02.TypeRef("System.Object")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.Object);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Linq.Expressions.BlockExpressionList"));

    $.Field({Static:false, Public:false}, "$li$g5__1", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 1 */ $asm02.TypeRef("System.IDisposable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.CatchBlock */ 

(function CatchBlock$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.CatchBlock", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Filter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Test", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Variable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ParameterExpression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_test", $asm02.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_var", $asm07.TypeRef("System.Linq.Expressions.ParameterExpression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_body", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_filter", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Variable", $asm07.TypeRef("System.Linq.Expressions.ParameterExpression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Test", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Body", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Filter", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_CatchBlockProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.ConditionalExpression */ 

(function ConditionalExpression$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.ConditionalExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IfFalse", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IfTrue", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Test", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFalse", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_test", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_true", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Test", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IfTrue", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IfFalse", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_ConditionalExpressionProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.FullConditionalExpression */ 

(function FullConditionalExpression$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.ConditionalExpression"), 
      Name: "System.Linq.Expressions.FullConditionalExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFalse", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_false", $asm07.TypeRef("System.Linq.Expressions.Expression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.FullConditionalExpressionWithType */ 

(function FullConditionalExpressionWithType$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.FullConditionalExpression"), 
      Name: "System.Linq.Expressions.FullConditionalExpressionWithType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ConstantExpression */ 

(function ConstantExpression$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.ConstantExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [$.Object, $asm02.TypeRef("System.Type")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_value", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Value", $.Object)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_ConstantExpressionProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.TypedConstantExpression */ 

(function TypedConstantExpression$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.ConstantExpression"), 
      Name: "System.Linq.Expressions.TypedConstantExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.DebugInfoExpression */ 

(function DebugInfoExpression$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.DebugInfoExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Document", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EndColumn", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EndLine", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsClear", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StartColumn", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StartLine", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_document", $asm07.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "StartLine", $.Int32)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "StartColumn", $.Int32)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "EndLine", $.Int32)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "EndColumn", $.Int32)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Document", $asm07.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsClear", $.Boolean)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_DebugInfoExpressionProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.SpanDebugInfoExpression */ 

(function SpanDebugInfoExpression$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.DebugInfoExpression"), 
      Name: "System.Linq.Expressions.SpanDebugInfoExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EndColumn", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EndLine", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsClear", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StartColumn", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StartLine", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_startLine", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_startColumn", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_endLine", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_endColumn", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "StartLine", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "StartColumn", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EndLine", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EndColumn", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsClear", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ClearDebugInfoExpression */ 

(function ClearDebugInfoExpression$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.DebugInfoExpression"), 
      Name: "System.Linq.Expressions.ClearDebugInfoExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EndColumn", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EndLine", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsClear", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StartColumn", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StartLine", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsClear", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "StartLine", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "StartColumn", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EndLine", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EndColumn", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.DebugViewWriter */ 

(function DebugViewWriter$Members () {
  var $, $thisType;














































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor"), 
      Name: "System.Linq.Expressions.DebugViewWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IO.TextWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lVisitDeclarations$gb__39_0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.ParameterExpression"))
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$lVisitExpressions$gb__38_0", 
      new JSIL.MethodSignature(null, ["!!0"], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$lVisitListInit$gb__60_0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.ElementInit"))
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$lVisitMemberInit$gb__64_0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.MemberBinding"))
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$lVisitMemberListBinding$gb__62_0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.ElementInit"))
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$lVisitMemberMemberBinding$gb__63_0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.MemberBinding"))
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckBreak", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.DebugViewWriter+Flow"), [$asm07.TypeRef("System.Linq.Expressions.DebugViewWriter+Flow")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ContainsWhiteSpace", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dedent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DumpLabel", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.LabelTarget"))
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatBinder", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Base", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Delta", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetConstantValueSuffix", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDisplayName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFlow", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.DebugViewWriter+Flow"), [$asm07.TypeRef("System.Linq.Expressions.DebugViewWriter+Flow")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetId", 
      new JSIL.MethodSignature($.Int32, ["!!0", $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Collections.Generic.Dictionary`2", ["!!0", $.Int32])])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLabelTargetId", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Linq.Expressions.LabelTarget")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLabelTargetName", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Linq.Expressions.LabelTarget")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLambdaId", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Linq.Expressions.LambdaExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLambdaName", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Linq.Expressions.LambdaExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetOperatorPrecedence", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParamId", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Indent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSimpleExpression", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NeedsParentheses", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "NewLine", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Out", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Out", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.DebugViewWriter+Flow"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Out", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Linq.Expressions.DebugViewWriter+Flow")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Out", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.DebugViewWriter+Flow"), $.String, 
          $asm07.TypeRef("System.Linq.Expressions.DebugViewWriter+Flow")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "OutMember", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm02.TypeRef("System.Reflection.MemberInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParenthesizedVisit", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "QuoteName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBinary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.BinaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBlock", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.BlockExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCatchBlock", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm07.TypeRef("System.Linq.Expressions.CatchBlock")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConditional", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ConditionalExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConstant", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ConstantExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDebugInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.DebugInfoExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "VisitDeclarations", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDefault", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.DefaultExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDynamic", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.DynamicExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitElementInit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ElementInit"), [$asm07.TypeRef("System.Linq.Expressions.ElementInit")])
    );

    $.ExternalMethod({Static:false, Public:false}, "VisitExpressions", 
      new JSIL.MethodSignature(null, [$.Char, $asm02.TypeRef("System.Collections.Generic.IList`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "VisitExpressions", 
      new JSIL.MethodSignature(null, [
          $.Char, $.Char, 
          $asm02.TypeRef("System.Collections.Generic.IList`1", ["!!0"])
        ], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "VisitExpressions", 
      new JSIL.MethodSignature(null, [
          $.Char, $.Char, 
          $asm02.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), $asm02.TypeRef("System.Action`1", ["!!0"])
        ], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitExtension", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitGoto", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.GotoExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.IndexExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitInvocation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.InvocationExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLabel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.LabelExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitListInit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ListInitExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLoop", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.LoopExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.MemberExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberAssignment", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm07.TypeRef("System.Linq.Expressions.MemberAssignment")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberInit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.MemberInitExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberListBinding", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm07.TypeRef("System.Linq.Expressions.MemberListBinding")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberMemberBinding", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm07.TypeRef("System.Linq.Expressions.MemberMemberBinding")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMethodCall", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.MethodCallExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNew", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.NewExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNewArray", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.NewArrayExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitRuntimeVariables", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSwitch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.SwitchExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSwitchCase", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.SwitchCase"), [$asm07.TypeRef("System.Linq.Expressions.SwitchCase")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTry", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.TryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTypeBinary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.TypeBinaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitUnary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.UnaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLambda", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLine", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.IO.TextWriter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.Constant({Static:true , Public:false}, "Tab", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "MaxColumn", $.Int32, 120);

    $.Field({Static:false, Public:false}, "_out", $asm02.TypeRef("System.IO.TextWriter"));

    $.Field({Static:false, Public:false}, "_column", $.Int32);

    $.Field({Static:false, Public:false}, "_stack", $asm05.TypeRef("System.Collections.Generic.Stack`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "_delta", $.Int32);

    $.Field({Static:false, Public:false}, "_flow", $asm07.TypeRef("System.Linq.Expressions.DebugViewWriter+Flow"));

    $.Field({Static:false, Public:false}, "_lambdas", $asm05.TypeRef("System.Collections.Generic.Queue`1", [$asm07.TypeRef("System.Linq.Expressions.LambdaExpression")]));

    $.Field({Static:false, Public:false}, "_lambdaIds", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), $.Int32]));

    $.Field({Static:false, Public:false}, "_paramIds", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Int32]));

    $.Field({Static:false, Public:false}, "_labelIds", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Linq.Expressions.LabelTarget"), $.Int32]));

    $.Property({Static:false, Public:false}, "Base", $.Int32);

    $.Property({Static:false, Public:false}, "Delta", $.Int32);

    $.Property({Static:false, Public:false}, "Depth", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Linq.Expressions.DebugViewWriter+Flow */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Expressions.DebugViewWriter+Flow", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Space: 1, 
    NewLine: 2, 
    Break: 32768, 
  }
);

/* class System.Linq.Expressions.DefaultExpression */ 

(function DefaultExpression$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.DefaultExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_DefaultExpressionProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.DynamicExpression */ 

(function DynamicExpression$Members () {
  var $, $thisType;
































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.DynamicExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm02.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(2, "arguments", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm02.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm02.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm02.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm02.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Binder", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DelegateType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"))
      .Parameter(2, "arguments", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IDynamicExpression.CreateCallSite", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IDynamicExpression"), "CreateCallSite")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IDynamicExpression.Rewrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IDynamicExpression"), "Rewrite")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_binder", $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_delegateType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Binder", $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "DelegateType", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Arguments", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Linq.Expressions.IDynamicExpression"), 
      /* 1 */ $asm07.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_DynamicExpressionProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.DynamicExpressionN */ 

(function DynamicExpressionN$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.DynamicExpression"), 
      Name: "System.Linq.Expressions.DynamicExpressionN", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.DynamicExpression"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false}, "_arguments", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.TypedDynamicExpressionN */ 

(function TypedDynamicExpressionN$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.DynamicExpressionN"), 
      Name: "System.Linq.Expressions.TypedDynamicExpressionN", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_returnType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.DynamicExpression1 */ 

(function DynamicExpression1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.DynamicExpression"), 
      Name: "System.Linq.Expressions.DynamicExpression1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.DynamicExpression"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.TypedDynamicExpression1 */ 

(function TypedDynamicExpression1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.DynamicExpression1"), 
      Name: "System.Linq.Expressions.TypedDynamicExpression1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_retType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.DynamicExpression2 */ 

(function DynamicExpression2$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.DynamicExpression"), 
      Name: "System.Linq.Expressions.DynamicExpression2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.DynamicExpression"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.TypedDynamicExpression2 */ 

(function TypedDynamicExpression2$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.DynamicExpression2"), 
      Name: "System.Linq.Expressions.TypedDynamicExpression2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_retType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.DynamicExpression3 */ 

(function DynamicExpression3$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.DynamicExpression"), 
      Name: "System.Linq.Expressions.DynamicExpression3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.DynamicExpression"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.TypedDynamicExpression3 */ 

(function TypedDynamicExpression3$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.DynamicExpression3"), 
      Name: "System.Linq.Expressions.TypedDynamicExpression3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_retType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.DynamicExpression4 */ 

(function DynamicExpression4$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.DynamicExpression"), 
      Name: "System.Linq.Expressions.DynamicExpression4", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.DynamicExpression"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg3", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.TypedDynamicExpression4 */ 

(function TypedDynamicExpression4$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.DynamicExpression4"), 
      Name: "System.Linq.Expressions.TypedDynamicExpression4", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_retType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ElementInit */ 

(function ElementInit$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.ElementInit", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.MethodInfo"), $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AddMethod", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "_addMethod", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "_arguments", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "AddMethod", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Arguments", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.ExpressionStringBuilder */ 

(function ExpressionStringBuilder$Members () {
  var $, $thisType;



















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor"), 
      Name: "System.Linq.Expressions.ExpressionStringBuilder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddLabel", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.LabelTarget"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddParam", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.ParameterExpression"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CatchBlockToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Linq.Expressions.CatchBlock")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DumpLabel", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.LabelTarget"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitBindingToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Linq.Expressions.ElementInit")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatBinder", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Runtime.CompilerServices.CallSiteBinder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLabelId", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Linq.Expressions.LabelTarget")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParamId", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MemberBindingToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Out", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Out", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "OutMember", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SwitchCaseToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Linq.Expressions.SwitchCase")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBinary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.BinaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBlock", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.BlockExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCatchBlock", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm07.TypeRef("System.Linq.Expressions.CatchBlock")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConditional", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ConditionalExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConstant", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ConstantExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDebugInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.DebugInfoExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDefault", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.DefaultExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDynamic", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.DynamicExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitElementInit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ElementInit"), [$asm07.TypeRef("System.Linq.Expressions.ElementInit")])
    );

    $.ExternalMethod({Static:false, Public:false}, "VisitExpressions", 
      new JSIL.MethodSignature(null, [
          $.Char, $asm02.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), 
          $.Char
        ], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "VisitExpressions", 
      new JSIL.MethodSignature(null, [
          $.Char, $asm02.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), 
          $.Char, $.String
        ], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitExtension", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitGoto", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.GotoExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.IndexExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitInvocation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.InvocationExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLabel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.LabelExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitListInit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ListInitExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLoop", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.LoopExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.MemberExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberAssignment", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm07.TypeRef("System.Linq.Expressions.MemberAssignment")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberInit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.MemberInitExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberListBinding", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm07.TypeRef("System.Linq.Expressions.MemberListBinding")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberMemberBinding", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm07.TypeRef("System.Linq.Expressions.MemberMemberBinding")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMethodCall", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.MethodCallExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNew", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.NewExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNewArray", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.NewArrayExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitRuntimeVariables", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSwitch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.SwitchExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSwitchCase", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.SwitchCase"), [$asm07.TypeRef("System.Linq.Expressions.SwitchCase")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTry", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.TryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTypeBinary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.TypeBinaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitUnary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.UnaryExpression")])
    );

    $.Field({Static:false, Public:false}, "_out", $asm02.TypeRef("System.Text.StringBuilder"));

    $.Field({Static:false, Public:false}, "_ids", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Linq.Expressions.ExpressionType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Expressions.ExpressionType", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Add: 0, 
    AddChecked: 1, 
    And: 2, 
    AndAlso: 3, 
    ArrayLength: 4, 
    ArrayIndex: 5, 
    Call: 6, 
    Coalesce: 7, 
    Conditional: 8, 
    Constant: 9, 
    Convert: 10, 
    ConvertChecked: 11, 
    Divide: 12, 
    Equal: 13, 
    ExclusiveOr: 14, 
    GreaterThan: 15, 
    GreaterThanOrEqual: 16, 
    Invoke: 17, 
    Lambda: 18, 
    LeftShift: 19, 
    LessThan: 20, 
    LessThanOrEqual: 21, 
    ListInit: 22, 
    MemberAccess: 23, 
    MemberInit: 24, 
    Modulo: 25, 
    Multiply: 26, 
    MultiplyChecked: 27, 
    Negate: 28, 
    UnaryPlus: 29, 
    NegateChecked: 30, 
    New: 31, 
    NewArrayInit: 32, 
    NewArrayBounds: 33, 
    Not: 34, 
    NotEqual: 35, 
    Or: 36, 
    OrElse: 37, 
    Parameter: 38, 
    Power: 39, 
    Quote: 40, 
    RightShift: 41, 
    Subtract: 42, 
    SubtractChecked: 43, 
    TypeAs: 44, 
    TypeIs: 45, 
    Assign: 46, 
    Block: 47, 
    DebugInfo: 48, 
    Decrement: 49, 
    Dynamic: 50, 
    Default: 51, 
    Extension: 52, 
    Goto: 53, 
    Increment: 54, 
    Index: 55, 
    Label: 56, 
    RuntimeVariables: 57, 
    Loop: 58, 
    Switch: 59, 
    Throw: 60, 
    Try: 61, 
    Unbox: 62, 
    AddAssign: 63, 
    AndAssign: 64, 
    DivideAssign: 65, 
    ExclusiveOrAssign: 66, 
    LeftShiftAssign: 67, 
    ModuloAssign: 68, 
    MultiplyAssign: 69, 
    OrAssign: 70, 
    PowerAssign: 71, 
    RightShiftAssign: 72, 
    SubtractAssign: 73, 
    AddAssignChecked: 74, 
    MultiplyAssignChecked: 75, 
    SubtractAssignChecked: 76, 
    PreIncrementAssign: 77, 
    PreDecrementAssign: 78, 
    PostIncrementAssign: 79, 
    PostDecrementAssign: 80, 
    TypeEqual: 81, 
    OnesComplement: 82, 
    IsTrue: 83, 
    IsFalse: 84, 
  }
);

/* class System.Linq.Expressions.DynamicExpressionVisitor */ 

(function DynamicExpressionVisitor$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor"), 
      Name: "System.Linq.Expressions.DynamicExpressionVisitor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDynamic", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.DynamicExpression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* enum System.Linq.Expressions.GotoExpressionKind */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Expressions.GotoExpressionKind", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Goto: 0, 
    Return: 1, 
    Break: 2, 
    Continue: 3, 
  }
);

/* class System.Linq.Expressions.GotoExpression */ 

(function GotoExpression$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.GotoExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.GotoExpressionKind"), $asm07.TypeRef("System.Linq.Expressions.LabelTarget"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Kind", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.GotoExpressionKind"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Target", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.LabelTarget"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Linq.Expressions.LabelTarget"), $asm07.TypeRef("System.Linq.Expressions.Expression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_kind", $asm07.TypeRef("System.Linq.Expressions.GotoExpressionKind"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_value", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm07.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Value", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Target", $asm07.TypeRef("System.Linq.Expressions.LabelTarget"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Kind", $asm07.TypeRef("System.Linq.Expressions.GotoExpressionKind"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_GotoExpressionProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* interface System.Linq.Expressions.IArgumentProvider */ 

JSIL.MakeInterface(
  "System.Linq.Expressions.IArgumentProvider", true, [], function ($) {
    $.Method({}, "GetArgument", new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32]));
    $.Method({}, "get_ArgumentCount", JSIL.MethodSignature.Return($.Int32));
    $.Property({}, "ArgumentCount");
  }, [])
  .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

/* class System.Linq.Expressions.ArgumentProviderOps */ 

(function ArgumentProviderOps$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Linq.Expressions.ArgumentProviderOps", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Map", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), $asm02.TypeRef("System.Func`2", [$asm07.TypeRef("System.Linq.Expressions.Expression"), "!!0"])], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* interface System.Linq.Expressions.IDynamicExpression */ 

JSIL.MakeInterface(
  "System.Linq.Expressions.IDynamicExpression", true, [], function ($) {
    $.Method({}, "get_DelegateType", JSIL.MethodSignature.Return($asm02.TypeRef("System.Type")));
    $.Method({}, "Rewrite", new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])]));
    $.Method({}, "CreateCallSite", JSIL.MethodSignature.Return($.Object));
    $.Property({}, "DelegateType");
  }, [$asm07.TypeRef("System.Linq.Expressions.IArgumentProvider")])
  .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

/* class System.Linq.Expressions.IndexExpression */ 

(function IndexExpression$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.IndexExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Reflection.PropertyInfo"), 
          $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Indexer", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.PropertyInfo"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Object", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_instance", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_indexer", $asm02.TypeRef("System.Reflection.PropertyInfo"));

    $.Field({Static:false, Public:false}, "_arguments", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Object", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Indexer", $asm02.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Arguments", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_IndexExpressionProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.InvocationExpression */ 

(function InvocationExpression$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.InvocationExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_LambdaOperand", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "_arguments", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_lambda", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_returnType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Expression", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Arguments", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false}, "LambdaOperand", $asm07.TypeRef("System.Linq.Expressions.LambdaExpression"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_InvocationExpressionProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.LabelExpression */ 

(function LabelExpression$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.LabelExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.LabelTarget"), $asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultValue", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Target", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.LabelTarget"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Linq.Expressions.LabelTarget"), $asm07.TypeRef("System.Linq.Expressions.Expression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_defaultValue", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm07.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Target", $asm07.TypeRef("System.Linq.Expressions.LabelTarget"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "DefaultValue", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_LabelExpressionProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.LabelTarget */ 

(function LabelTarget$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.LabelTarget", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm02.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.LambdaExpression */ 

(function LambdaExpression$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.LambdaExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $.String, 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $.Boolean, 
          $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Delegate"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Delegate"), [$asm07.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CompileToMethod", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.Emit.MethodBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CompileToMethod", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.MethodBuilder"), $asm07.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileToMethodInternal", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.MethodBuilder"), $asm07.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_TailCall", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_body", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_parameters", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_delegateType", $asm02.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_tailCall", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Parameters", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Body", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ReturnType", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "TailCall", $.Boolean)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_LambdaExpressionProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.Expression`1 */ 

(function Expression$b1$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), 
      Name: "System.Linq.Expressions.Expression`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TDelegate"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $.String, 
          $.Boolean, $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), [$asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature($.GenericParameter("TDelegate"), null)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature($.GenericParameter("TDelegate"), [$asm07.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $.String, 
          $.Boolean, $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression`1", [$.GenericParameter("TDelegate")]), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.ListArgumentProvider */ 

(function ListArgumentProvider$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.ListArgumentProvider", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), $asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Expressions.ListArgumentProvider_$lGetEnumerator$gd__18.__Type__]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm07.System.Linq.Expressions.ListArgumentProvider_$lSystem$daCollections$daIEnumerable$daGetEnumerator$gd__19.__Type__]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "_provider", $asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg0", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), 
      /* 2 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), 
      /* 3 */ $asm02.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Linq.Expressions.ListArgumentProvider+<GetEnumerator>d__18 */ 

(function $lGetEnumerator$gd__18$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.ListArgumentProvider+<GetEnumerator>d__18", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.Expressions.Expression$g.get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Linq.Expressions.ListArgumentProvider"));

    $.Field({Static:false, Public:false}, "$li$g5__1", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.Expressions.Expression$g.Current", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), 
      /* 1 */ $asm02.TypeRef("System.IDisposable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.ListArgumentProvider+<System-Collections-IEnumerable-GetEnumerator>d__19 */ 

(function $lSystem$daCollections$daIEnumerable$daGetEnumerator$gd__19$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.ListArgumentProvider+<System-Collections-IEnumerable-GetEnumerator>d__19", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm02.TypeRef("System.Object")]), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.Object);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Linq.Expressions.ListArgumentProvider"));

    $.Field({Static:false, Public:false}, "$li$g5__1", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 1 */ $asm02.TypeRef("System.IDisposable"), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.ListInitExpression */ 

(function ListInitExpression$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.ListInitExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.NewExpression"), $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ElementInit")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Initializers", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ElementInit")]))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_NewExpression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.NewExpression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reduce", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Linq.Expressions.NewExpression"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.ElementInit")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_newExpression", $asm07.TypeRef("System.Linq.Expressions.NewExpression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_initializers", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ElementInit")]));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReduce", $.Boolean)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "NewExpression", $asm07.TypeRef("System.Linq.Expressions.NewExpression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Initializers", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ElementInit")]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_ListInitExpressionProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.LoopExpression */ 

(function LoopExpression$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.LoopExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.LabelTarget"), 
          $asm07.TypeRef("System.Linq.Expressions.LabelTarget")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_BreakLabel", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.LabelTarget"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ContinueLabel", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.LabelTarget"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("System.Linq.Expressions.LabelTarget"), $asm07.TypeRef("System.Linq.Expressions.LabelTarget"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_body", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_break", $asm07.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_continue", $asm07.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Body", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "BreakLabel", $asm07.TypeRef("System.Linq.Expressions.LabelTarget"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ContinueLabel", $asm07.TypeRef("System.Linq.Expressions.LabelTarget"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_LoopExpressionProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.MemberBinding */ 

(function MemberBinding$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.MemberBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.MemberBindingType"), $asm02.TypeRef("System.Reflection.MemberInfo")])
    )
      .Attribute($asm02.TypeRef("System.ObsoleteAttribute"), function () { return ["Do not use this constructor. It will be removed in future releases."]; });

    $.ExternalMethod({Static:false, Public:true }, "get_BindingType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.MemberBindingType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Member", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MemberInfo"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "_type", $asm07.TypeRef("System.Linq.Expressions.MemberBindingType"));

    $.Field({Static:false, Public:false}, "_member", $asm02.TypeRef("System.Reflection.MemberInfo"));

    $.Property({Static:false, Public:true }, "BindingType", $asm07.TypeRef("System.Linq.Expressions.MemberBindingType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Member", $asm02.TypeRef("System.Reflection.MemberInfo"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.MemberAssignment */ 

(function MemberAssignment$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.MemberBinding"), 
      Name: "System.Linq.Expressions.MemberAssignment", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.MemberInfo"), $asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "_expression", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Expression", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* enum System.Linq.Expressions.MemberBindingType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Expressions.MemberBindingType", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Assignment: 0, 
    MemberBinding: 1, 
    ListBinding: 2, 
  }
);

/* class System.Linq.Expressions.MemberExpression */ 

(function MemberExpression$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.MemberExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Member", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MemberInfo"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMember", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MemberInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expression", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Member", $asm02.TypeRef("System.Reflection.MemberInfo"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Expression", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_MemberExpressionProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.FieldExpression */ 

(function FieldExpression$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.MemberExpression"), 
      Name: "System.Linq.Expressions.FieldExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Reflection.FieldInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMember", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MemberInfo"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_field", $asm02.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.PropertyExpression */ 

(function PropertyExpression$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.MemberExpression"), 
      Name: "System.Linq.Expressions.PropertyExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Reflection.PropertyInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMember", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MemberInfo"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_property", $asm02.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MemberInitExpression */ 

(function MemberInitExpression$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.MemberInitExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.NewExpression"), $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Bindings", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")]))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_NewExpression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.NewExpression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reduce", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ReduceListInit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ElementInit")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReduceMemberBinding", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm07.TypeRef("System.Linq.Expressions.MemberBinding")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReduceMemberInit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Linq.Expressions.NewExpression"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_newExpression", $asm07.TypeRef("System.Linq.Expressions.NewExpression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_bindings", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReduce", $.Boolean)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "NewExpression", $asm07.TypeRef("System.Linq.Expressions.NewExpression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Bindings", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_MemberInitExpressionProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.MemberListBinding */ 

(function MemberListBinding$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.MemberBinding"), 
      Name: "System.Linq.Expressions.MemberListBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.MemberInfo"), $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ElementInit")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Initializers", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ElementInit")]))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.ElementInit")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "_initializers", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ElementInit")]));

    $.Property({Static:false, Public:true }, "Initializers", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ElementInit")]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.MemberMemberBinding */ 

(function MemberMemberBinding$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.MemberBinding"), 
      Name: "System.Linq.Expressions.MemberMemberBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.MemberInfo"), $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Bindings", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")]))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "_bindings", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")]));

    $.Property({Static:false, Public:true }, "Bindings", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.MethodCallExpression */ 

(function MethodCallExpression$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.MethodCallExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Object", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetInstance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_method", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Method", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Object", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Arguments", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_MethodCallExpressionProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.MethodCallExpressionN */ 

(function MethodCallExpressionN$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.MethodCallExpressionN", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.MethodInfo"), $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false}, "_arguments", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.InstanceMethodCallExpressionN */ 

(function InstanceMethodCallExpressionN$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.InstanceMethodCallExpressionN", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetInstance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false}, "_arguments", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_instance", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MethodCallExpression1 */ 

(function MethodCallExpression1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.MethodCallExpression1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MethodCallExpression2 */ 

(function MethodCallExpression2$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.MethodCallExpression2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MethodCallExpression3 */ 

(function MethodCallExpression3$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.MethodCallExpression3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MethodCallExpression4 */ 

(function MethodCallExpression4$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.MethodCallExpression4", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg3", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MethodCallExpression5 */ 

(function MethodCallExpression5$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.MethodCallExpression5", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg3", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg4", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.InstanceMethodCallExpression2 */ 

(function InstanceMethodCallExpression2$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.InstanceMethodCallExpression2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetInstance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_instance", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.InstanceMethodCallExpression3 */ 

(function InstanceMethodCallExpression3$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.InstanceMethodCallExpression3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetInstance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_instance", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false}, "_arg0", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.NewArrayExpression */ 

(function NewArrayExpression$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.NewArrayExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Expressions", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expressions", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Expressions", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_NewArrayExpressionProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.NewArrayInitExpression */ 

(function NewArrayInitExpression$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.NewArrayExpression"), 
      Name: "System.Linq.Expressions.NewArrayInitExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.NewArrayBoundsExpression */ 

(function NewArrayBoundsExpression$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.NewArrayExpression"), 
      Name: "System.Linq.Expressions.NewArrayBoundsExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.NewExpression */ 

(function NewExpression$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.NewExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.ConstructorInfo"), $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), 
          $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm02.TypeRef("System.Reflection.MemberInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Constructor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.ConstructorInfo"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Members", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm02.TypeRef("System.Reflection.MemberInfo")]))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "get_ArgumentCount")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), "GetArgument")
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_constructor", $asm02.TypeRef("System.Reflection.ConstructorInfo"));

    $.Field({Static:false, Public:false}, "_arguments", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_members", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm02.TypeRef("System.Reflection.MemberInfo")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Constructor", $asm02.TypeRef("System.Reflection.ConstructorInfo"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Arguments", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Members", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm02.TypeRef("System.Reflection.MemberInfo")]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_NewExpressionProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.NewValueTypeExpression */ 

(function NewValueTypeExpression$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.NewExpression"), 
      Name: "System.Linq.Expressions.NewValueTypeExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), 
          $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm02.TypeRef("System.Reflection.MemberInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_valueType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ParameterExpression */ 

(function ParameterExpression$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.ParameterExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsByRef", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetIsByRef", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [
          $asm02.TypeRef("System.Type"), $.String, 
          $.Boolean
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsByRef", $.Boolean)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_ParameterExpressionProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.TypedParameterExpression */ 

(function TypedParameterExpression$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), 
      Name: "System.Linq.Expressions.TypedParameterExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_paramType", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ByRefParameterExpression */ 

(function ByRefParameterExpression$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.TypedParameterExpression"), 
      Name: "System.Linq.Expressions.ByRefParameterExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetIsByRef", 
      JSIL.MethodSignature.Return($.Boolean)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.PrimitiveParameterExpression`1 */ 

(function PrimitiveParameterExpression$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), 
      Name: "System.Linq.Expressions.PrimitiveParameterExpression`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.RuntimeVariablesExpression */ 

(function RuntimeVariablesExpression$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.RuntimeVariablesExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Variables", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_variables", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Variables", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_RuntimeVariablesExpressionProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.SwitchCase */ 

(function SwitchCase$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.SwitchCase", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_TestValues", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), $asm07.TypeRef("System.Linq.Expressions.Expression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_testValues", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_body", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "TestValues", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Body", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_SwitchCaseProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.SwitchExpression */ 

(function SwitchExpression$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.SwitchExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.SwitchCase")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Cases", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.SwitchCase")]))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Comparison", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultBody", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsLifted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_SwitchValue", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.SwitchCase")]), 
          $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm02.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_switchValue", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_cases", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.SwitchCase")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_defaultBody", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_comparison", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "SwitchValue", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Cases", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.SwitchCase")]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "DefaultBody", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Comparison", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false}, "IsLifted", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_SwitchExpressionProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.SymbolDocumentInfo */ 

(function SymbolDocumentInfo$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.SymbolDocumentInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DocumentType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Guid"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_FileName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Language", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Guid"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LanguageVendor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Guid"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_fileName", $.String);

    $.Property({Static:false, Public:true }, "FileName", $.String)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "Language", $asm02.TypeRef("System.Guid"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "LanguageVendor", $asm02.TypeRef("System.Guid"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "DocumentType", $asm02.TypeRef("System.Guid"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.SymbolDocumentWithGuids */ 

(function SymbolDocumentWithGuids$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), 
      Name: "System.Linq.Expressions.SymbolDocumentWithGuids", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Guid")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Guid")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Guid")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Guid")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Guid")]), $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Guid")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DocumentType", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Language", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LanguageVendor", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Guid"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_language", $asm02.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_vendor", $asm02.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_documentType", $asm02.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true , Virtual:true }, "Language", $asm02.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true , Virtual:true }, "LanguageVendor", $asm02.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true , Virtual:true }, "DocumentType", $asm02.TypeRef("System.Guid"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.TryExpression */ 

(function TryExpression$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.TryExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.CatchBlock")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Fault", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Finally", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Handlers", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.CatchBlock")]))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Linq.Expressions.CatchBlock")]), 
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Expression")
        ])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm02.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_body", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_handlers", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.CatchBlock")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_finally", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_fault", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Body", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Handlers", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.CatchBlock")]))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Finally", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Fault", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_TryExpressionProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.TypeBinaryExpression */ 

(function TypeBinaryExpression$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.TypeBinaryExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ByValParameterTypeEqual", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_TypeOperand", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReduceConstantTypeEqual", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceTypeEqual", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expression", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_typeOperand", $asm02.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_nodeKind", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Expression", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "TypeOperand", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_TypeBinaryExpressionProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Linq.Expressions.UnaryExpression */ 

(function UnaryExpression$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.UnaryExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FunctionalOp", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsLifted", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsLiftedToNull", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsPrefix", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Operand", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reduce", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReduceIndex", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceMember", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceVariable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    )
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_operand", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_method", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_nodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm02.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Linq.Expressions.ExpressionType"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Operand", $asm07.TypeRef("System.Linq.Expressions.Expression"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Method", $asm02.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsLifted", $.Boolean)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsLiftedToNull", $.Boolean)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReduce", $.Boolean)
      .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false}, "IsPrefix", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm07.System.Linq.Expressions.Expression_UnaryExpressionProxy.__Type__]; })
    .Attribute($asm07.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* enum System.Linq.Expressions.AnalyzeTypeIsResult */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Expressions.AnalyzeTypeIsResult", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    KnownFalse: 0, 
    KnownTrue: 1, 
    KnownAssignable: 2, 
    Unknown: 3, 
  }
);

/* class System.Linq.Expressions.ConstantCheck */ 

(function ConstantCheck$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.Linq.Expressions.ConstantCheck", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AnalyzeTypeIs", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.AnalyzeTypeIsResult"), [$asm07.TypeRef("System.Linq.Expressions.TypeBinaryExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AnalyzeTypeIs", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.AnalyzeTypeIsResult"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Set`1 */ 

(function Set$b1$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Set`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm02.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_data", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("T"), $.Object]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm02.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.SRDescriptionAttribute */ 

(function SRDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm05.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.Linq.Expressions.SRDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.All]; });

})();

/* class System.Linq.Expressions.SRCategoryAttribute */ 

(function SRCategoryAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm05.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "System.Linq.Expressions.SRCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.All]; });

})();

/* class System.Linq.Expressions.SR */ 

(function SR$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Constant({Static:true , Public:false}, "MethodPreconditionViolated", $.String, "MethodPreconditionViolated");

    $.Constant({Static:true , Public:false}, "InvalidArgumentValue", $.String, "InvalidArgumentValue");

    $.Constant({Static:true , Public:false}, "NonEmptyCollectionRequired", $.String, "NonEmptyCollectionRequired");

    $.Constant({Static:true , Public:false}, "ArgCntMustBeGreaterThanNameCnt", $.String, "ArgCntMustBeGreaterThanNameCnt");

    $.Constant({Static:true , Public:false}, "ReducibleMustOverrideReduce", $.String, "ReducibleMustOverrideReduce");

    $.Constant({Static:true , Public:false}, "MustReduceToDifferent", $.String, "MustReduceToDifferent");

    $.Constant({Static:true , Public:false}, "ReducedNotCompatible", $.String, "ReducedNotCompatible");

    $.Constant({Static:true , Public:false}, "SetterHasNoParams", $.String, "SetterHasNoParams");

    $.Constant({Static:true , Public:false}, "PropertyCannotHaveRefType", $.String, "PropertyCannotHaveRefType");

    $.Constant({Static:true , Public:false}, "IndexesOfSetGetMustMatch", $.String, "IndexesOfSetGetMustMatch");

    $.Constant({Static:true , Public:false}, "AccessorsCannotHaveVarArgs", $.String, "AccessorsCannotHaveVarArgs");

    $.Constant({Static:true , Public:false}, "AccessorsCannotHaveByRefArgs", $.String, "AccessorsCannotHaveByRefArgs");

    $.Constant({Static:true , Public:false}, "BoundsCannotBeLessThanOne", $.String, "BoundsCannotBeLessThanOne");

    $.Constant({Static:true , Public:false}, "TypeMustNotBeByRef", $.String, "TypeMustNotBeByRef");

    $.Constant({Static:true , Public:false}, "TypeDoesNotHaveConstructorForTheSignature", $.String, "TypeDoesNotHaveConstructorForTheSignature");

    $.Constant({Static:true , Public:false}, "CountCannotBeNegative", $.String, "CountCannotBeNegative");

    $.Constant({Static:true , Public:false}, "ArrayTypeMustBeArray", $.String, "ArrayTypeMustBeArray");

    $.Constant({Static:true , Public:false}, "SetterMustBeVoid", $.String, "SetterMustBeVoid");

    $.Constant({Static:true , Public:false}, "PropertyTyepMustMatchSetter", $.String, "PropertyTyepMustMatchSetter");

    $.Constant({Static:true , Public:false}, "BothAccessorsMustBeStatic", $.String, "BothAccessorsMustBeStatic");

    $.Constant({Static:true , Public:false}, "OnlyStaticFieldsHaveNullInstance", $.String, "OnlyStaticFieldsHaveNullInstance");

    $.Constant({Static:true , Public:false}, "OnlyStaticPropertiesHaveNullInstance", $.String, "OnlyStaticPropertiesHaveNullInstance");

    $.Constant({Static:true , Public:false}, "OnlyStaticMethodsHaveNullInstance", $.String, "OnlyStaticMethodsHaveNullInstance");

    $.Constant({Static:true , Public:false}, "PropertyTypeCannotBeVoid", $.String, "PropertyTypeCannotBeVoid");

    $.Constant({Static:true , Public:false}, "InvalidUnboxType", $.String, "InvalidUnboxType");

    $.Constant({Static:true , Public:false}, "ExpressionMustBeReadable", $.String, "ExpressionMustBeReadable");

    $.Constant({Static:true , Public:false}, "ExpressionMustBeWriteable", $.String, "ExpressionMustBeWriteable");

    $.Constant({Static:true , Public:false}, "ArgumentMustNotHaveValueType", $.String, "ArgumentMustNotHaveValueType");

    $.Constant({Static:true , Public:false}, "MustBeReducible", $.String, "MustBeReducible");

    $.Constant({Static:true , Public:false}, "AllTestValuesMustHaveSameType", $.String, "AllTestValuesMustHaveSameType");

    $.Constant({Static:true , Public:false}, "AllCaseBodiesMustHaveSameType", $.String, "AllCaseBodiesMustHaveSameType");

    $.Constant({Static:true , Public:false}, "DefaultBodyMustBeSupplied", $.String, "DefaultBodyMustBeSupplied");

    $.Constant({Static:true , Public:false}, "MethodBuilderDoesNotHaveTypeBuilder", $.String, "MethodBuilderDoesNotHaveTypeBuilder");

    $.Constant({Static:true , Public:false}, "TypeMustBeDerivedFromSystemDelegate", $.String, "TypeMustBeDerivedFromSystemDelegate");

    $.Constant({Static:true , Public:false}, "ArgumentTypeCannotBeVoid", $.String, "ArgumentTypeCannotBeVoid");

    $.Constant({Static:true , Public:false}, "LabelMustBeVoidOrHaveExpression", $.String, "LabelMustBeVoidOrHaveExpression");

    $.Constant({Static:true , Public:false}, "LabelTypeMustBeVoid", $.String, "LabelTypeMustBeVoid");

    $.Constant({Static:true , Public:false}, "QuotedExpressionMustBeLambda", $.String, "QuotedExpressionMustBeLambda");

    $.Constant({Static:true , Public:false}, "VariableMustNotBeByRef", $.String, "VariableMustNotBeByRef");

    $.Constant({Static:true , Public:false}, "DuplicateVariable", $.String, "DuplicateVariable");

    $.Constant({Static:true , Public:false}, "StartEndMustBeOrdered", $.String, "StartEndMustBeOrdered");

    $.Constant({Static:true , Public:false}, "FaultCannotHaveCatchOrFinally", $.String, "FaultCannotHaveCatchOrFinally");

    $.Constant({Static:true , Public:false}, "TryMustHaveCatchFinallyOrFault", $.String, "TryMustHaveCatchFinallyOrFault");

    $.Constant({Static:true , Public:false}, "BodyOfCatchMustHaveSameTypeAsBodyOfTry", $.String, "BodyOfCatchMustHaveSameTypeAsBodyOfTry");

    $.Constant({Static:true , Public:false}, "ExtensionNodeMustOverrideProperty", $.String, "ExtensionNodeMustOverrideProperty");

    $.Constant({Static:true , Public:false}, "UserDefinedOperatorMustBeStatic", $.String, "UserDefinedOperatorMustBeStatic");

    $.Constant({Static:true , Public:false}, "UserDefinedOperatorMustNotBeVoid", $.String, "UserDefinedOperatorMustNotBeVoid");

    $.Constant({Static:true , Public:false}, "CoercionOperatorNotDefined", $.String, "CoercionOperatorNotDefined");

    $.Constant({Static:true , Public:false}, "DynamicBinderResultNotAssignable", $.String, "DynamicBinderResultNotAssignable");

    $.Constant({Static:true , Public:false}, "DynamicObjectResultNotAssignable", $.String, "DynamicObjectResultNotAssignable");

    $.Constant({Static:true , Public:false}, "DynamicBindingNeedsRestrictions", $.String, "DynamicBindingNeedsRestrictions");

    $.Constant({Static:true , Public:false}, "BinderNotCompatibleWithCallSite", $.String, "BinderNotCompatibleWithCallSite");

    $.Constant({Static:true , Public:false}, "UnaryOperatorNotDefined", $.String, "UnaryOperatorNotDefined");

    $.Constant({Static:true , Public:false}, "BinaryOperatorNotDefined", $.String, "BinaryOperatorNotDefined");

    $.Constant({Static:true , Public:false}, "ReferenceEqualityNotDefined", $.String, "ReferenceEqualityNotDefined");

    $.Constant({Static:true , Public:false}, "OperandTypesDoNotMatchParameters", $.String, "OperandTypesDoNotMatchParameters");

    $.Constant({Static:true , Public:false}, "OverloadOperatorTypeDoesNotMatchConversionType", $.String, "OverloadOperatorTypeDoesNotMatchConversionType");

    $.Constant({Static:true , Public:false}, "ConversionIsNotSupportedForArithmeticTypes", $.String, "ConversionIsNotSupportedForArithmeticTypes");

    $.Constant({Static:true , Public:false}, "ArgumentMustBeArray", $.String, "ArgumentMustBeArray");

    $.Constant({Static:true , Public:false}, "ArgumentMustBeBoolean", $.String, "ArgumentMustBeBoolean");

    $.Constant({Static:true , Public:false}, "EqualityMustReturnBoolean", $.String, "EqualityMustReturnBoolean");

    $.Constant({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfo", $.String, "ArgumentMustBeFieldInfoOrPropertInfo");

    $.Constant({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfoOrMethod", $.String, "ArgumentMustBeFieldInfoOrPropertInfoOrMethod");

    $.Constant({Static:true , Public:false}, "ArgumentMustBeInstanceMember", $.String, "ArgumentMustBeInstanceMember");

    $.Constant({Static:true , Public:false}, "ArgumentMustBeInteger", $.String, "ArgumentMustBeInteger");

    $.Constant({Static:true , Public:false}, "ArgumentMustBeArrayIndexType", $.String, "ArgumentMustBeArrayIndexType");

    $.Constant({Static:true , Public:false}, "ArgumentMustBeSingleDimensionalArrayType", $.String, "ArgumentMustBeSingleDimensionalArrayType");

    $.Constant({Static:true , Public:false}, "ArgumentTypesMustMatch", $.String, "ArgumentTypesMustMatch");

    $.Constant({Static:true , Public:false}, "CannotAutoInitializeValueTypeElementThroughProperty", $.String, "CannotAutoInitializeValueTypeElementThroughProperty");

    $.Constant({Static:true , Public:false}, "CannotAutoInitializeValueTypeMemberThroughProperty", $.String, "CannotAutoInitializeValueTypeMemberThroughProperty");

    $.Constant({Static:true , Public:false}, "IncorrectTypeForTypeAs", $.String, "IncorrectTypeForTypeAs");

    $.Constant({Static:true , Public:false}, "CoalesceUsedOnNonNullType", $.String, "CoalesceUsedOnNonNullType");

    $.Constant({Static:true , Public:false}, "ExpressionTypeCannotInitializeArrayType", $.String, "ExpressionTypeCannotInitializeArrayType");

    $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchConstructorParameter", $.String, "ExpressionTypeDoesNotMatchConstructorParameter");

    $.Constant({Static:true , Public:false}, "ArgumentTypeDoesNotMatchMember", $.String, "ArgumentTypeDoesNotMatchMember");

    $.Constant({Static:true , Public:false}, "ArgumentMemberNotDeclOnType", $.String, "ArgumentMemberNotDeclOnType");

    $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchMethodParameter", $.String, "ExpressionTypeDoesNotMatchMethodParameter");

    $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchParameter", $.String, "ExpressionTypeDoesNotMatchParameter");

    $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchReturn", $.String, "ExpressionTypeDoesNotMatchReturn");

    $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchAssignment", $.String, "ExpressionTypeDoesNotMatchAssignment");

    $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchLabel", $.String, "ExpressionTypeDoesNotMatchLabel");

    $.Constant({Static:true , Public:false}, "ExpressionTypeNotInvocable", $.String, "ExpressionTypeNotInvocable");

    $.Constant({Static:true , Public:false}, "FieldNotDefinedForType", $.String, "FieldNotDefinedForType");

    $.Constant({Static:true , Public:false}, "InstanceFieldNotDefinedForType", $.String, "InstanceFieldNotDefinedForType");

    $.Constant({Static:true , Public:false}, "FieldInfoNotDefinedForType", $.String, "FieldInfoNotDefinedForType");

    $.Constant({Static:true , Public:false}, "IncorrectNumberOfIndexes", $.String, "IncorrectNumberOfIndexes");

    $.Constant({Static:true , Public:false}, "IncorrectNumberOfLambdaArguments", $.String, "IncorrectNumberOfLambdaArguments");

    $.Constant({Static:true , Public:false}, "IncorrectNumberOfLambdaDeclarationParameters", $.String, "IncorrectNumberOfLambdaDeclarationParameters");

    $.Constant({Static:true , Public:false}, "IncorrectNumberOfMethodCallArguments", $.String, "IncorrectNumberOfMethodCallArguments");

    $.Constant({Static:true , Public:false}, "IncorrectNumberOfConstructorArguments", $.String, "IncorrectNumberOfConstructorArguments");

    $.Constant({Static:true , Public:false}, "IncorrectNumberOfMembersForGivenConstructor", $.String, "IncorrectNumberOfMembersForGivenConstructor");

    $.Constant({Static:true , Public:false}, "IncorrectNumberOfArgumentsForMembers", $.String, "IncorrectNumberOfArgumentsForMembers");

    $.Constant({Static:true , Public:false}, "LambdaTypeMustBeDerivedFromSystemDelegate", $.String, "LambdaTypeMustBeDerivedFromSystemDelegate");

    $.Constant({Static:true , Public:false}, "MemberNotFieldOrProperty", $.String, "MemberNotFieldOrProperty");

    $.Constant({Static:true , Public:false}, "MethodContainsGenericParameters", $.String, "MethodContainsGenericParameters");

    $.Constant({Static:true , Public:false}, "MethodIsGeneric", $.String, "MethodIsGeneric");

    $.Constant({Static:true , Public:false}, "MethodNotPropertyAccessor", $.String, "MethodNotPropertyAccessor");

    $.Constant({Static:true , Public:false}, "PropertyDoesNotHaveGetter", $.String, "PropertyDoesNotHaveGetter");

    $.Constant({Static:true , Public:false}, "PropertyDoesNotHaveSetter", $.String, "PropertyDoesNotHaveSetter");

    $.Constant({Static:true , Public:false}, "PropertyDoesNotHaveAccessor", $.String, "PropertyDoesNotHaveAccessor");

    $.Constant({Static:true , Public:false}, "NotAMemberOfType", $.String, "NotAMemberOfType");

    $.Constant({Static:true , Public:false}, "OperatorNotImplementedForType", $.String, "OperatorNotImplementedForType");

    $.Constant({Static:true , Public:false}, "ParameterExpressionNotValidAsDelegate", $.String, "ParameterExpressionNotValidAsDelegate");

    $.Constant({Static:true , Public:false}, "PropertyNotDefinedForType", $.String, "PropertyNotDefinedForType");

    $.Constant({Static:true , Public:false}, "InstancePropertyNotDefinedForType", $.String, "InstancePropertyNotDefinedForType");

    $.Constant({Static:true , Public:false}, "InstancePropertyWithoutParameterNotDefinedForType", $.String, "InstancePropertyWithoutParameterNotDefinedForType");

    $.Constant({Static:true , Public:false}, "InstancePropertyWithSpecifiedParametersNotDefinedForType", $.String, "InstancePropertyWithSpecifiedParametersNotDefinedForType");

    $.Constant({Static:true , Public:false}, "InstanceAndMethodTypeMismatch", $.String, "InstanceAndMethodTypeMismatch");

    $.Constant({Static:true , Public:false}, "TypeContainsGenericParameters", $.String, "TypeContainsGenericParameters");

    $.Constant({Static:true , Public:false}, "TypeIsGeneric", $.String, "TypeIsGeneric");

    $.Constant({Static:true , Public:false}, "TypeMissingDefaultConstructor", $.String, "TypeMissingDefaultConstructor");

    $.Constant({Static:true , Public:false}, "ListInitializerWithZeroMembers", $.String, "ListInitializerWithZeroMembers");

    $.Constant({Static:true , Public:false}, "ElementInitializerMethodNotAdd", $.String, "ElementInitializerMethodNotAdd");

    $.Constant({Static:true , Public:false}, "ElementInitializerMethodNoRefOutParam", $.String, "ElementInitializerMethodNoRefOutParam");

    $.Constant({Static:true , Public:false}, "ElementInitializerMethodWithZeroArgs", $.String, "ElementInitializerMethodWithZeroArgs");

    $.Constant({Static:true , Public:false}, "ElementInitializerMethodStatic", $.String, "ElementInitializerMethodStatic");

    $.Constant({Static:true , Public:false}, "TypeNotIEnumerable", $.String, "TypeNotIEnumerable");

    $.Constant({Static:true , Public:false}, "TypeParameterIsNotDelegate", $.String, "TypeParameterIsNotDelegate");

    $.Constant({Static:true , Public:false}, "UnexpectedCoalesceOperator", $.String, "UnexpectedCoalesceOperator");

    $.Constant({Static:true , Public:false}, "InvalidCast", $.String, "InvalidCast");

    $.Constant({Static:true , Public:false}, "UnhandledBinary", $.String, "UnhandledBinary");

    $.Constant({Static:true , Public:false}, "UnhandledBinding", $.String, "UnhandledBinding");

    $.Constant({Static:true , Public:false}, "UnhandledBindingType", $.String, "UnhandledBindingType");

    $.Constant({Static:true , Public:false}, "UnhandledConvert", $.String, "UnhandledConvert");

    $.Constant({Static:true , Public:false}, "UnhandledExpressionType", $.String, "UnhandledExpressionType");

    $.Constant({Static:true , Public:false}, "UnhandledUnary", $.String, "UnhandledUnary");

    $.Constant({Static:true , Public:false}, "UnknownBindingType", $.String, "UnknownBindingType");

    $.Constant({Static:true , Public:false}, "UserDefinedOpMustHaveConsistentTypes", $.String, "UserDefinedOpMustHaveConsistentTypes");

    $.Constant({Static:true , Public:false}, "UserDefinedOpMustHaveValidReturnType", $.String, "UserDefinedOpMustHaveValidReturnType");

    $.Constant({Static:true , Public:false}, "LogicalOperatorMustHaveBooleanOperators", $.String, "LogicalOperatorMustHaveBooleanOperators");

    $.Constant({Static:true , Public:false}, "MethodDoesNotExistOnType", $.String, "MethodDoesNotExistOnType");

    $.Constant({Static:true , Public:false}, "MethodWithArgsDoesNotExistOnType", $.String, "MethodWithArgsDoesNotExistOnType");

    $.Constant({Static:true , Public:false}, "GenericMethodWithArgsDoesNotExistOnType", $.String, "GenericMethodWithArgsDoesNotExistOnType");

    $.Constant({Static:true , Public:false}, "MethodWithMoreThanOneMatch", $.String, "MethodWithMoreThanOneMatch");

    $.Constant({Static:true , Public:false}, "PropertyWithMoreThanOneMatch", $.String, "PropertyWithMoreThanOneMatch");

    $.Constant({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForFunc", $.String, "IncorrectNumberOfTypeArgsForFunc");

    $.Constant({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForAction", $.String, "IncorrectNumberOfTypeArgsForAction");

    $.Constant({Static:true , Public:false}, "ArgumentCannotBeOfTypeVoid", $.String, "ArgumentCannotBeOfTypeVoid");

    $.Constant({Static:true , Public:false}, "AmbiguousMatchInExpandoObject", $.String, "AmbiguousMatchInExpandoObject");

    $.Constant({Static:true , Public:false}, "SameKeyExistsInExpando", $.String, "SameKeyExistsInExpando");

    $.Constant({Static:true , Public:false}, "KeyDoesNotExistInExpando", $.String, "KeyDoesNotExistInExpando");

    $.Constant({Static:true , Public:false}, "NoOrInvalidRuleProduced", $.String, "NoOrInvalidRuleProduced");

    $.Constant({Static:true , Public:false}, "FirstArgumentMustBeCallSite", $.String, "FirstArgumentMustBeCallSite");

    $.Constant({Static:true , Public:false}, "BindingCannotBeNull", $.String, "BindingCannotBeNull");

    $.Constant({Static:true , Public:false}, "InvalidOperation", $.String, "InvalidOperation");

    $.Constant({Static:true , Public:false}, "OutOfRange", $.String, "OutOfRange");

    $.Constant({Static:true , Public:false}, "QueueEmpty", $.String, "QueueEmpty");

    $.Constant({Static:true , Public:false}, "LabelTargetAlreadyDefined", $.String, "LabelTargetAlreadyDefined");

    $.Constant({Static:true , Public:false}, "LabelTargetUndefined", $.String, "LabelTargetUndefined");

    $.Constant({Static:true , Public:false}, "ControlCannotLeaveFinally", $.String, "ControlCannotLeaveFinally");

    $.Constant({Static:true , Public:false}, "ControlCannotLeaveFilterTest", $.String, "ControlCannotLeaveFilterTest");

    $.Constant({Static:true , Public:false}, "AmbiguousJump", $.String, "AmbiguousJump");

    $.Constant({Static:true , Public:false}, "ControlCannotEnterTry", $.String, "ControlCannotEnterTry");

    $.Constant({Static:true , Public:false}, "ControlCannotEnterExpression", $.String, "ControlCannotEnterExpression");

    $.Constant({Static:true , Public:false}, "NonLocalJumpWithValue", $.String, "NonLocalJumpWithValue");

    $.Constant({Static:true , Public:false}, "ExtensionNotReduced", $.String, "ExtensionNotReduced");

    $.Constant({Static:true , Public:false}, "CannotCompileConstant", $.String, "CannotCompileConstant");

    $.Constant({Static:true , Public:false}, "CannotCompileDynamic", $.String, "CannotCompileDynamic");

    $.Constant({Static:true , Public:false}, "InvalidLvalue", $.String, "InvalidLvalue");

    $.Constant({Static:true , Public:false}, "InvalidMemberType", $.String, "InvalidMemberType");

    $.Constant({Static:true , Public:false}, "UnknownLiftType", $.String, "UnknownLiftType");

    $.Constant({Static:true , Public:false}, "InvalidOutputDir", $.String, "InvalidOutputDir");

    $.Constant({Static:true , Public:false}, "InvalidAsmNameOrExtension", $.String, "InvalidAsmNameOrExtension");

    $.Constant({Static:true , Public:false}, "CollectionReadOnly", $.String, "CollectionReadOnly");

    $.Constant({Static:true , Public:false}, "IllegalNewGenericParams", $.String, "IllegalNewGenericParams");

    $.Constant({Static:true , Public:false}, "UndefinedVariable", $.String, "UndefinedVariable");

    $.Constant({Static:true , Public:false}, "CannotCloseOverByRef", $.String, "CannotCloseOverByRef");

    $.Constant({Static:true , Public:false}, "UnexpectedVarArgsCall", $.String, "UnexpectedVarArgsCall");

    $.Constant({Static:true , Public:false}, "RethrowRequiresCatch", $.String, "RethrowRequiresCatch");

    $.Constant({Static:true , Public:false}, "TryNotAllowedInFilter", $.String, "TryNotAllowedInFilter");

    $.Constant({Static:true , Public:false}, "MustRewriteToSameNode", $.String, "MustRewriteToSameNode");

    $.Constant({Static:true , Public:false}, "MustRewriteChildToSameType", $.String, "MustRewriteChildToSameType");

    $.Constant({Static:true , Public:false}, "MustRewriteWithoutMethod", $.String, "MustRewriteWithoutMethod");

    $.Constant({Static:true , Public:false}, "InvalidNullValue", $.String, "InvalidNullValue");

    $.Constant({Static:true , Public:false}, "InvalidObjectType", $.String, "InvalidObjectType");

    $.Constant({Static:true , Public:false}, "TryNotSupportedForMethodsWithRefArgs", $.String, "TryNotSupportedForMethodsWithRefArgs");

    $.Constant({Static:true , Public:false}, "TryNotSupportedForValueTypeInstances", $.String, "TryNotSupportedForValueTypeInstances");

    $.Constant({Static:true , Public:false}, "CollectionModifiedWhileEnumerating", $.String, "CollectionModifiedWhileEnumerating");

    $.Constant({Static:true , Public:false}, "EnumerationIsDone", $.String, "EnumerationIsDone");

    $.Constant({Static:true , Public:false}, "HomogenousAppDomainRequired", $.String, "HomogenousAppDomainRequired");

    $.Constant({Static:true , Public:false}, "TestValueTypeDoesNotMatchComparisonMethodParameter", $.String, "TestValueTypeDoesNotMatchComparisonMethodParameter");

    $.Constant({Static:true , Public:false}, "SwitchValueTypeDoesNotMatchComparisonMethodParameter", $.String, "SwitchValueTypeDoesNotMatchComparisonMethodParameter");

    $.Constant({Static:true , Public:false}, "InvalidMetaObjectCreated", $.String, "InvalidMetaObjectCreated");

    $.Constant({Static:true , Public:false}, "PdbGeneratorNeedsExpressionCompiler", $.String, "PdbGeneratorNeedsExpressionCompiler");

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm02.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm02.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm02.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Linq.Expressions.Compiler");
/* class System.Linq.Expressions.Compiler.AnalyzedTree */ 

(function AnalyzedTree$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Runtime.CompilerServices.DebugInfoGenerator)) ();
  };



  function AnalyzedTree_get_DebugInfoGenerator () {
    return this.AnalyzedTree$DebugInfoGenerator$value;
  }; 

  function AnalyzedTree_set_DebugInfoGenerator (value) {
    this.AnalyzedTree$DebugInfoGenerator$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.AnalyzedTree", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:false}, "get_DebugInfoGenerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")), 
      AnalyzedTree_get_DebugInfoGenerator
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_DebugInfoGenerator", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")), 
      AnalyzedTree_set_DebugInfoGenerator
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Scopes", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $asm07.TypeRef("System.Linq.Expressions.Compiler.CompilerScope")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Constants", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.BoundConstants")]));

    $.Field({Static:false, Public:false}, "AnalyzedTree$DebugInfoGenerator$value", $asm07.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator"))
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:false}, "DebugInfoGenerator", $asm07.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.AssemblyGen */ 

(function AssemblyGen$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.AssemblyGen", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DefineDelegateType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.Emit.TypeBuilder"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "DefineType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.Emit.TypeBuilder"), [
          $.String, $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Reflection.TypeAttributes")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Assembly", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Field({Static:true , Public:false}, "_assembly", $.Type);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_myAssembly", $asm02.TypeRef("System.Reflection.Emit.AssemblyBuilder"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_myModule", $asm02.TypeRef("System.Reflection.Emit.ModuleBuilder"));

    $.Field({Static:false, Public:false}, "_index", $.Int32);

    $.Property({Static:true , Public:false}, "Assembly", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.SymbolGuids */ 

(function SymbolGuids$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Linq.Expressions.Compiler.SymbolGuids", false, [], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:false, ReadOnly:true }, "DocumentType_Text", $asm02.TypeRef("System.Guid"));


    function SymbolGuids__cctor () {
      $thisType.DocumentType_Text = new $asm02.System.Guid();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SymbolGuids__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.BoundConstants */ 

(function BoundConstants$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.BoundConstants", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddReference", 
      new JSIL.MethodSignature(null, [$.Object, $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitCacheConstants", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConstant", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $.Object, 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConstantFromArray", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $.Object, 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EmitConstantsArray", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "ShouldCache", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_values", $asm02.TypeRef("System.Collections.Generic.List`1", [$.Object]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_indexes", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_references", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Linq.Expressions.Compiler.BoundConstants+TypedConstant"), $.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_cache", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Linq.Expressions.Compiler.BoundConstants+TypedConstant"), $asm02.TypeRef("System.Reflection.Emit.LocalBuilder")]));

    $.Property({Static:false, Public:false}, "Count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Expressions.Compiler.BoundConstants+TypedConstant */ 

(function TypedConstant$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Linq.Expressions.Compiler.BoundConstants+TypedConstant", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "Value", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "Type", $asm02.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Linq.Expressions.Compiler.VariableStorageKind */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Expressions.Compiler.VariableStorageKind", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Local: 0, 
    Hoisted: 1, 
  }
);

/* class System.Linq.Expressions.Compiler.CompilerScope */ 

(function CompilerScope$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.CompilerScope", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lSetParent$gb__22_0", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "AddLocal", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AllocateLocals", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CacheBoxToLocal", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitAddressOf", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.ParameterExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitCachedVariables", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitClosureAccess", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm07.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitClosureToVariable", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm07.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitGet", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.ParameterExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitNewHoistedLocals", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSet", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.ParameterExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitVariableAccess", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Enter", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "Exit", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentLambdaName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NearestHoistedLocals", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetVariables", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetVariables", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveVariable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.CompilerScope+Storage"), [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveVariable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.CompilerScope+Storage"), [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParent", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldCache", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldCache", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.Field({Static:false, Public:false}, "_parent", $.Type);

    $.Field({Static:false, Public:false, ReadOnly:true }, "Node", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "IsMethod", $.Boolean);

    $.Field({Static:false, Public:false}, "NeedsClosure", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "Definitions", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.VariableStorageKind")]));

    $.Field({Static:false, Public:false}, "ReferenceCount", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Int32]));

    $.Field({Static:false, Public:false}, "MergedScopes", $asm07.TypeRef("System.Linq.Expressions.Set`1", [$.Object]));

    $.Field({Static:false, Public:false}, "_hoistedLocals", $asm07.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals"));

    $.Field({Static:false, Public:false}, "_closureHoistedLocals", $asm07.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_locals", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.CompilerScope+Storage")]));

    $.Property({Static:false, Public:false}, "NearestHoistedLocals", $asm07.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals"));

    $.Property({Static:false, Public:false}, "CurrentLambdaName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.CompilerScope+Storage */ 

(function Storage$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.CompilerScope+Storage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitAddress", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitLoad", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitStore", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitStore", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FreeLocal", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "Compiler", $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Variable", $asm07.TypeRef("System.Linq.Expressions.ParameterExpression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.CompilerScope+LocalStorage */ 

(function LocalStorage$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Compiler.CompilerScope+Storage"), 
      Name: "System.Linq.Expressions.Compiler.CompilerScope+LocalStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitAddress", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitLoad", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitStore", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_local", $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.CompilerScope+ArgumentStorage */ 

(function ArgumentStorage$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Compiler.CompilerScope+Storage"), 
      Name: "System.Linq.Expressions.Compiler.CompilerScope+ArgumentStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitAddress", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitLoad", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitStore", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_argument", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.CompilerScope+ElementBoxStorage */ 

(function ElementBoxStorage$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Compiler.CompilerScope+Storage"), 
      Name: "System.Linq.Expressions.Compiler.CompilerScope+ElementBoxStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.Compiler.CompilerScope+Storage"), $.Int32, 
          $asm07.TypeRef("System.Linq.Expressions.ParameterExpression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitAddress", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitLoad", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLoadBox", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitStore", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitStore", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Compiler.CompilerScope+Storage"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_index", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_array", $asm07.TypeRef("System.Linq.Expressions.Compiler.CompilerScope+Storage"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_boxType", $asm02.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_boxValueField", $asm02.TypeRef("System.Reflection.FieldInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.CompilerScope+LocalBoxStorage */ 

(function LocalBoxStorage$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Compiler.CompilerScope+Storage"), 
      Name: "System.Linq.Expressions.Compiler.CompilerScope+LocalBoxStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitAddress", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitLoad", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitStore", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitStore", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Compiler.CompilerScope+Storage"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitStoreBox", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_boxLocal", $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_boxType", $asm02.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_boxValueField", $asm02.TypeRef("System.Reflection.FieldInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.DelegateHelpers */ 

(function DelegateHelpers$Members () {
  var $, $thisType;












  JSIL.MakeStaticClass("System.Linq.Expressions.Compiler.DelegateHelpers", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetActionType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFuncType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNextTypeInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.DelegateHelpers+TypeInfo"), [$asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Linq.Expressions.Compiler.DelegateHelpers+TypeInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsByRef", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeCallSiteDelegate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeDeferredSiteDelegate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Dynamic.DynamicMetaObject")]), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeDelegateType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeNewCustomDelegate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeNewDelegate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "NextTypeInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.DelegateHelpers+TypeInfo"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NextTypeInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.DelegateHelpers+TypeInfo"), [$asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Linq.Expressions.Compiler.DelegateHelpers+TypeInfo")])
    );

    $.Constant({Static:true , Public:false}, "CtorAttributes", $asm02.TypeRef("System.Reflection.MethodAttributes"), 4230);

    $.Constant({Static:true , Public:false}, "ImplAttributes", $asm02.TypeRef("System.Reflection.MethodImplAttributes"), 3);

    $.Constant({Static:true , Public:false}, "InvokeAttributes", $asm02.TypeRef("System.Reflection.MethodAttributes"), 454);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_DelegateCtorSignature", $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]));

    $.Field({Static:true , Public:false}, "_DelegateCache", $asm07.TypeRef("System.Linq.Expressions.Compiler.DelegateHelpers+TypeInfo"));

    $.Constant({Static:true , Public:false}, "MaximumArity", $.Int32, 17);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.DelegateHelpers+TypeInfo */ 

(function TypeInfo$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.DelegateHelpers+TypeInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "MakeDelegateType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm02.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "MakeDelegateType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:false, Public:true }, "DelegateType", $asm02.TypeRef("System.Type"));

    $.Field({Static:false, Public:true }, "TypeChain", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm02.TypeRef("System.Type"), $.Type]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.DelegateHelpers+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.DelegateHelpers+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lMakeNewDelegate$gb__15_0", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__15_0", $asm02.TypeRef("System.Func`2", [$asm02.TypeRef("System.Type"), $.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.Compiler.HoistedLocals */ 

(function HoistedLocals$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.HoistedLocals", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParentVariable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.ParameterExpression"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetParent", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "Parent", $.Type);

    $.Field({Static:false, Public:false, ReadOnly:true }, "Indexes", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyDictionary`2", [$asm07.TypeRef("System.Linq.Expressions.Expression"), $.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Variables", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "SelfVariable", $asm07.TypeRef("System.Linq.Expressions.ParameterExpression"));

    $.Property({Static:false, Public:false}, "ParentVariable", $asm07.TypeRef("System.Linq.Expressions.ParameterExpression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.ILGen */ 

(function ILGen$Members () {
  var $, $thisType;






















































  JSIL.MakeStaticClass("System.Linq.Expressions.Compiler.ILGen", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CanEmitConstant", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanEmitILConstant", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Emit", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Reflection.Emit.OpCode"), 
          $asm02.TypeRef("System.Reflection.MethodBase")
        ])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitArray", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Collections.Generic.IList`1", ["!!0"])], ["T"])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitArray", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Type"), 
          $.Int32, $asm02.TypeRef("System.Action`1", [$.Int32])
        ])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitArray", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Type")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitBoolean", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $.Boolean])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitByte", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $.Byte])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitCastToType", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Type")
        ])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitChar", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $.Char])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitConstant", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $.Object])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitConstant", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $.Object, 
          $asm02.TypeRef("System.Type")
        ])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitConvertToType", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Type"), $.Boolean
        ])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitDecimal", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Decimal")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitDecimalBits", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Decimal")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitDefault", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Type")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitDouble", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $.Double])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitFieldAddress", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Reflection.FieldInfo")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitFieldGet", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Reflection.FieldInfo")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitFieldSet", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Reflection.FieldInfo")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitGetValue", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Type")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitGetValueOrDefault", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Type")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitHasValue", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Type")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitInt", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitLoadArg", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitLoadArgAddress", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitLoadElement", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Type")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitLoadValueIndirect", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Type")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitLong", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int64])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNew", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Reflection.ConstructorInfo")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNew", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")])
        ])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNonNullableToNullableConversion", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Type"), $.Boolean
        ])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNull", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.Emit.ILGenerator"))
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNullableConversion", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Type"), $.Boolean
        ])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNullableToNonNullableConversion", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Type"), $.Boolean
        ])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNullableToNonNullableStructConversion", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Type"), $.Boolean
        ])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNullableToNullableConversion", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Type"), $.Boolean
        ])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNullableToReferenceConversion", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Type")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNumericConversion", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Type"), $.Boolean
        ])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitSByte", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $.SByte])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitShort", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int16])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitSingle", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $.Single])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitStoreArg", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitStoreElement", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Type")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitStoreValueIndirect", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Type")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitString", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $.String])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitType", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm02.TypeRef("System.Type")])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitUInt", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $.UInt32])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitULong", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $.UInt64])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitUShort", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $.UInt16])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ShouldLdtoken", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ShouldLdtoken", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Reflection.MethodBase")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryEmitILConstant", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $.Object, 
          $asm02.TypeRef("System.Type")
        ])
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Linq.Expressions.Compiler.KeyedQueue`2 */ 

(function KeyedQueue$b2$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.KeyedQueue`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["K", "V"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dequeue", 
      new JSIL.MethodSignature($.GenericParameter("V"), [$.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Enqueue", 
      new JSIL.MethodSignature(null, [$.GenericParameter("K"), $.GenericParameter("V")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCount", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Peek", 
      new JSIL.MethodSignature($.GenericParameter("V"), [$.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryDequeue", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("K"), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("V")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_data", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("K"), $asm05.TypeRef("System.Collections.Generic.Queue`1", [$.GenericParameter("V")])]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.LabelInfo */ 

(function LabelInfo$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LabelInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Linq.Expressions.LabelTarget"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Define", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitJump", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureLabelAndValue", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanBranch", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanReturn", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Label", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.Emit.Label"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Mark", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "MarkWithEmptyStack", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Reference", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "StoreValue", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateFinish", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateJump", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm07.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Field({Static:false, Public:false}, "_label", $asm02.TypeRef("System.Reflection.Emit.Label"));

    $.Field({Static:false, Public:false}, "_labelDefined", $.Boolean);

    $.Field({Static:false, Public:false}, "_value", $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_definitions", $asm07.TypeRef("System.Linq.Expressions.Set`1", [$asm07.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_references", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_canReturn", $.Boolean);

    $.Field({Static:false, Public:false}, "_acrossBlockJump", $.Boolean);

    $.Field({Static:false, Public:false}, "_opCode", $asm02.TypeRef("System.Reflection.Emit.OpCode"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_ilg", $asm02.TypeRef("System.Reflection.Emit.ILGenerator"));

    $.Property({Static:false, Public:false}, "Label", $asm02.TypeRef("System.Reflection.Emit.Label"));

    $.Property({Static:false, Public:false}, "CanReturn", $.Boolean);

    $.Property({Static:false, Public:false}, "CanBranch", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.LabelInfo+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LabelInfo+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lValidateJump$gb__19_0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo"), [$asm07.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__19_0", $asm02.TypeRef("System.Func`2", [$asm07.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* enum System.Linq.Expressions.Compiler.LabelScopeKind */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Expressions.Compiler.LabelScopeKind", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Statement: 0, 
    Block: 1, 
    Switch: 2, 
    Lambda: 3, 
    Try: 4, 
    Catch: 5, 
    Finally: 6, 
    Filter: 7, 
    Expression: 8, 
  }
);

/* class System.Linq.Expressions.Compiler.LabelScopeInfo */ 

(function LabelScopeInfo$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LabelScopeInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $asm07.TypeRef("System.Linq.Expressions.Compiler.LabelScopeKind")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddLabelInfo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.LabelTarget"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LabelInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContainsTarget", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.Expressions.LabelTarget")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanJumpInto", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetLabelInfo", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.Expressions.LabelTarget"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Linq.Expressions.Compiler.LabelInfo")])])
    );

    $.Field({Static:false, Public:false}, "Labels", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Linq.Expressions.LabelTarget"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LabelInfo")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Kind", $asm07.TypeRef("System.Linq.Expressions.Compiler.LabelScopeKind"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Parent", $.Type);

    $.Property({Static:false, Public:false}, "CanJumpInto", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.LambdaCompiler */ 

(function LambdaCompiler$Members () {
  var $, $thisType;




























































































































































































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LambdaCompiler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Compiler.AnalyzedTree"), $asm07.TypeRef("System.Linq.Expressions.LambdaExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.Compiler.AnalyzedTree"), $asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), 
          $asm02.TypeRef("System.Reflection.Emit.MethodBuilder")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $asm07.TypeRef("System.Linq.Expressions.LambdaExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddressOf", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddressOf", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddressOf", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.MemberExpression"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddressOf", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddressOf", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.IndexExpression"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddressOf", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddressOfWriteBack", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+WriteBack"), [$asm07.TypeRef("System.Linq.Expressions.MemberExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddressOfWriteBack", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+WriteBack"), [$asm07.TypeRef("System.Linq.Expressions.IndexExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddReturnLabel", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"))
    );

    $.ExternalMethod({Static:true , Public:false}, "AddToBuckets", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+SwitchLabel")])]), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+SwitchLabel")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AnalyzeLambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.AnalyzedTree"), [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Linq.Expressions.LambdaExpression")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanOptimizeSwitchType", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckRethrow", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckTry", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Compile", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Delegate"), [$asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), $asm07.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Compile", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), $asm02.TypeRef("System.Reflection.Emit.MethodBuilder"), 
          $asm07.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertSwitchValue", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Decimal"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateDelegate", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Delegate"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateLazyInitializedField", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.MemberExpression"), [$.String], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateStaticField", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.Emit.FieldBuilder"), [$.String, $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DefineBlockLabels", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DefineLabel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.LabelInfo"), [$asm07.TypeRef("System.Linq.Expressions.LabelTarget")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DefineSwitchCaseLabel", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.SwitchCase"), $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Reflection.Emit.Label")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Emit", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.BlockExpression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitAddress", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitAddress", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitAddressWriteBack", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+WriteBack"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitAndAlsoBinaryExpression", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitArguments", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+WriteBack")]), [$asm02.TypeRef("System.Reflection.MethodBase"), $asm07.TypeRef("System.Linq.Expressions.IArgumentProvider")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitArguments", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+WriteBack")]), [
          $asm02.TypeRef("System.Reflection.MethodBase"), $asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitAssign", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitAssignBinaryExpression", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBinaryExpression", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBinaryExpression", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBinaryMethod", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBinaryOperator", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBinding", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.MemberBinding"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBlockExpression", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBranchAnd", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm02.TypeRef("System.Reflection.Emit.Label")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBranchBlock", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm07.TypeRef("System.Linq.Expressions.BlockExpression"), 
          $asm02.TypeRef("System.Reflection.Emit.Label")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBranchComparison", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm02.TypeRef("System.Reflection.Emit.Label")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBranchLogical", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm02.TypeRef("System.Reflection.Emit.Label")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBranchNot", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), 
          $asm02.TypeRef("System.Reflection.Emit.Label")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBranchOp", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm02.TypeRef("System.Reflection.Emit.Label")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBranchOr", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm02.TypeRef("System.Reflection.Emit.Label")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitCall", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitCatchStart", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.CatchBlock"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitClosureArgument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitClosureCreation", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitCoalesceBinaryExpression", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConditionalExpression", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConstant", 
      new JSIL.MethodSignature(null, [$.Object, $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConstantArray", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConstantExpression", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConstantOne", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConvert", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConvertArithmeticResult", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConvertUnaryExpression", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitDebugInfoExpression", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitDefaultExpression", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitDelegateConstruction", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitDelegateConstruction", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitDynamicExpression", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpression", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpression", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpressionAddress", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpressionAndBranch", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $asm02.TypeRef("System.Reflection.Emit.Label")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpressionAsType", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpressionAsVoid", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpressionAsVoid", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpressionEnd", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpressionStart", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags"), [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "EmitExtensionExpression", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitGetIndexCall", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.IndexExpression"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitGotoExpression", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitIndexAssignment", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitIndexExpression", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitInlinedInvoke", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.InvocationExpression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitInstance", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitInvocationExpression", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLabelExpression", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLambdaArgument", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLambdaBody", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLambdaBody", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.Compiler.CompilerScope"), $.Boolean, 
          $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLambdaExpression", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLambdaReferenceCoalesce", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLift", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $asm02.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Linq.Expressions.MethodCallExpression"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLiftedAndAlso", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLiftedBinaryArithmetic", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLiftedBinaryOp", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLiftedBooleanAnd", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLiftedBooleanOr", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLiftedOrElse", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLiftedRelational", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitListInit", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.ListInitExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitListInit", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ElementInit")]), $.Boolean, 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitListInitExpression", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLoopExpression", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberAddress", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.MemberInfo"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberAssignment", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberAssignment", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.MemberAssignment"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberExpression", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberGet", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Reflection.MemberInfo"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberInit", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.MemberInitExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberInit", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")]), $.Boolean, 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberInitExpression", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberListBinding", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.MemberListBinding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberMemberBinding", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.MemberMemberBinding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMethodAndAlso", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMethodCall", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $asm07.TypeRef("System.Linq.Expressions.IArgumentProvider")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMethodCall", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Reflection.MethodInfo"), 
          $asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMethodCall", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMethodCall", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"), 
          $asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMethodCallExpression", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMethodCallExpression", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMethodOrElse", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitNewArrayExpression", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitNewExpression", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitNullableCoalesce", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitNullEquality", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $asm07.TypeRef("System.Linq.Expressions.Expression"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitOrElseBinaryExpression", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitParameterExpression", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitQuote", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.UnaryExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitQuoteUnaryExpression", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitReferenceCoalesceWithoutConversion", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitRuntimeVariablesExpression", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSaveExceptionOrPop", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.CatchBlock"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSetIndexCall", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.IndexExpression"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSwitchBucket", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+SwitchInfo"), $asm02.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+SwitchLabel")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSwitchBuckets", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+SwitchInfo"), $asm02.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+SwitchLabel")])]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSwitchCases", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.SwitchExpression"), $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Reflection.Emit.Label")]), 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $asm02.TypeRef("System.Reflection.Emit.Label"), 
          $asm02.TypeRef("System.Reflection.Emit.Label"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSwitchExpression", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitThrow", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitThrowUnaryExpression", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitTryExpression", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitTypeBinaryExpression", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnary", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnaryExpression", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnaryMethod", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.UnaryExpression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnaryOperator", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnboxUnaryExpression", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnliftedAndAlso", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnliftedBinaryOp", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $asm02.TypeRef("System.Type"), 
          $asm02.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnliftedEquality", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.ExpressionType"), $asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnliftedOrElse", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.BinaryExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnreachable", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitVariableAssignment", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:true , Public:false}, "EmitWriteBack", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+WriteBack")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureLabel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.LabelInfo"), [$asm07.TypeRef("System.Linq.Expressions.LabelTarget")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnterScope", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitScope", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "FitsInBucket", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+SwitchLabel")]), $asm02.TypeRef("System.Decimal"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FreeLocal", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.Emit.LocalBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanEmitBoundConstants", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EmitDebugSymbols", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IL", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Parameters", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEqualityOperand", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLambdaArgument", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLocal", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMemberType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm02.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNamedLocal", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), [$asm02.TypeRef("System.Type"), $asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetParameterTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Type")]), [$asm07.TypeRef("System.Linq.Expressions.LambdaExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTestValueType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm07.TypeRef("System.Linq.Expressions.SwitchExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUniqueMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "HasVariables", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeMethod", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "IsChecked", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.Expressions.ExpressionType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MergeBuckets", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+SwitchLabel")])]))
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodHasByRefParameter", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotEmpty", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopLabelBlock", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Compiler.LabelScopeKind"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PushLabelBlock", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Compiler.LabelScopeKind"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReferenceLabel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.LabelInfo"), [$asm07.TypeRef("System.Linq.Expressions.LabelTarget")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Significant", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "TryEmitHashtableSwitch", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.Expressions.SwitchExpression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryEmitSwitchInstruction", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.Expressions.SwitchExpression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryPushLabelBlock", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateEmitAsTailCallFlag", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags"), [$asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateEmitAsTypeFlag", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags"), [$asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateEmitExpressionStartFlag", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags"), [$asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UseVirtual", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateLift", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_tree", $asm07.TypeRef("System.Linq.Expressions.Compiler.AnalyzedTree"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_ilg", $asm02.TypeRef("System.Reflection.Emit.ILGenerator"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_typeBuilder", $asm02.TypeRef("System.Reflection.Emit.TypeBuilder"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_method", $asm02.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "_labelBlock", $asm07.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_labelInfo", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Linq.Expressions.LabelTarget"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LabelInfo")]));

    $.Field({Static:false, Public:false}, "_scope", $asm07.TypeRef("System.Linq.Expressions.Compiler.CompilerScope"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_lambda", $asm07.TypeRef("System.Linq.Expressions.LambdaExpression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_hasClosureArgument", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_boundConstants", $asm07.TypeRef("System.Linq.Expressions.Compiler.BoundConstants"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_freeLocals", $asm07.TypeRef("System.Linq.Expressions.Compiler.KeyedQueue`2", [$asm02.TypeRef("System.Type"), $asm02.TypeRef("System.Reflection.Emit.LocalBuilder")]));

    $.Field({Static:false, Public:false}, "_sequencePointCleared", $.Boolean);

    $.Field({Static:true , Public:false}, "_Counter", $.Int32);

    $.Property({Static:false, Public:false}, "EmitDebugSymbols", $.Boolean);

    $.Property({Static:false, Public:false}, "IL", $asm02.TypeRef("System.Reflection.Emit.ILGenerator"));

    $.Property({Static:false, Public:false}, "Parameters", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Property({Static:false, Public:false}, "CanEmitBoundConstants", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Linq.Expressions.Compiler.LambdaCompiler+WriteBack */ 

JSIL.MakeDelegate("System.Linq.Expressions.Compiler.LambdaCompiler+WriteBack", false, [], 
  JSIL.MethodSignature.Void);

/* enum System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Expressions.Compiler.LambdaCompiler+CompilationFlags", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    EmitExpressionStart: 1, 
    EmitNoExpressionStart: 2, 
    EmitExpressionStartMask: 15, 
    EmitAsDefaultType: 16, 
    EmitAsVoidType: 32, 
    EmitAsTypeMask: 240, 
    EmitAsTail: 256, 
    EmitAsMiddle: 512, 
    EmitAsNoTail: 1024, 
    EmitAsTailCallMask: 3840, 
  }
);

/* class System.Linq.Expressions.Compiler.LambdaCompiler+SwitchLabel */ 

(function SwitchLabel$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LambdaCompiler+SwitchLabel", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Decimal"), $.Object, 
          $asm02.TypeRef("System.Reflection.Emit.Label")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "Key", $asm02.TypeRef("System.Decimal"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Label", $asm02.TypeRef("System.Reflection.Emit.Label"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Constant", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.LambdaCompiler+SwitchInfo */ 

(function SwitchInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LambdaCompiler+SwitchInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.SwitchExpression"), $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm02.TypeRef("System.Reflection.Emit.Label")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "Node", $asm07.TypeRef("System.Linq.Expressions.SwitchExpression"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Value", $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Default", $asm02.TypeRef("System.Reflection.Emit.Label"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Type", $asm02.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "IsUnsigned", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "Is64BitSwitch", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.LambdaCompiler+<>c__DisplayClass11_0 */ 

(function $l$gc__DisplayClass11_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LambdaCompiler+<>c__DisplayClass11_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lAddressOfWriteBack$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "instanceLocal", $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:true }, "valueLocal", $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:true }, "instanceType", $asm02.TypeRef("System.Type"));

    $.Field({Static:false, Public:true }, "pi", $asm02.TypeRef("System.Reflection.PropertyInfo"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.Compiler.LambdaCompiler+<>c__DisplayClass12_0 */ 

(function $l$gc__DisplayClass12_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LambdaCompiler+<>c__DisplayClass12_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lAddressOfWriteBack$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "instanceLocal", $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:true }, "args", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.Reflection.Emit.LocalBuilder")]));

    $.Field({Static:false, Public:true }, "valueLocal", $asm02.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:true }, "node", $asm07.TypeRef("System.Linq.Expressions.IndexExpression"));

    $.Field({Static:false, Public:true }, "instanceType", $asm02.TypeRef("System.Type"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.Compiler.LambdaCompiler+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LambdaCompiler+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.ctor$gb__53_0", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lEmitMethodCall$gb__96_0", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetParameterTypes$gb__141_0", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Type"), [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lTryEmitSwitchInstruction$gb__184_0", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.Expressions.SwitchCase")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lTryEmitSwitchInstruction$gb__184_1", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lTryEmitSwitchInstruction$gb__184_2", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+SwitchLabel"), $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+SwitchLabel")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__53_0", $asm02.TypeRef("System.Func`2", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), $.String]));

    $.Field({Static:true , Public:true }, "$l$g9__96_0", $asm02.TypeRef("System.Func`2", [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm02.TypeRef("System.Type")]));

    $.Field({Static:true , Public:true }, "$l$g9__141_0", $asm02.TypeRef("System.Func`2", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm02.TypeRef("System.Type")]));

    $.Field({Static:true , Public:true }, "$l$g9__184_1", $asm02.TypeRef("System.Func`2", [$asm07.TypeRef("System.Linq.Expressions.Expression"), $.Boolean]));

    $.Field({Static:true , Public:true }, "$l$g9__184_0", $asm02.TypeRef("System.Func`2", [$asm07.TypeRef("System.Linq.Expressions.SwitchCase"), $.Boolean]));

    $.Field({Static:true , Public:true }, "$l$g9__184_2", $asm02.TypeRef("System.Comparison`1", [$asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler+SwitchLabel")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.Compiler.LambdaCompiler+<>c__DisplayClass118_0 */ 

(function $l$gc__DisplayClass118_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LambdaCompiler+<>c__DisplayClass118_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lEmitNewArrayExpression$gb__0", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:true }, "node", $asm07.TypeRef("System.Linq.Expressions.NewArrayExpression"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm07.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.Compiler.StackSpiller */ 

(function StackSpiller$Members () {
  var $, $thisType;














































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.StackSpiller", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack"))
    );

    $.ExternalMethod({Static:true , Public:false}, "AnalyzeLambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.LambdaExpression"), [$asm07.TypeRef("System.Linq.Expressions.LambdaExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Clone", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), $.Int32], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "Free", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeBlock", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    )
      .Parameter(0, "expressions", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "MakeBlock", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeTemp", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Mark", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "RequireNoRefArgs", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Reflection.MethodBase"))
    );

    $.ExternalMethod({Static:true , Public:false}, "RequireNotRefInstance", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [$asm07.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteAssignBinaryExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteBinaryExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteBlockExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteConditionalExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteDynamicExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteExpressionFreeTemps", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteExtensionAssignment", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteExtensionExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteGotoExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteIndexAssignment", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteIndexExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteInvocationExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteLabelExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:true , Public:false}, "RewriteLambdaExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteListInitExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteLogicalBinaryExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteLoopExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteMemberAssignment", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteMemberExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteMemberInitExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteMethodCallExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteNewArrayExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteNewExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteReducibleExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteSwitchExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteThrowUnaryExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteTryExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteTypeBinaryExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteUnaryExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteVariableAssignment", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToTemp", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm07.TypeRef("System.Linq.Expressions.Expression"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyRewrite", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), $asm07.TypeRef("System.Linq.Expressions.Expression")])
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "VerifyTemps", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "_tm", $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+TempMaker"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_startingStack", $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack"));

    $.Field({Static:false, Public:false}, "_lambdaRewrite", $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+RewriteAction"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.StackSpiller+BindingRewriter */ 

(function BindingRewriter$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.StackSpiller+BindingRewriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.MemberBinding"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsBinding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.MemberBinding"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("System.Linq.Expressions.MemberBinding"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller"), 
          $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Action", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+RewriteAction"))
    );

    $.Field({Static:false, Public:false}, "_binding", $asm07.TypeRef("System.Linq.Expressions.MemberBinding"));

    $.Field({Static:false, Public:false}, "_action", $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+RewriteAction"));

    $.Field({Static:false, Public:false}, "_spiller", $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller"));

    $.Property({Static:false, Public:false}, "Action", $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+RewriteAction"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.StackSpiller+MemberMemberBindingRewriter */ 

(function MemberMemberBindingRewriter$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+BindingRewriter"), 
      Name: "System.Linq.Expressions.Compiler.StackSpiller+MemberMemberBindingRewriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.MemberMemberBinding"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller"), 
          $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsBinding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.MemberBinding"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.Field({Static:false, Public:false}, "_bindings", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.MemberBinding")]));

    $.Field({Static:false, Public:false}, "_bindingRewriters", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+BindingRewriter")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.StackSpiller+ListBindingRewriter */ 

(function ListBindingRewriter$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+BindingRewriter"), 
      Name: "System.Linq.Expressions.Compiler.StackSpiller+ListBindingRewriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.MemberListBinding"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller"), 
          $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsBinding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.MemberBinding"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.Field({Static:false, Public:false}, "_inits", $asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ElementInit")]));

    $.Field({Static:false, Public:false}, "_childRewriters", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+ChildRewriter")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.StackSpiller+MemberAssignmentRewriter */ 

(function MemberAssignmentRewriter$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+BindingRewriter"), 
      Name: "System.Linq.Expressions.Compiler.StackSpiller+MemberAssignmentRewriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.MemberAssignment"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller"), 
          $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsBinding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.MemberBinding"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.Field({Static:false, Public:false}, "_rhs", $asm07.TypeRef("System.Linq.Expressions.Expression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Linq.Expressions.Compiler.StackSpiller+Stack */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Expressions.Compiler.StackSpiller+Stack", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Empty: 0, 
    NonEmpty: 1, 
  }
);

/* enum System.Linq.Expressions.Compiler.StackSpiller+RewriteAction */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Expressions.Compiler.StackSpiller+RewriteAction", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Copy: 1, 
    SpillStack: 3, 
  }
);

/* struct System.Linq.Expressions.Compiler.StackSpiller+Result */ 

(function Result$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Linq.Expressions.Compiler.StackSpiller+Result", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+RewriteAction"), $asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "Action", $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+RewriteAction"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Node", $asm07.TypeRef("System.Linq.Expressions.Expression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.StackSpiller+TempMaker */ 

(function TempMaker$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.StackSpiller+TempMaker", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Free", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "FreeTemp", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.ParameterExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Temps", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Mark", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Temp", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm02.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "UseTemp", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyTemps", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Field({Static:false, Public:false}, "_temp", $.Int32);

    $.Field({Static:false, Public:false}, "_freeTemps", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Field({Static:false, Public:false}, "_usedTemps", $asm05.TypeRef("System.Collections.Generic.Stack`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Field({Static:false, Public:false}, "_temps", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Property({Static:false, Public:false}, "Temps", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.StackSpiller+ChildRewriter */ 

(function ChildRewriter$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.StackSpiller+ChildRewriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller"), $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddArguments", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Linq.Expressions.IArgumentProvider"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureDone", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Finish", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Result"), [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Action", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+RewriteAction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Rewrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_self", $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expressions", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")]));

    $.Field({Static:false, Public:false}, "_expressionsCount", $.Int32);

    $.Field({Static:false, Public:false}, "_comma", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]));

    $.Field({Static:false, Public:false}, "_action", $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+RewriteAction"));

    $.Field({Static:false, Public:false}, "_stack", $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+Stack"));

    $.Field({Static:false, Public:false}, "_done", $.Boolean);

    $.Property({Static:false, Public:false}, "Rewrite", $.Boolean);

    $.Property({Static:false, Public:false}, "Action", $asm07.TypeRef("System.Linq.Expressions.Compiler.StackSpiller+RewriteAction"));

    $.Property({Static:false, Public:false}, "Item", $asm07.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false}, "Item", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Linq.Expressions.Compiler.StackSpiller+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.StackSpiller+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lRequireNoRefArgs$gb__45_0", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Reflection.ParameterInfo")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__45_0", $asm02.TypeRef("System.Func`2", [$asm02.TypeRef("System.Reflection.ParameterInfo"), $.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.Compiler.SpilledExpressionBlock */ 

(function SpilledExpressionBlock$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.BlockN"), 
      Name: "System.Linq.Expressions.Compiler.SpilledExpressionBlock", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Linq.Expressions.Expression")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.VariableBinder */ 

(function VariableBinder$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Linq.Expressions.ExpressionVisitor"), 
      Name: "System.Linq.Expressions.Compiler.VariableBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Bind", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Compiler.AnalyzedTree"), [$asm07.TypeRef("System.Linq.Expressions.LambdaExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentLambdaName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "MergeScopes", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Linq.Expressions.Expression")]), [$asm07.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reference", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm07.TypeRef("System.Linq.Expressions.Compiler.VariableStorageKind")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBlock", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.BlockExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCatchBlock", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm07.TypeRef("System.Linq.Expressions.CatchBlock")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConstant", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ConstantExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitInvocation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.InvocationExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitRuntimeVariables", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitUnary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Linq.Expressions.Expression"), [$asm07.TypeRef("System.Linq.Expressions.UnaryExpression")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_tree", $asm07.TypeRef("System.Linq.Expressions.Compiler.AnalyzedTree"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_scopes", $asm05.TypeRef("System.Collections.Generic.Stack`1", [$asm07.TypeRef("System.Linq.Expressions.Compiler.CompilerScope")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_constants", $asm05.TypeRef("System.Collections.Generic.Stack`1", [$asm07.TypeRef("System.Linq.Expressions.Compiler.BoundConstants")]));

    $.Field({Static:false, Public:false}, "_inQuote", $.Boolean);

    $.Property({Static:false, Public:false}, "CurrentLambdaName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Management");
JSIL.DeclareNamespace("System.Management.Instrumentation");
/* class System.Management.Instrumentation.ManagementEntityAttribute */ 

(function ManagementEntityAttribute$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Attribute"), 
      Name: "System.Management.Instrumentation.ManagementEntityAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_External", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Singleton", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_External", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Singleton", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_nounName", $.String);

    $.Field({Static:false, Public:false}, "_isExternalClass", $.Boolean);

    $.Field({Static:false, Public:false}, "_isSingleton", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "External", $.Boolean);

    $.Property({Static:false, Public:true }, "Singleton", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.Class]; });

})();

/* enum System.Management.Instrumentation.ManagementHostingModel */ 

JSIL.MakeEnum(
  {
    FullName: "System.Management.Instrumentation.ManagementHostingModel", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Decoupled: 0, 
    NetworkService: 1, 
    LocalService: 2, 
    LocalSystem: 3, 
  }
);

/* class System.Management.Instrumentation.WmiConfigurationAttribute */ 

(function WmiConfigurationAttribute$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Attribute"), 
      Name: "System.Management.Instrumentation.WmiConfigurationAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HostingGroup", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HostingModel", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Management.Instrumentation.ManagementHostingModel"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IdentifyLevel", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NamespaceSecurity", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Scope", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityRestriction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HostingGroup", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HostingModel", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Management.Instrumentation.ManagementHostingModel"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IdentifyLevel", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NamespaceSecurity", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecurityRestriction", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_Scope", $.String);

    $.Field({Static:false, Public:false}, "_SecurityRestriction", $.String);

    $.Field({Static:false, Public:false}, "_NamespaceSecurity", $.String);

    $.Field({Static:false, Public:false}, "_HostingModel", $asm07.TypeRef("System.Management.Instrumentation.ManagementHostingModel"));

    $.Field({Static:false, Public:false}, "_HostingGroup", $.String);

    $.Field({Static:false, Public:false}, "_IdentifyLevel", $.Boolean);

    $.Property({Static:false, Public:true }, "SecurityRestriction", $.String);

    $.Property({Static:false, Public:true }, "NamespaceSecurity", $.String);

    $.Property({Static:false, Public:true }, "IdentifyLevel", $.Boolean);

    $.Property({Static:false, Public:true }, "HostingModel", $asm07.TypeRef("System.Management.Instrumentation.ManagementHostingModel"));

    $.Property({Static:false, Public:true }, "HostingGroup", $.String);

    $.Property({Static:false, Public:true }, "Scope", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.Assembly]; });

})();

/* class System.Management.Instrumentation.ManagementMemberAttribute */ 

(function ManagementMemberAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Attribute"), 
      Name: "System.Management.Instrumentation.ManagementMemberAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_Name", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.All]; });

})();

/* class System.Management.Instrumentation.ManagementNewInstanceAttribute */ 

(function ManagementNewInstanceAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), 
      Name: "System.Management.Instrumentation.ManagementNewInstanceAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.$Flags("Constructor", "Method")]; });

})();

/* class System.Management.Instrumentation.ManagementBindAttribute */ 

(function ManagementBindAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Management.Instrumentation.ManagementNewInstanceAttribute"), 
      Name: "System.Management.Instrumentation.ManagementBindAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "_schema", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Schema", $asm02.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.$Flags("Constructor", "Method")]; });

})();

/* class System.Management.Instrumentation.ManagementCreateAttribute */ 

(function ManagementCreateAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Management.Instrumentation.ManagementNewInstanceAttribute"), 
      Name: "System.Management.Instrumentation.ManagementCreateAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.$Flags("Constructor", "Method")]; });

})();

/* class System.Management.Instrumentation.ManagementRemoveAttribute */ 

(function ManagementRemoveAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), 
      Name: "System.Management.Instrumentation.ManagementRemoveAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "_schema", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Schema", $asm02.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.Method]; });

})();

/* class System.Management.Instrumentation.ManagementEnumeratorAttribute */ 

(function ManagementEnumeratorAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Management.Instrumentation.ManagementNewInstanceAttribute"), 
      Name: "System.Management.Instrumentation.ManagementEnumeratorAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "_schema", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Schema", $asm02.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.$Flags("Constructor", "Method")]; });

})();

/* class System.Management.Instrumentation.ManagementProbeAttribute */ 

(function ManagementProbeAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), 
      Name: "System.Management.Instrumentation.ManagementProbeAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "_schema", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Schema", $asm02.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.$Flags("Field", "Property")]; });

})();

/* class System.Management.Instrumentation.ManagementTaskAttribute */ 

(function ManagementTaskAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), 
      Name: "System.Management.Instrumentation.ManagementTaskAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "_schema", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Schema", $asm02.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.Method]; });

})();

/* class System.Management.Instrumentation.ManagementKeyAttribute */ 

(function ManagementKeyAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), 
      Name: "System.Management.Instrumentation.ManagementKeyAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.$Flags("Field", "Property")]; });

})();

/* class System.Management.Instrumentation.ManagementReferenceAttribute */ 

(function ManagementReferenceAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Attribute"), 
      Name: "System.Management.Instrumentation.ManagementReferenceAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_Type", $.String);

    $.Property({Static:false, Public:true }, "Type", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.$Flags("Field", "Parameter", "Property")]; });

})();

/* enum System.Management.Instrumentation.ManagementConfigurationType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Management.Instrumentation.ManagementConfigurationType", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Apply: 0, 
    OnCommit: 1, 
  }
);

/* class System.Management.Instrumentation.ManagementConfigurationAttribute */ 

(function ManagementConfigurationAttribute$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), 
      Name: "System.Management.Instrumentation.ManagementConfigurationAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Mode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Management.Instrumentation.ManagementConfigurationType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Mode", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Management.Instrumentation.ManagementConfigurationType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "updateMode", $asm07.TypeRef("System.Management.Instrumentation.ManagementConfigurationType"));

    $.Field({Static:false, Public:false}, "_schema", $asm02.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Mode", $asm07.TypeRef("System.Management.Instrumentation.ManagementConfigurationType"));

    $.Property({Static:false, Public:true }, "Schema", $asm02.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.$Flags("Field", "Property")]; });

})();

/* class System.Management.Instrumentation.ManagementCommitAttribute */ 

(function ManagementCommitAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), 
      Name: "System.Management.Instrumentation.ManagementCommitAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.Method]; });

})();

/* class System.Management.Instrumentation.ManagementNameAttribute */ 

(function ManagementNameAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Attribute"), 
      Name: "System.Management.Instrumentation.ManagementNameAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_Name", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.Parameter]; });

})();

/* class System.Management.Instrumentation.InstrumentationBaseException */ 

(function InstrumentationBaseException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Exception"), 
      Name: "System.Management.Instrumentation.InstrumentationBaseException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm02.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm02.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Management.Instrumentation.InstrumentationException */ 

(function InstrumentationException$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Management.Instrumentation.InstrumentationBaseException"), 
      Name: "System.Management.Instrumentation.InstrumentationException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm02.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm02.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Management.Instrumentation.InstanceNotFoundException */ 

(function InstanceNotFoundException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Management.Instrumentation.InstrumentationException"), 
      Name: "System.Management.Instrumentation.InstanceNotFoundException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm02.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm02.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Diagnostics");
/* class System.Diagnostics.EventSchemaTraceListener */ 

(function EventSchemaTraceListener$Members () {
  var $, $thisType;




































  JSIL.MakeType({
      BaseType: $asm05.TypeRef("System.Diagnostics.TextWriterTraceListener"), 
      Name: "System.Diagnostics.EventSchemaTraceListener", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $asm07.TypeRef("System.Diagnostics.TraceLogRetentionOption")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $asm07.TypeRef("System.Diagnostics.TraceLogRetentionOption"), 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $asm07.TypeRef("System.Diagnostics.TraceLogRetentionOption"), 
          $.Int64, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "_InternalBuildRaw", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Text.StringBuilder"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "_InternalWriteRaw", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Text.StringBuilder"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "_SetMaxFileSize", 
      new JSIL.MethodSignature(null, [$.Int64, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "_SetMaxNumberOfFiles", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildEscaped", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Text.StringBuilder"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildFooter", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Text.StringBuilder"), $asm05.TypeRef("System.Diagnostics.TraceEventType"), 
          $asm05.TypeRef("System.Diagnostics.TraceEventCache"), $.Boolean, 
          $asm05.TypeRef("System.Diagnostics.TraceOptions")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildHeader", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Text.StringBuilder"), $.String, 
          $asm05.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $asm05.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $.Boolean, $asm05.TypeRef("System.Diagnostics.TraceOptions")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "BuildMessage", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Text.StringBuilder"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildUserData", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Text.StringBuilder"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureWriter", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Fail", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_BufferSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsThreadSafe", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaximumFileSize", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaximumNumberOfFiles", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TraceLogRetentionOption", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.TraceLogRetentionOption"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Writer", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.IO.TextWriter"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSupportedAttributes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Writer", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.IO.TextWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceData", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm05.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.Object
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceData", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm05.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Parameter(4, "data", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm05.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Parameter(5, "args", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm05.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceTransfer", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $.Int32, $.String, 
          $asm02.TypeRef("System.Guid")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteLine", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:false}, "s_optionBufferSize", $.String, "bufferSize");

    $.Constant({Static:true , Public:false}, "s_optionLogRetention", $.String, "logRetentionOption");

    $.Constant({Static:true , Public:false}, "s_optionMaximumFileSize", $.String, "maximumFileSize");

    $.Constant({Static:true , Public:false}, "s_optionMaximumNumberOfFiles", $.String, "maximumNumberOfFiles");

    $.Constant({Static:true , Public:false}, "s_userDataHeader", $.String, "<System.Diagnostics.UserData xmlns=\"http://schemas.microsoft.com/win/2006/09/System.Diagnostics/UserData/\">");

    $.Constant({Static:true , Public:false}, "s_eventHeader", $.String, "<Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\"><System><Provider Guid=\"");

    $.Constant({Static:true , Public:false}, "s_defaultPayloadSize", $.Int32, 512);

    $.Constant({Static:true , Public:false}, "_retryThreshold", $.Int32, 2);

    $.Field({Static:true , Public:false, ReadOnly:true }, "machineName", $.String);

    $.Field({Static:false, Public:false}, "traceWriter", $asm07.TypeRef("System.Diagnostics.EventSchemaTraceListener+TraceWriter"));

    $.Field({Static:false, Public:false}, "fileName", $.String);

    $.Field({Static:false, Public:false}, "_initialized", $.Boolean);

    $.Field({Static:false, Public:false}, "_bufferSize", $.Int32);

    $.Field({Static:false, Public:false}, "_retention", $asm07.TypeRef("System.Diagnostics.TraceLogRetentionOption"));

    $.Field({Static:false, Public:false}, "_maxFileSize", $.Int64);

    $.Field({Static:false, Public:false}, "_maxNumberOfFiles", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_lockObject", $.Object);

    $.Property({Static:false, Public:true }, "Writer", $asm02.TypeRef("System.IO.TextWriter"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsThreadSafe", $.Boolean);

    $.Property({Static:false, Public:true }, "BufferSize", $.Int32);

    $.Property({Static:false, Public:true }, "TraceLogRetentionOption", $asm07.TypeRef("System.Diagnostics.TraceLogRetentionOption"));

    $.Property({Static:false, Public:true }, "MaximumFileSize", $.Int64);

    $.Property({Static:false, Public:true }, "MaximumNumberOfFiles", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.EventSchemaTraceListener+TraceWriter */ 

(function TraceWriter$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.IO.TextWriter"), 
      Name: "System.Diagnostics.EventSchemaTraceListener+TraceWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $asm07.TypeRef("System.Diagnostics.TraceLogRetentionOption"), $.Int64, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Encoding", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEncodingWithFallback", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Text.Encoding"), [$asm02.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "encNoBOMwithFallback", $asm02.TypeRef("System.Text.Encoding"));

    $.Field({Static:false, Public:false}, "stream", $asm02.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "m_lockObject", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Encoding", $asm02.TypeRef("System.Text.Encoding"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.TraceLogRetentionOption */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.TraceLogRetentionOption", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    UnlimitedSequentialFiles: 0, 
    LimitedCircularFiles: 1, 
    SingleFileUnboundedSize: 2, 
    LimitedSequentialFiles: 3, 
    SingleFileBoundedSize: 4, 
  }
);

/* class System.Diagnostics.UnescapedXmlDiagnosticData */ 

(function UnescapedXmlDiagnosticData$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.UnescapedXmlDiagnosticData", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnescapedXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UnescapedXml", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_xmlString", $.String);

    $.Property({Static:false, Public:true }, "UnescapedXml", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Diagnostics.PerformanceData");
/* class System.Diagnostics.PerformanceData.CounterData */ 

(function CounterData$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.PerformanceData.CounterData", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Pointer", [$.Int64]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Decrement", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_RawValue", 
      JSIL.MethodSignature.Return($.Int64)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Int64)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Increment", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "IncrementBy", 
      JSIL.MethodSignature.Action($.Int64)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_RawValue", 
      JSIL.MethodSignature.Action($.Int64)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($.Int64)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_offset", $jsilcore.TypeRef("JSIL.Pointer", [$.Int64]))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:true }, "Value", $.Int64);

    $.Property({Static:false, Public:true }, "RawValue", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet */ 

(function CounterSetInstanceCounterDataSet$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstance"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Object"), "Finalize")
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.PerformanceData.CounterData"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.PerformanceData.CounterData"), [$.String])
    );

    $.Field({Static:false, Public:false}, "m_instance", $asm07.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstance"));

    $.Field({Static:false, Public:false}, "m_counters", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm07.TypeRef("System.Diagnostics.PerformanceData.CounterData")]));

    $.Field({Static:false, Public:false}, "m_disposed", $.Int32);

    $.Field({Static:false, Public:false}, "m_dataBlock", $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:true }, "Item", $asm07.TypeRef("System.Diagnostics.PerformanceData.CounterData"));

    $.Property({Static:false, Public:true }, "Item", $asm07.TypeRef("System.Diagnostics.PerformanceData.CounterData"));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Diagnostics.PerformanceData.CounterSet */ 

(function CounterSet$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.PerformanceData.CounterSet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Guid"), $asm02.TypeRef("System.Guid"), 
          $asm07.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceType")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "AddCounter", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Diagnostics.PerformanceData.CounterType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddCounter", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm07.TypeRef("System.Diagnostics.PerformanceData.CounterType"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateCounterSetInstance", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstance"), [$.String])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Object"), "Finalize");

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_platformNotSupported", $.Boolean);

    $.Field({Static:false, Public:false}, "m_provider", $asm07.TypeRef("System.Diagnostics.PerformanceData.PerfProvider"));

    $.Field({Static:false, Public:false}, "m_providerGuid", $asm02.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "m_counterSet", $asm02.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "m_instType", $asm07.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceType"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_lockObject", $.Object);

    $.Field({Static:false, Public:false}, "m_instanceCreated", $.Boolean);

    $.Field({Static:false, Public:false}, "m_stringToId", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32]));

    $.Field({Static:false, Public:false}, "m_idToCounter", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm07.TypeRef("System.Diagnostics.PerformanceData.CounterType")]));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.PerformanceData.CounterSetInstance */ 

(function CounterSetInstance$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.PerformanceData.CounterSetInstance", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Diagnostics.PerformanceData.CounterSet"), $.String])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Object"), "Finalize")
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Counters", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet"))
    );

    $.Field({Static:false, Public:false}, "m_counterSet", $asm07.TypeRef("System.Diagnostics.PerformanceData.CounterSet"));

    $.Field({Static:false, Public:false}, "m_instName", $.String);

    $.Field({Static:false, Public:false}, "m_active", $.Int32);

    $.Field({Static:false, Public:false}, "m_counters", $asm07.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet"));

    $.Field({Static:false, Public:false}, "m_nativeInst", $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+PerfCounterSetInstanceStruct")]))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:true }, "Counters", $asm07.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet"));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.PerformanceData.CounterSetInstanceType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.PerformanceData.CounterSetInstanceType", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Single: 0, 
    Multiple: 2, 
    GlobalAggregate: 4, 
    MultipleAggregate: 6, 
    GlobalAggregateWithHistory: 11, 
    InstanceAggregate: 22, 
  }
);

/* enum System.Diagnostics.PerformanceData.CounterType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.PerformanceData.CounterType", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    RawDataHex32: 0, 
    RawDataHex64: 256, 
    RawData32: 65536, 
    RawData64: 65792, 
    Delta32: 4195328, 
    Delta64: 4195584, 
    SampleCounter: 4260864, 
    QueueLength: 4523008, 
    LargeQueueLength: 4523264, 
    QueueLength100Ns: 5571840, 
    QueueLengthObjectTime: 6620416, 
    RateOfCountPerSecond32: 272696320, 
    RateOfCountPerSecond64: 272696576, 
    RawFraction32: 537003008, 
    RawFraction64: 537003264, 
    PercentageActive: 541132032, 
    PrecisionSystemTimer: 541525248, 
    PercentageActive100Ns: 542180608, 
    PrecisionTimer100Ns: 542573824, 
    ObjectSpecificTimer: 543229184, 
    PrecisionObjectSpecificTimer: 543622400, 
    SampleFraction: 549585920, 
    PercentageNotActive: 557909248, 
    PercentageNotActive100Ns: 558957824, 
    MultiTimerPercentageActive: 574686464, 
    MultiTimerPercentageActive100Ns: 575735040, 
    MultiTimerPercentageNotActive: 591463680, 
    MultiTimerPercentageNotActive100Ns: 592512256, 
    AverageTimer32: 805438464, 
    ElapsedTime: 807666944, 
    AverageCount64: 1073874176, 
    SampleBase: 1073939457, 
    AverageBase: 1073939458, 
    RawBase32: 1073939459, 
    RawBase64: 1073939712, 
    MultiTimerBase: 1107494144, 
  }
);

/* class System.Diagnostics.PerformanceData.PerfProvider */ 

(function PerfProvider$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.PerformanceData.PerfProvider", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Guid"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_providerGuid", $asm02.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "m_counterSet", $.Int32);

    $.Field({Static:false, Public:false}, "m_hProvider", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafePerfProviderHandle"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.PerformanceData.PerfProviderCollection */ 

(function PerfProviderCollection$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("System.Diagnostics.PerformanceData.PerfProviderCollection", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_s_lockObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "QueryProvider", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.PerformanceData.PerfProvider"), [$asm02.TypeRef("System.Guid")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "RegisterCounterSet", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveProvider", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Guid"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "UnregisterCounterSet", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateCounterSetInstanceType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateCounterType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Diagnostics.PerformanceData.CounterType")])
    );

    $.Field({Static:true , Public:false}, "s_hiddenInternalSyncObject", $.Object);

    $.Field({Static:true , Public:false}, "s_providerList", $asm02.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Diagnostics.PerformanceData.PerfProvider")]));

    $.Field({Static:true , Public:false}, "s_counterSetList", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $.Int32]));

    $.Field({Static:true , Public:false}, "s_counterTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Diagnostics.PerformanceData.CounterType")]));

    $.Field({Static:true , Public:false}, "s_counterSetInstanceTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceType")]));

    $.Property({Static:true , Public:false}, "s_lockObject", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Diagnostics.Eventing");
/* struct System.Diagnostics.Eventing.EventDescriptor */ 

(function EventDescriptor$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Diagnostics.Eventing.EventDescriptor", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 7, 
      ExplicitLayout: true, 
      SizeBytes: 16, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Byte, 
          $.Byte, $.Byte, 
          $.Byte, $.Int32, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Channel", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Keywords", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Level", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Opcode", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Task", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.Field({Static:false, Public:false, Offset: 0}, "m_id", $.UInt16);

    $.Field({Static:false, Public:false, Offset: 2}, "m_version", $.Byte);

    $.Field({Static:false, Public:false, Offset: 3}, "m_channel", $.Byte);

    $.Field({Static:false, Public:false, Offset: 4}, "m_level", $.Byte);

    $.Field({Static:false, Public:false, Offset: 5}, "m_opcode", $.Byte);

    $.Field({Static:false, Public:false, Offset: 6}, "m_task", $.UInt16);

    $.Field({Static:false, Public:false, Offset: 8}, "m_keywords", $.Int64);

    $.Property({Static:false, Public:true }, "EventId", $.Int32);

    $.Property({Static:false, Public:true }, "Version", $.Byte);

    $.Property({Static:false, Public:true }, "Channel", $.Byte);

    $.Property({Static:false, Public:true }, "Level", $.Byte);

    $.Property({Static:false, Public:true }, "Opcode", $.Byte);

    $.Property({Static:false, Public:true }, "Task", $.Int32);

    $.Property({Static:false, Public:true }, "Keywords", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.EventProvider */ 

(function EventProvider$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.EventProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Guid"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateActivityId", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Guid"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Deregister", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EncodeObject", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Object]), $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("System.Diagnostics.Eventing.EventProvider+EventData")]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EtwEnableCallBack", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Guid")]), $.Int32, 
          $.Byte, $.Int64, 
          $.Int64, $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Void")]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm02.TypeRef("System.Void")])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EtwRegister", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm02.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:true , Public:false}, "GetActivityId", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Guid"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetLastWriteEventError", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.Eventing.EventProvider+WriteEventErrorCode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "IsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$.Byte, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetActivityId", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Guid")]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetLastError", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "eventPayload", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), $.String])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), $.Int32, 
          $.IntPtr
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WriteMessageEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Byte, 
          $.Int64
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WriteMessageEvent", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTransferEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), $asm02.TypeRef("System.Guid"), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Parameter(2, "eventPayload", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "WriteTransferEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), $asm02.TypeRef("System.Guid"), 
          $.Int32, $.IntPtr
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_etwCallback", $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EtwEnableCallback"))
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_regHandle", $.Int64);

    $.Field({Static:false, Public:false}, "m_level", $.Byte);

    $.Field({Static:false, Public:false}, "m_anyKeywordMask", $.Int64);

    $.Field({Static:false, Public:false}, "m_allKeywordMask", $.Int64);

    $.Field({Static:false, Public:false}, "m_enabled", $.Int32);

    $.Field({Static:false, Public:false}, "m_providerId", $asm02.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "m_disposed", $.Int32);

    $.Field({Static:true , Public:false}, "t_returnCode", $asm07.TypeRef("System.Diagnostics.Eventing.EventProvider+WriteEventErrorCode"))
      .Attribute($asm02.TypeRef("System.ThreadStaticAttribute"));

    $.Field({Static:true , Public:false}, "s_platformNotSupported", $.Boolean);

    $.Field({Static:true , Public:false}, "s_preWin7", $.Boolean);

    $.Constant({Static:true , Public:false}, "s_basicTypeAllocationBufferSize", $.Int32, 16);

    $.Constant({Static:true , Public:false}, "s_etwMaxMumberArguments", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "s_etwAPIMaxStringCount", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "s_maxEventDataDescriptors", $.Int32, 128);

    $.Constant({Static:true , Public:false}, "s_traceEventMaximumSize", $.Int32, 65482);

    $.Constant({Static:true , Public:false}, "s_traceEventMaximumStringSize", $.Int32, 32724);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.Eventing.EventProvider+WriteEventErrorCode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.Eventing.EventProvider+WriteEventErrorCode", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NoError: 0, 
    NoFreeBuffers: 1, 
    EventTooBig: 2, 
  }
);

/* struct System.Diagnostics.Eventing.EventProvider+EventData */ 

(function EventData$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.ValueType"), 
      Name: "System.Diagnostics.Eventing.EventProvider+EventData", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
      SizeBytes: 16, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false, Offset: 0}, "DataPointer", $.UInt64);

    $.Field({Static:false, Public:false, Offset: 8}, "Size", $.UInt32);

    $.Field({Static:false, Public:false, Offset: 12}, "Reserved", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.Eventing.EventProvider+ActivityControl */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.Eventing.EventProvider+ActivityControl", 
    BaseType: $asm02.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EVENT_ACTIVITY_CTRL_GET_ID: 1, 
    EVENT_ACTIVITY_CTRL_SET_ID: 2, 
    EVENT_ACTIVITY_CTRL_CREATE_ID: 3, 
    EVENT_ACTIVITY_CTRL_GET_SET_ID: 4, 
    EVENT_ACTIVITY_CTRL_CREATE_SET_ID: 5, 
  }
);

/* class System.Diagnostics.Eventing.EventProviderTraceListener */ 

(function EventProviderTraceListener$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm05.TypeRef("System.Diagnostics.TraceListener"), 
      Name: "System.Diagnostics.Eventing.EventProviderTraceListener", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Fail", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Delimiter", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsThreadSafe", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSupportedAttributes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "InitProvider", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Delimiter", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceData", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm05.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceData", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm05.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(4, "data", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm05.TypeRef("System.Diagnostics.TraceEventType"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm05.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm05.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(5, "args", function (_) {
          _.Attribute($asm02.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceTransfer", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $.Int32, $.String, 
          $asm02.TypeRef("System.Guid")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteLine", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "m_provider", $asm07.TypeRef("System.Diagnostics.Eventing.EventProvider"));

    $.Constant({Static:true , Public:false}, "s_nullStringValue", $.String, "null");

    $.Constant({Static:true , Public:false}, "s_nullStringComaValue", $.String, "null,");

    $.Constant({Static:true , Public:false}, "s_nullCStringValue", $.String, ": null");

    $.Constant({Static:true , Public:false}, "s_activityIdString", $.String, "activityId=");

    $.Constant({Static:true , Public:false}, "s_relatedActivityIdString", $.String, "relatedActivityId=");

    $.Constant({Static:true , Public:false}, "s_callStackString", $.String, " : CallStack:");

    $.Constant({Static:true , Public:false}, "s_optionDelimiter", $.String, "delimiter");

    $.Field({Static:false, Public:false}, "m_delimiter", $.String);

    $.Field({Static:false, Public:false}, "m_initializedDelim", $.Int32);

    $.Constant({Static:true , Public:false}, "s_keyWordMask", $.UInt32, 4294967040);

    $.Constant({Static:true , Public:false}, "s_defaultPayloadSize", $.Int32, 512);

    $.Field({Static:false, Public:false}, "m_Lock", $.Object);

    $.Property({Static:false, Public:true }, "Delimiter", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsThreadSafe", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Diagnostics.Eventing.Reader");
/* class System.Diagnostics.Eventing.Reader.EventBookmark */ 

(function EventBookmark$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventBookmark", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm02.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BookmarkText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm02.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm02.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm02.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData")
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "bookmark", $.String);

    $.Property({Static:false, Public:false}, "BookmarkText", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.Runtime.Serialization.ISerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.Eventing.Reader.EventLogType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.Eventing.Reader.EventLogType", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Administrative: 0, 
    Operational: 1, 
    Analytical: 2, 
    Debug: 3, 
  }
);

/* enum System.Diagnostics.Eventing.Reader.EventLogIsolation */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.Eventing.Reader.EventLogIsolation", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Application: 0, 
    System: 1, 
    Custom: 2, 
  }
);

/* enum System.Diagnostics.Eventing.Reader.EventLogMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.Eventing.Reader.EventLogMode", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Circular: 0, 
    AutoBackup: 1, 
    Retain: 2, 
  }
);

/* class System.Diagnostics.Eventing.Reader.EventLogConfiguration */ 

(function EventLogConfiguration$Members () {
  var $, $thisType;































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogConfiguration", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsClassicLog", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogFilePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogIsolation", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogIsolation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogMode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaximumSizeInBytes", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OwningProviderName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderBufferSize", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderControlGuid", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Guid")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderKeywords", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Int64]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderLatency", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderLevel", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderMaximumNumberOfBuffers", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderMinimumNumberOfBuffers", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderNames", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityDescriptor", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "SaveChanges", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsEnabled", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LogFilePath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LogMode", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaximumSizeInBytes", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProviderKeywords", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Nullable`1", [$.Int64]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProviderLevel", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecurityDescriptor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "handle", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Field({Static:false, Public:false}, "session", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"));

    $.Field({Static:false, Public:false}, "channelName", $.String);

    $.Property({Static:false, Public:true }, "LogName", $.String);

    $.Property({Static:false, Public:true }, "LogType", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogType"));

    $.Property({Static:false, Public:true }, "LogIsolation", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogIsolation"));

    $.Property({Static:false, Public:true }, "IsEnabled", $.Boolean);

    $.Property({Static:false, Public:true }, "IsClassicLog", $.Boolean);

    $.Property({Static:false, Public:true }, "SecurityDescriptor", $.String);

    $.Property({Static:false, Public:true }, "LogFilePath", $.String);

    $.Property({Static:false, Public:true }, "MaximumSizeInBytes", $.Int64);

    $.Property({Static:false, Public:true }, "LogMode", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogMode"));

    $.Property({Static:false, Public:true }, "OwningProviderName", $.String);

    $.Property({Static:false, Public:true }, "ProviderNames", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]));

    $.Property({Static:false, Public:true }, "ProviderLevel", $asm02.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "ProviderKeywords", $asm02.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true }, "ProviderBufferSize", $asm02.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "ProviderMinimumNumberOfBuffers", $asm02.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "ProviderMaximumNumberOfBuffers", $asm02.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "ProviderLatency", $asm02.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "ProviderControlGuid", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Guid")]));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogLink */ 

(function EventLogLink$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogLink", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32, $asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.String, $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChannelId", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsImported", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareData", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "channelName", $.String);

    $.Field({Static:false, Public:false}, "isImported", $.Boolean);

    $.Field({Static:false, Public:false}, "displayName", $.String);

    $.Field({Static:false, Public:false}, "channelId", $.UInt32);

    $.Field({Static:false, Public:false}, "dataReady", $.Boolean);

    $.Field({Static:false, Public:false}, "pmReference", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"));

    $.Field({Static:false, Public:false}, "syncObject", $.Object);

    $.Property({Static:false, Public:true }, "LogName", $.String);

    $.Property({Static:false, Public:true }, "IsImported", $.Boolean);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    $.Property({Static:false, Public:false}, "ChannelId", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogStatus */ 

(function EventLogStatus$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogStatus", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StatusCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "channelName", $.String);

    $.Field({Static:false, Public:false}, "win32ErrorCode", $.Int32);

    $.Property({Static:false, Public:true }, "LogName", $.String);

    $.Property({Static:false, Public:true }, "StatusCode", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventProperty */ 

(function EventProperty$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventProperty", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:false}, "value", $.Object);

    $.Property({Static:false, Public:true }, "Value", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogPropertySelector */ 

(function EventLogPropertySelector$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogPropertySelector", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"))
    );

    $.Field({Static:false, Public:false}, "renderContextHandleValues", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Property({Static:false, Public:false}, "Handle", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventRecord */ 

(function EventRecord$Members () {
  var $, $thisType;































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventRecord", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FormatDescription", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FormatDescription", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ActivityId", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Guid")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Bookmark", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keywords", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Int64]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeywordsDisplayNames", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Level", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LevelDisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LogName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MachineName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Opcode", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Int16]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OpcodeDisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProcessId", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventProperty")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProviderId", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Guid")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProviderName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Qualifiers", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RecordId", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Int64]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RelatedActivityId", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Guid")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Task", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TaskDisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ThreadId", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TimeCreated", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UserId", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Security.Principal.SecurityIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Version", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Version", $asm02.TypeRef("System.Nullable`1", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "Level", $asm02.TypeRef("System.Nullable`1", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "Task", $asm02.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "Opcode", $asm02.TypeRef("System.Nullable`1", [$.Int16]));

    $.Property({Static:false, Public:true , Virtual:true }, "Keywords", $asm02.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true , Virtual:true }, "RecordId", $asm02.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true , Virtual:true }, "ProviderName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ProviderId", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Guid")]));

    $.Property({Static:false, Public:true , Virtual:true }, "LogName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ProcessId", $asm02.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "ThreadId", $asm02.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "MachineName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "UserId", $asm02.TypeRef("System.Security.Principal.SecurityIdentifier"));

    $.Property({Static:false, Public:true , Virtual:true }, "TimeCreated", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ActivityId", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Guid")]));

    $.Property({Static:false, Public:true , Virtual:true }, "RelatedActivityId", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Guid")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Qualifiers", $asm02.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "LevelDisplayName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "OpcodeDisplayName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "TaskDisplayName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "KeywordsDisplayNames", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]));

    $.Property({Static:false, Public:true , Virtual:true }, "Bookmark", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"));

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventProperty")]));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventKeyword */ 

(function EventKeyword$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventKeyword", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int64, $asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int64, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareData", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "value", $.Int64);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "displayName", $.String);

    $.Field({Static:false, Public:false}, "dataReady", $.Boolean);

    $.Field({Static:false, Public:false}, "pmReference", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"));

    $.Field({Static:false, Public:false}, "syncObject", $.Object);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Value", $.Int64);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLevel */ 

(function EventLevel$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLevel", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareData", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "value", $.Int32);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "displayName", $.String);

    $.Field({Static:false, Public:false}, "dataReady", $.Boolean);

    $.Field({Static:false, Public:false}, "pmReference", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"));

    $.Field({Static:false, Public:false}, "syncObject", $.Object);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Value", $.Int32);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogRecord */ 

(function EventLogRecord$Members () {
  var $, $thisType;




































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogRecord", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), 
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FormatDescription", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FormatDescription", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ActivityId", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Guid")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Bookmark", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ContainerLog", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keywords", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Int64]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeywordsDisplayNames", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Level", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LevelDisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LogName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MachineName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MatchedQueryIds", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Opcode", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Int16]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OpcodeDisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProcessId", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventProperty")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProviderId", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Guid")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProviderName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Qualifiers", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RecordId", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Int64]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RelatedActivityId", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Guid")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Task", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TaskDisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ThreadId", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TimeCreated", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UserId", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Security.Principal.SecurityIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Version", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Byte]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBookmarkHandleFromBookmark", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetPropertyValues", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IList`1", [$.Object]), [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogPropertySelector")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareSystemData", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXml", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Constant({Static:true , Public:false}, "SYSTEM_PROPERTY_COUNT", $.Int32, 18);

    $.Field({Static:false, Public:false}, "handle", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"))
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "session", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"));

    $.Field({Static:false, Public:false}, "systemProperties", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.NativeWrapper+SystemProperties"));

    $.Field({Static:false, Public:false}, "containerChannel", $.String);

    $.Field({Static:false, Public:false}, "matchedQueryIds", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "syncObject", $.Object);

    $.Field({Static:false, Public:false}, "levelName", $.String);

    $.Field({Static:false, Public:false}, "taskName", $.String);

    $.Field({Static:false, Public:false}, "opcodeName", $.String);

    $.Field({Static:false, Public:false}, "keywordsNames", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]));

    $.Field({Static:false, Public:false}, "levelNameReady", $.Boolean);

    $.Field({Static:false, Public:false}, "taskNameReady", $.Boolean);

    $.Field({Static:false, Public:false}, "opcodeNameReady", $.Boolean);

    $.Field({Static:false, Public:false}, "cachedMetadataInformation", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation"));

    $.Property({Static:false, Public:false}, "Handle", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Version", $asm02.TypeRef("System.Nullable`1", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "Qualifiers", $asm02.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "Level", $asm02.TypeRef("System.Nullable`1", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "Task", $asm02.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "Opcode", $asm02.TypeRef("System.Nullable`1", [$.Int16]));

    $.Property({Static:false, Public:true , Virtual:true }, "Keywords", $asm02.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true , Virtual:true }, "RecordId", $asm02.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true , Virtual:true }, "ProviderName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ProviderId", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Guid")]));

    $.Property({Static:false, Public:true , Virtual:true }, "LogName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ProcessId", $asm02.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "ThreadId", $asm02.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "MachineName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "UserId", $asm02.TypeRef("System.Security.Principal.SecurityIdentifier"));

    $.Property({Static:false, Public:true , Virtual:true }, "TimeCreated", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ActivityId", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Guid")]));

    $.Property({Static:false, Public:true , Virtual:true }, "RelatedActivityId", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Guid")]));

    $.Property({Static:false, Public:true }, "ContainerLog", $.String);

    $.Property({Static:false, Public:true }, "MatchedQueryIds", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "Bookmark", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"));

    $.Property({Static:false, Public:true , Virtual:true }, "LevelDisplayName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "OpcodeDisplayName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "TaskDisplayName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "KeywordsDisplayNames", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]));

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventProperty")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogReader */ 

(function EventLogReader$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Diagnostics.Eventing.Reader.PathType")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery"), $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CancelReading", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_BatchSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogStatus", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogStatus")]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetNextBatch", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.TimeSpan")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ReadEvent", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadEvent", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"), [$asm02.TypeRef("System.TimeSpan")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Seek", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Seek", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"), $.Int64])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Seek", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.IO.SeekOrigin"), $.Int64])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SeekCommon", 
      JSIL.MethodSignature.Action($.Int64)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SeekReset", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_BatchSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "eventQuery", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery"));

    $.Field({Static:false, Public:false}, "batchSize", $.Int32);

    $.Field({Static:false, Public:false}, "handle", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Field({Static:false, Public:false}, "eventsBuffer", $jsilcore.TypeRef("System.Array", [$.IntPtr]));

    $.Field({Static:false, Public:false}, "currentIndex", $.Int32);

    $.Field({Static:false, Public:false}, "eventCount", $.Int32);

    $.Field({Static:false, Public:false}, "isEof", $.Boolean);

    $.Field({Static:false, Public:false}, "cachedMetadataInformation", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation"));

    $.Property({Static:false, Public:true }, "BatchSize", $.Int32);

    $.Property({Static:false, Public:true }, "LogStatus", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogStatus")]));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogWatcher */ 

(function EventLogWatcher$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogWatcher", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery"), $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery"), $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_EventRecordWritten", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs")]))
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Enabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleEventsRequestCompletion", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IssueCallback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_EventRecordWritten", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs")]))
    )
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "RequestEvents", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Enabled", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "StartSubscribing", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "StopSubscribing", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SubscribedEventsAvailableCallback", 
      new JSIL.MethodSignature(null, [$.Object, $.Boolean])
    );

    $.Field({Static:false, Public:false}, "EventRecordWritten", $asm02.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs")]))
      .Attribute($asm02.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "eventQuery", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery"));

    $.Field({Static:false, Public:false}, "bookmark", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"));

    $.Field({Static:false, Public:false}, "readExistingEvents", $.Boolean);

    $.Field({Static:false, Public:false}, "handle", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Field({Static:false, Public:false}, "eventsBuffer", $jsilcore.TypeRef("System.Array", [$.IntPtr]));

    $.Field({Static:false, Public:false}, "numEventsInBuffer", $.Int32);

    $.Field({Static:false, Public:false}, "isSubscribing", $.Boolean);

    $.Field({Static:false, Public:false}, "callbackThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "subscriptionWaitHandle", $asm02.TypeRef("System.Threading.AutoResetEvent"));

    $.Field({Static:false, Public:false}, "unregisterDoneHandle", $asm02.TypeRef("System.Threading.AutoResetEvent"));

    $.Field({Static:false, Public:false}, "registeredWaitHandle", $asm02.TypeRef("System.Threading.RegisteredWaitHandle"));

    $.Field({Static:false, Public:false}, "cachedMetadataInformation", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation"));

    $.Field({Static:false, Public:false}, "asyncException", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogException"));

    $.Property({Static:false, Public:true }, "Enabled", $.Boolean);

    $.Event({Static:false, Public:true }, "EventRecordWritten", $asm02.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs */ 

(function EventRecordWrittenEventArgs$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.EventArgs"), 
      Name: "System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogRecord"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EventException", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EventRecord", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"))
    );

    $.Field({Static:false, Public:false}, "record", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"));

    $.Field({Static:false, Public:false}, "exception", $asm02.TypeRef("System.Exception"));

    $.Property({Static:false, Public:true }, "EventRecord", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"));

    $.Property({Static:false, Public:true }, "EventException", $asm02.TypeRef("System.Exception"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogQuery */ 

(function EventLogQuery$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogQuery", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Diagnostics.Eventing.Reader.PathType")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Query", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReverseDirection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Session", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ThePathType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.Eventing.Reader.PathType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TolerateQueryErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReverseDirection", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Session", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TolerateQueryErrors", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "query", $.String);

    $.Field({Static:false, Public:false}, "path", $.String);

    $.Field({Static:false, Public:false}, "session", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"));

    $.Field({Static:false, Public:false}, "pathType", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.PathType"));

    $.Field({Static:false, Public:false}, "tolerateErrors", $.Boolean);

    $.Field({Static:false, Public:false}, "reverseDirection", $.Boolean);

    $.Property({Static:false, Public:true }, "Session", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"));

    $.Property({Static:false, Public:true }, "TolerateQueryErrors", $.Boolean);

    $.Property({Static:false, Public:true }, "ReverseDirection", $.Boolean);

    $.Property({Static:false, Public:false}, "Path", $.String);

    $.Property({Static:false, Public:false}, "ThePathType", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.PathType"));

    $.Property({Static:false, Public:false}, "Query", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogHandle */ 

(function EventLogHandle$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.IntPtr, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.Property({Static:true , Public:true }, "Zero", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

})();

/* class System.Diagnostics.Eventing.Reader.EventLogPermissionHolder */ 

(function EventLogPermissionHolder$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogPermissionHolder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "GetEventLogPermission", 
      JSIL.MethodSignature.Return($asm05.TypeRef("System.Diagnostics.EventLogPermission"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.Eventing.Reader.SessionAuthentication */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.Eventing.Reader.SessionAuthentication", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Default: 0, 
    Negotiate: 1, 
    Kerberos: 2, 
    Ntlm: 3, 
  }
);

/* enum System.Diagnostics.Eventing.Reader.PathType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.Eventing.Reader.PathType", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    LogName: 1, 
    FilePath: 2, 
  }
);

/* class System.Diagnostics.Eventing.Reader.EventLogSession */ 

(function EventLogSession$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogSession", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm02.TypeRef("System.Security.SecureString"), 
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.SessionAuthentication")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CancelCurrentOperations", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ClearLog", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ClearLog", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ExportLog", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportLog", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), 
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportLogAndMessages", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportLogAndMessages", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), 
          $.String, $.String, 
          $.Boolean, $asm02.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GlobalSession", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetLogInformation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogInformation"), [$.String, $asm07.TypeRef("System.Diagnostics.Eventing.Reader.PathType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetLogNames", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetProviderNames", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetupSystemContext", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetupUserContext", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "renderContextHandleSystem", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Field({Static:false, Public:false}, "renderContextHandleUser", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Field({Static:false, Public:false}, "syncObject", $.Object);

    $.Field({Static:false, Public:false}, "server", $.String);

    $.Field({Static:false, Public:false}, "user", $.String);

    $.Field({Static:false, Public:false}, "domain", $.String);

    $.Field({Static:false, Public:false}, "logOnType", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.SessionAuthentication"));

    $.Field({Static:false, Public:false}, "handle", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Field({Static:true , Public:false}, "globalSession", $.Type);

    $.Property({Static:false, Public:false}, "Handle", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Property({Static:true , Public:true }, "GlobalSession", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventMetadata */ 

(function EventMetadata$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventMetadata", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 10, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Byte, 
          $.Byte, $.Byte, 
          $.Byte, $.Int16, 
          $.Int64, $.String, 
          $.String, $asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Keywords", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Level", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogLink", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogLink"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Opcode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Task", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventTask"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Template", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.Field({Static:false, Public:false}, "id", $.Int64);

    $.Field({Static:false, Public:false}, "version", $.Byte);

    $.Field({Static:false, Public:false}, "channelId", $.Byte);

    $.Field({Static:false, Public:false}, "level", $.Byte);

    $.Field({Static:false, Public:false}, "opcode", $.Int16);

    $.Field({Static:false, Public:false}, "task", $.Int32);

    $.Field({Static:false, Public:false}, "keywords", $.Int64);

    $.Field({Static:false, Public:false}, "template", $.String);

    $.Field({Static:false, Public:false}, "description", $.String);

    $.Field({Static:false, Public:false}, "pmReference", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"));

    $.Property({Static:false, Public:true }, "Id", $.Int64);

    $.Property({Static:false, Public:true }, "Version", $.Byte);

    $.Property({Static:false, Public:true }, "LogLink", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogLink"));

    $.Property({Static:false, Public:true }, "Level", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel"));

    $.Property({Static:false, Public:true }, "Opcode", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode"));

    $.Property({Static:false, Public:true }, "Task", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventTask"));

    $.Property({Static:false, Public:true }, "Keywords", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")]));

    $.Property({Static:false, Public:true }, "Template", $.String);

    $.Property({Static:false, Public:true }, "Description", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventOpcode */ 

(function EventOpcode$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventOpcode", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareData", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "value", $.Int32);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "displayName", $.String);

    $.Field({Static:false, Public:false}, "dataReady", $.Boolean);

    $.Field({Static:false, Public:false}, "pmReference", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"));

    $.Field({Static:false, Public:false}, "syncObject", $.Object);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Value", $.Int32);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventTask */ 

(function EventTask$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventTask", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $asm02.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EventGuid", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareData", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "value", $.Int32);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "displayName", $.String);

    $.Field({Static:false, Public:false}, "guid", $asm02.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "dataReady", $.Boolean);

    $.Field({Static:false, Public:false}, "pmReference", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"));

    $.Field({Static:false, Public:false}, "syncObject", $.Object);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Value", $.Int32);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    $.Property({Static:false, Public:true }, "EventGuid", $asm02.TypeRef("System.Guid"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogException */ 

(function EventLogException$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Exception"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm02.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm02.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Message", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm02.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Throw", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "errorCode", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogNotFoundException */ 

(function EventLogNotFoundException$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogException"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogNotFoundException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm02.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm02.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogReadingException */ 

(function EventLogReadingException$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogException"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogReadingException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm02.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm02.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException */ 

(function EventLogProviderDisabledException$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogException"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm02.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm02.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogInvalidDataException */ 

(function EventLogInvalidDataException$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogException"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogInvalidDataException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm02.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm02.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogInformation */ 

(function EventLogInformation$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), $.String, 
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.PathType")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CreationTime", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FileSize", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Int64]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLogFull", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Boolean]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LastAccessTime", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LastWriteTime", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OldestRecordNumber", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Int64]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RecordCount", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Nullable`1", [$.Int64]))
    );

    $.Field({Static:false, Public:false}, "creationTime", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.DateTime")]));

    $.Field({Static:false, Public:false}, "lastAccessTime", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.DateTime")]));

    $.Field({Static:false, Public:false}, "lastWriteTime", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.DateTime")]));

    $.Field({Static:false, Public:false}, "fileSize", $asm02.TypeRef("System.Nullable`1", [$.Int64]));

    $.Field({Static:false, Public:false}, "fileAttributes", $asm02.TypeRef("System.Nullable`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "recordCount", $asm02.TypeRef("System.Nullable`1", [$.Int64]));

    $.Field({Static:false, Public:false}, "oldestRecordNumber", $asm02.TypeRef("System.Nullable`1", [$.Int64]));

    $.Field({Static:false, Public:false}, "isLogFull", $asm02.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Property({Static:false, Public:true }, "CreationTime", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true }, "LastAccessTime", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true }, "LastWriteTime", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true }, "FileSize", $asm02.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true }, "Attributes", $asm02.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "RecordCount", $asm02.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true }, "OldestRecordNumber", $asm02.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true }, "IsLogFull", $asm02.TypeRef("System.Nullable`1", [$.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.NativeWrapper */ 

(function NativeWrapper$Members () {
  var $, $thisType;





















































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.NativeWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertToAnsiString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtVariant")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertToArray", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Array"), [
          $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtVariant"), $asm02.TypeRef("System.Type"), 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertToBoolArray", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Array"), [$asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtVariant")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertToFileTimeArray", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Array"), [$asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtVariant")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ConvertToObject", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtVariant")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertToObject", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtVariant"), $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtVariantType")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertToSafeHandle", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtVariant")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtVariant")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertToStringArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtVariant"), $.Boolean])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertToSysTimeArray", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Array"), [$asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtVariant")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtArchiveExportedLog", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtCancel", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"))
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtClearLog", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtClose", 
      JSIL.MethodSignature.Action($.IntPtr)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtCreateBookmark", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$.String])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtCreateRenderContext", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtRenderContextFlags")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtExportLog", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.String, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtFormatMessage", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.UInt32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtFormatMessageFormatDescription", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtFormatMessageRenderKeywords", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtFormatMessageFlags")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtFormatMessageRenderName", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtFormatMessageFlags")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtGetChannelConfigProperty", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtChannelConfigPropertyId")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtGetEventInfo", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtEventPropertyId")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtGetEventMetadataProperty", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtEventMetadataPropertyId")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtGetLogInfo", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtLogPropertyId")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtGetObjectArrayProperty", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtGetObjectArraySize", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtGetPublisherMetadataProperty", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtPublisherMetadataPropertyId")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EvtGetPublisherMetadataPropertyHandle", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtPublisherMetadataPropertyId")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtGetQueryInfo", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtQueryPropertyId")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtNext", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.IntPtr]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtNextChannelPath", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtNextEventMetadata", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtNextPublisherId", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenChannelConfig", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenChannelEnum", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenEventMetadataEnum", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenLog", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.PathType")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenProviderEnum", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenProviderMetadata", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenSession", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtLoginClass"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtRpcLogin")]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtQuery", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtRender", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtRenderFlags"), $asm02.TypeRef("System.Text.StringBuilder")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtRenderBookmark", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtRenderBufferWithContextSystem", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtRenderFlags"), $asm07.TypeRef("System.Diagnostics.Eventing.Reader.NativeWrapper+SystemProperties"), 
          $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtRenderBufferWithContextUserOrValues", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IList`1", [$.Object]), [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtSaveChannelConfig", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtSeek", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int64, 
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
          $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtSeekFlags")
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtSetChannelConfigProperty", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtChannelConfigPropertyId"), 
          $.Object
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtSubscribe", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm02.TypeRef("Microsoft.Win32.SafeHandles.SafeWaitHandle"), 
          $.String, $.String, 
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.IntPtr, 
          $.IntPtr, $.Int32
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtUpdateBookmark", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "s_platformNotSupported", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.NativeWrapper+SystemProperties */ 

(function SystemProperties$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.NativeWrapper+SystemProperties", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "filled", $.Boolean);

    $.Field({Static:false, Public:true }, "Id", $asm02.TypeRef("System.Nullable`1", [$.UInt16]));

    $.Field({Static:false, Public:true }, "Version", $asm02.TypeRef("System.Nullable`1", [$.Byte]));

    $.Field({Static:false, Public:true }, "Qualifiers", $asm02.TypeRef("System.Nullable`1", [$.UInt16]));

    $.Field({Static:false, Public:true }, "Level", $asm02.TypeRef("System.Nullable`1", [$.Byte]));

    $.Field({Static:false, Public:true }, "Task", $asm02.TypeRef("System.Nullable`1", [$.UInt16]));

    $.Field({Static:false, Public:true }, "Opcode", $asm02.TypeRef("System.Nullable`1", [$.Byte]));

    $.Field({Static:false, Public:true }, "Keywords", $asm02.TypeRef("System.Nullable`1", [$.UInt64]));

    $.Field({Static:false, Public:true }, "RecordId", $asm02.TypeRef("System.Nullable`1", [$.UInt64]));

    $.Field({Static:false, Public:true }, "ProviderName", $.String);

    $.Field({Static:false, Public:true }, "ProviderId", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Guid")]));

    $.Field({Static:false, Public:true }, "ChannelName", $.String);

    $.Field({Static:false, Public:true }, "ProcessId", $asm02.TypeRef("System.Nullable`1", [$.UInt32]));

    $.Field({Static:false, Public:true }, "ThreadId", $asm02.TypeRef("System.Nullable`1", [$.UInt32]));

    $.Field({Static:false, Public:true }, "ComputerName", $.String);

    $.Field({Static:false, Public:true }, "UserId", $asm02.TypeRef("System.Security.Principal.SecurityIdentifier"));

    $.Field({Static:false, Public:true }, "TimeCreated", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.DateTime")]));

    $.Field({Static:false, Public:true }, "ActivityId", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Guid")]));

    $.Field({Static:false, Public:true }, "RelatedActivityId", $asm02.TypeRef("System.Nullable`1", [$asm02.TypeRef("System.Guid")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.ProviderMetadata */ 

(function ProviderMetadata$Members () {
  var $, $thisType;



























  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.ProviderMetadata", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), 
          $asm02.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), 
          $asm02.TypeRef("System.Globalization.CultureInfo"), $.String
        ])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckReleased", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "FindStandardKeywordDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindStandardLevelDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $.UInt32])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindStandardOpcodeDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $.UInt32])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindStandardTaskDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $.UInt32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Events", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventMetadata")]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HelpLink", 
      JSIL.MethodSignature.Return($asm05.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Keywords", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Levels", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogLinks", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogLink")]))
    )
      .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_MessageFilePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Opcodes", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParameterFilePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProviderMessageID", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResourceFilePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Tasks", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventTask")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProviderListProperty", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm07.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtPublisherMetadataPropertyId")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "handle", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Field({Static:false, Public:false}, "defaultProviderHandle", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Field({Static:false, Public:false}, "session", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"));

    $.Field({Static:false, Public:false}, "providerName", $.String);

    $.Field({Static:false, Public:false}, "cultureInfo", $asm02.TypeRef("System.Globalization.CultureInfo"));

    $.Field({Static:false, Public:false}, "logFilePath", $.String);

    $.Field({Static:false, Public:false}, "levels", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel")]));

    $.Field({Static:false, Public:false}, "opcodes", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode")]));

    $.Field({Static:false, Public:false}, "tasks", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventTask")]));

    $.Field({Static:false, Public:false}, "keywords", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")]));

    $.Field({Static:false, Public:false}, "standardLevels", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel")]));

    $.Field({Static:false, Public:false}, "standardOpcodes", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode")]));

    $.Field({Static:false, Public:false}, "standardTasks", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventTask")]));

    $.Field({Static:false, Public:false}, "standardKeywords", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")]));

    $.Field({Static:false, Public:false}, "channelReferences", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogLink")]));

    $.Field({Static:false, Public:false}, "syncObject", $.Object);

    $.Property({Static:false, Public:false}, "Handle", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Id", $asm02.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true }, "MessageFilePath", $.String);

    $.Property({Static:false, Public:true }, "ResourceFilePath", $.String);

    $.Property({Static:false, Public:true }, "ParameterFilePath", $.String);

    $.Property({Static:false, Public:true }, "HelpLink", $asm05.TypeRef("System.Uri"));

    $.Property({Static:false, Public:false}, "ProviderMessageID", $.UInt32);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    $.Property({Static:false, Public:true }, "LogLinks", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogLink")]));

    $.Property({Static:false, Public:true }, "Levels", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel")]));

    $.Property({Static:false, Public:true }, "Opcodes", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode")]));

    $.Property({Static:false, Public:true }, "Keywords", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")]));

    $.Property({Static:false, Public:true }, "Tasks", $asm02.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventTask")]));

    $.Property({Static:false, Public:true }, "Events", $asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventMetadata")]));

    $.ImplementInterfaces(
      /* 0 */ $asm02.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.Eventing.Reader.ProviderMetadata+ObjectTypeName */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.Eventing.Reader.ProviderMetadata+ObjectTypeName", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Level: 0, 
    Opcode: 1, 
    Task: 2, 
    Keyword: 3, 
  }
);

/* class System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation */ 

(function ProviderMetadataCachedInformation$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddCacheEntry", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation+ProviderMetadataId"), $asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeleteCacheEntry", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation+ProviderMetadataId"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushOldestEntry", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetFormatDescription", 
      new JSIL.MethodSignature($.String, [$.String, $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetFormatDescription", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetKeywordDisplayNames", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [$.String, $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetLevelDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetOpcodeDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetProviderMetadata", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"), [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation+ProviderMetadataId")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTaskDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")])
    )
      .Attribute($asm02.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IsCacheFull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsProviderinCache", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation+ProviderMetadataId")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateCacheValueInfoForHit", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation+CacheItem"))
    );

    $.Field({Static:false, Public:false}, "cache", $asm02.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation+ProviderMetadataId"), $asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation+CacheItem")]));

    $.Field({Static:false, Public:false}, "maximumCacheSize", $.Int32);

    $.Field({Static:false, Public:false}, "session", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"));

    $.Field({Static:false, Public:false}, "logfile", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation+ProviderMetadataId */ 

(function ProviderMetadataId$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation+ProviderMetadataId", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm02.TypeRef("System.Globalization.CultureInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TheCultureInfo", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "providerName", $.String);

    $.Field({Static:false, Public:false}, "cultureInfo", $asm02.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:false, Public:true }, "ProviderName", $.String);

    $.Property({Static:false, Public:true }, "TheCultureInfo", $asm02.TypeRef("System.Globalization.CultureInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation+CacheItem */ 

(function CacheItem$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation+CacheItem", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderMetadata", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TheTime", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TheTime", 
      JSIL.MethodSignature.Action($asm02.TypeRef("System.DateTime"))
    );

    $.Field({Static:false, Public:false}, "pm", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"));

    $.Field({Static:false, Public:false}, "theTime", $asm02.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "TheTime", $asm02.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "ProviderMetadata", $asm07.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.CoTaskMemUnicodeSafeHandle */ 

(function CoTaskMemUnicodeSafeHandle$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Diagnostics.Eventing.Reader.CoTaskMemUnicodeSafeHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.IntPtr, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMemory", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetMemory", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.Property({Static:true , Public:true }, "Zero", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Diagnostics.Eventing.Reader.CoTaskMemSafeHandle */ 

(function CoTaskMemSafeHandle$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Diagnostics.Eventing.Reader.CoTaskMemSafeHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMemory", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetMemory", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.Property({Static:true , Public:true }, "Zero", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm02.System.Security.SecurityCriticalScope.Everything]; });

})();

/* enum System.Diagnostics.Eventing.Reader.StandardEventLevel */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.Eventing.Reader.StandardEventLevel", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    LogAlways: 0, 
    Critical: 1, 
    Error: 2, 
    Warning: 3, 
    Informational: 4, 
    Verbose: 5, 
  }
);

/* enum System.Diagnostics.Eventing.Reader.StandardEventTask */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.Eventing.Reader.StandardEventTask", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
  }
);

/* enum System.Diagnostics.Eventing.Reader.StandardEventOpcode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.Eventing.Reader.StandardEventOpcode", 
    BaseType: $asm02.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Info: 0, 
    Start: 1, 
    Stop: 2, 
    DataCollectionStart: 3, 
    DataCollectionStop: 4, 
    Extension: 5, 
    Reply: 6, 
    Resume: 7, 
    Suspend: 8, 
    Send: 9, 
    Receive: 240, 
  }
);

/* enum System.Diagnostics.Eventing.Reader.StandardEventKeywords */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.Eventing.Reader.StandardEventKeywords", 
    BaseType: $asm02.TypeRef("System.Int64"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    ResponseTime: 281474976710656, 
    WdiContext: 562949953421312, 
    WdiDiagnostic: 1125899906842624, 
    Sqm: 2251799813685248, 
    CorrelationHint: 4503599627370496, 
    AuditFailure: 4503599627370496, 
    AuditSuccess: 9007199254740992, 
    CorrelationHint2: 18014398509481984, 
    EventLogClassic: 36028797018963968, 
  }
);

/* class __DynamicallyInvokableAttribute */ 

(function __DynamicallyInvokableAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Attribute"), 
      Name: "__DynamicallyInvokableAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm02.System.AttributeTargets.All]; });

})();

